{"version":3,"sources":["../helpers.js","csui-helpers.js"],"names":["pushStartingModules","modules","forEach","module","indexOf","push","csui","window","requirejs","require","define","setLanguage","language","country","locale","toLowerCase","replace","undefined","rtl","needsRTL","config","i18n","test","setLastLanguage","console","warn","setLogging","settings","csui/utils/log","onReady","success","failure","parameters","Array","prototype","slice","call","arguments","unshift","onReady2","apply","this","loadModules","ready","s","contexts","_","navigator","languages","loadableLocales","Object","keys","map","split","alternativeLocales","filter","alternativeLocale","length","waitForLanguage","languageCount","loadLanguage","bundleIndexName","script","document","createElement","src","toUrl","setAttribute","addEventListener","head","appendChild","currentScript","languageBundleIndexes","bundleIndexes","codeBundle","onReady3","csuiOptions","ensureNeededLinks","connection","i","linkHref","overrideElement","linkArr","querySelectorAll","overrideExists","themeExists","themeRegex","hasAttribute","getAttribute","csuiOverrideCssUrl","overrideHref","cssPath","originalConnection","supportPath","origin","exec","url","baseSupportUrl","themeHref","moduleStamp","urlArgs","themeLink","insertBefore","newLink","removeCsuiOptionsFromModules","csuiOptionsIndex","splice","insertOptionsObjectIntoArguments","args","eventHandler","onBeforeLoadModules","waitForLoading","waitLoadingCounter","loadCsuiSettings","checkedLocale","successCallback","applySettings","configurations","fail","languageBundles","bundles","replaceTicket","ticket","request","getResponseHeader","ticketExpires","serverDate","credentials","authenticationHeaders","session","expires","message","error","Error","settingsData","isLoadRunning","XMLHttpRequest","onreadystatechange","readyState","DONE","status","JSON","parse","responseText","loaded","statusText","open","authenticationFound","username","password","headerVal","btoa","unescape","encodeURIComponent","setRequestHeader","propName","hasOwnProperty","send","triggerCsuiSettingsCallbacks","callbacks","cbData","index","callback","options","getStaticAssetsLanguage","loadableLocale","some","loadConfiguration","loadingHelper","setTimeout","isArray","getVersion","getExtensionModules","printExtensionModules","ServerModuleCollection","serverModules","fetch","done","toJSON","log","stringify"],"mappings":"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","file":"csui-helpers.js","sourcesContent":["// This file contains members added to the global csui object which should\r\n// be available immediately without loading any modules.\r\n(function () {\r\n  'use strict';\r\n\r\n  // Support development pages loading single files not built together yet.\r\n  // Such pages are supposed to include three scripts:\r\n  //   <script src=\".../lib/require.js\"></script>\r\n  //   <script src=\".../helpers.js\"></script>\r\n  //   <script src=\".../config.js\"></script>\r\n  var csui = window.csui || (window.csui = {});\r\n  if (!csui.requirejs && window.requirejs) {\r\n    csui.requirejs = window.requirejs;\r\n    csui.require = window.require;\r\n    csui.define = window.define;\r\n  }\r\n\r\n  csui.setLanguage = function (language, country) {\r\n    // Support the original interface with language and country\r\n    // passed separately as strings\r\n    if (country) {\r\n      language = language + '-' + country;\r\n    }\r\n    // Support passing both a string with locale and an object\r\n    // with the locale and other optional parameters\r\n    if (typeof language === 'string' || language === null) {\r\n      language = {locale: language};\r\n    }\r\n    // Normalize the locale to be always lower-case \"language[-country]\"\r\n    if (language.locale) {\r\n      language.locale = language.locale.toLowerCase().replace('_', '-');\r\n    }\r\n    // Enable RTL mode using the default value. There is no server to ask\r\n    // about it at this time and it is not needed to waste a server call.\r\n    if (language.rtl === undefined) {\r\n      language.rtl = csui.needsRTL(language.locale);\r\n    }\r\n    csui.require.config({\r\n      config: {i18n: language}\r\n    });\r\n  };\r\n\r\n  csui.needsRTL = function (language) {\r\n    // Enable RTL mode according to the usual writing direction in known\r\n    // languages. There is no server to ask about it at this time and it\r\n    // is not needed to waste a server call anyway. List more than officially\r\n    // supplied languages here, in case custom language packs are created.\r\n    // See https://en.wikipedia.org/wiki/Right-to-left\r\n    // and https://en.wikipedia.org/wiki/Bi-directional_text.\r\n    return /^(?:ar|fa|he|ur|yi)/.test(language);\r\n  };\r\n\r\n  csui.setLastLanguage = function () {\r\n    console.warn('The csui.setLanguage method has become obsolete and has no effect. ' +\r\n                 'If you need to remember the last chosen csui language, do it your ' +\r\n                 'application, please.');\r\n  };\r\n\r\n  csui.setLogging = function (settings) {\r\n    // Merge the util/log configuration with the specified object.\r\n    csui.require.config({\r\n      config: {'csui/utils/log': settings}\r\n    });\r\n  };\r\n\r\n  var moduleLoggingEnabled;\r\n\r\n  function enableModuleLogging() {\r\n    if (moduleLoggingEnabled) {\r\n      return;\r\n    }\r\n    moduleLoggingEnabled = true;\r\n\r\n    // Debug logging method helpers.\r\n    function logModule(log, map, earlier) {\r\n      if (map.id.indexOf('!') > 0) {\r\n        log.debug('A plugin processed {0}{1}.',\r\n            map.id, earlier ? ' earlier' : '')\r\n        && console.log(log.last);\r\n      } else {\r\n        log.debug('The module {0} was loaded{2} from {1}.',\r\n            map.id, map.url, earlier ? ' earlier' : '')\r\n        && console.log(log.last);\r\n      }\r\n    }\r\n\r\n    function logModuleToConsole(map, earlier) {\r\n      if (map.id.indexOf('!') > 0) {\r\n        console.log('A plugin processed {0}.'\r\n            .replace('{0}', map.id));\r\n      } else {\r\n        console.log('The module {0} was loaded from {1}.'\r\n            .replace('{0}', map.id).replace('{1}', map.url));\r\n      }\r\n    }\r\n\r\n    // Error logging method helpers.\r\n    function getErrorInfo(error) {\r\n      if (error.requireModules) {\r\n        return {\r\n          message: error.message.replace(/\\r?\\n.+$/, ''),\r\n          requireModules: error.requireModules\r\n        };\r\n      }\r\n      return {message: error.message + '\\r\\n' + error.stack};\r\n    }\r\n\r\n    function reportModule(log, error, earlier) {\r\n      error = getErrorInfo(error);\r\n      if (error.requireModules) {\r\n        log.error('Loading modules [{0}] failed{2}: {1}',\r\n            error.requireModules.join(','), error.message,\r\n            earlier ? ' earlier' : '')\r\n        && console.error(log.last);\r\n      } else {\r\n        log.error('Executing a module failed{1}: {0}',\r\n            error.message, earlier ? ' earlier' : '')\r\n        && console.error(log.last);\r\n      }\r\n    }\r\n\r\n    function reportModuleToConsole(error) {\r\n      error = getErrorInfo(error);\r\n      if (error.requireModules) {\r\n        console.log('Loading modules [{0}] failed: {1}'\r\n            .replace('{0}', error.requireModules.join(','))\r\n            .replace('{1}', error.message));\r\n      } else {\r\n        console.log('Executing a module failed: {0}'\r\n            .replace('{1}', error.message));\r\n      }\r\n    }\r\n\r\n    // Re-log debug and error entries when the log module is loaded.\r\n    var beforeLoggingInitialization = [];\r\n\r\n    function relogEntries(log) {\r\n      if (beforeLoggingInitialization.length) {\r\n        beforeLoggingInitialization.forEach(function (item) {\r\n          (item.id ? logModule : reportModule)(log, item, true);\r\n        });\r\n        beforeLoggingInitialization = [];\r\n      }\r\n    }\r\n\r\n    // Register for debug logging.\r\n    var originalResourceLoad = csui.require.onResourceLoad;\r\n    csui.require.onResourceLoad = function (context, map, depMaps) {\r\n      // Call the original implementation before ours - it may modify something.\r\n      if (originalResourceLoad) {\r\n        originalResourceLoad.apply(this, arguments);\r\n      }\r\n      var log = csui.require.defined('csui/utils/log') &&\r\n                csui.require('csui/utils/log');\r\n      if (log) {\r\n        relogEntries(log);\r\n        logModule(log, map);\r\n      } else {\r\n        logModuleToConsole(map);\r\n        beforeLoggingInitialization.push(map);\r\n      }\r\n    };\r\n\r\n    // Register for error logging.\r\n    var originalError = csui.require.onError;\r\n    csui.require.onError = function (error) {\r\n      var log = csui.require.defined('csui/utils/log') &&\r\n                csui.require('csui/utils/log');\r\n      if (log) {\r\n        relogEntries(log);\r\n        reportModule(log, error);\r\n      } else {\r\n        reportModuleToConsole(error);\r\n        beforeLoggingInitialization.push(error);\r\n      }\r\n      // Call the original implementation after ours - it may throw.\r\n      if (originalError) {\r\n        originalError.apply(this, arguments);\r\n      }\r\n    };\r\n  }\r\n\r\n  function pushStartingModules(modules) {\r\n    // The logging module should be loaded as early as possible.\r\n    // The error handling module should be loaded as early as possible.\r\n    // The domReady module ensures the HTML DOM for error reporting.\r\n    ['csui/utils/log', 'csui/utils/base', 'csui/lib/domReady!']\r\n        .forEach(function (module) {\r\n          if (modules.indexOf(module) < 0) {\r\n            modules.push(module);\r\n          }\r\n        });\r\n  }\r\n\r\n  csui.onReady = function (modules, success, failure) {\r\n    var parameters = Array.prototype.slice.call(arguments);\r\n\r\n    if (modules instanceof Array) {\r\n      if (modules.indexOf('csui/integration/v1.widgets.wrapper') < 0) {\r\n        modules.push('csui/integration/v1.widgets.wrapper');\r\n      }\r\n    } else {\r\n      modules = ['csui/integration/v1.widgets.wrapper'];\r\n      parameters.unshift(modules);\r\n    }\r\n\r\n    csui.onReady2.apply(this, parameters);\r\n  };\r\n\r\n  csui.onReady2 = function (modules, success, failure) {\r\n    // Normalize the input parameters, which are all optional.\r\n    if (!failure) {\r\n      // call(success, failure)\r\n      if (typeof modules === 'function') {\r\n        failure = success;\r\n        success = modules;\r\n        modules = undefined;\r\n      }\r\n      // else call(modules, success)\r\n    }\r\n    if (!success) {\r\n      // call(success)\r\n      if (typeof modules === 'function') {\r\n        success = modules;\r\n        modules = undefined;\r\n      }\r\n    }\r\n    if (!modules) {\r\n      // call()\r\n      modules = [];\r\n    }\r\n\r\n    // Loads the required modules, once all configuration scripts\r\n    // have been loaded (or failed)\r\n    function loadModules() {\r\n      pushStartingModules(modules);\r\n      csui.require(modules, function () {\r\n        csui.ready || (csui.ready = true);\r\n        success && success.apply(this, arguments);\r\n      }, failure);\r\n    }\r\n\r\n    // Loads the scripts with language bundle indexes for every\r\n    // registered csui extension; every code bundle index needs\r\n    // a language bundle index to support the specified locale.\r\n    // Bundle indexes have to be loaded before the very first\r\n    // require() statement is executed.\r\n    function loadLanguages() {\r\n      // The server generates the list of bundle indexes from all\r\n      // registered csui extensions\r\n      var languageBundleIndexes = Object\r\n          .keys(csui.bundleIndexes || {})\r\n          .map(function (codeBundle) {\r\n            return codeBundle.replace('/bundles/', '/bundles/nls/' +\r\n              locale + '/') + '.js';\r\n          }),\r\n          languageCount = languageBundleIndexes.length + 1;\r\n\r\n      function waitForLanguage() {\r\n        if (!--languageCount) {\r\n          loadModules();\r\n        }\r\n      }\r\n\r\n      function loadLanguage(bundleIndexName) {\r\n        var script = document.createElement('script');\r\n        script.src = csui.require.toUrl(bundleIndexName);\r\n        script.setAttribute('data-csui-required', 'true');\r\n        script.addEventListener('load', waitForLanguage);\r\n        // The language pack is missing for a particular component;\r\n        // The English defaults will be used and the error will be\r\n        // dumped on the console.\r\n        script.addEventListener('error', waitForLanguage);\r\n        document.head.appendChild(script, document.currentScript);\r\n      }\r\n\r\n      languageBundleIndexes.forEach(loadLanguage);\r\n      waitForLanguage();\r\n    }\r\n\r\n    // TODO: Use some public interface to get the chosen locale\r\n    // and locales, which point to loadable language packs\r\n    // TODO: Think up something better, than copying this from i18n\r\n    var i18n = csui.require.s.contexts._.config.config.i18n,\r\n      locale = i18n && i18n.locale ||\r\n        navigator.languages && navigator.languages[0] ||\r\n        navigator.language || '';\r\n    locale = locale.toLowerCase();\r\n    // Ignore the default language; see nls/lang modules\r\n    if (locale && locale !== 'en' && locale !== 'en-us') {\r\n      var loadableLocales = i18n && i18n.loadableLocales || [];\r\n      if (!(loadableLocales instanceof Array)) {\r\n        loadableLocales = Object\r\n          .keys(loadableLocales)\r\n          .map(function (locale) {\r\n            return locale.toLowerCase();\r\n          });\r\n      }\r\n      // If no language pack for the full locale has been found,\r\n      // try a language pack for the language only.\r\n      if (loadableLocales.indexOf(locale) < 0) {\r\n        locale = locale.split('-')[0];\r\n      }\r\n      // If no language pack for the language-only locale has been found,\r\n      // try a full-locale language pack with other country.\r\n      if (loadableLocales.indexOf(locale) < 0) {\r\n        var alternativeLocales = loadableLocales.filter(function (alternativeLocale) {\r\n          return alternativeLocale.indexOf(locale + '-') === 0;\r\n        });\r\n        if (alternativeLocales.length) {\r\n          locale = alternativeLocales[0];\r\n        }\r\n      }\r\n      // Only languages, for which a language pack has been installed,\r\n      // makes sense to request to be loaded by require.js.\r\n      if (loadableLocales.indexOf(locale) >= 0) {\r\n        return loadLanguages();\r\n      }\r\n    }\r\n\r\n    loadModules();\r\n  };\r\n\r\n  csui.onReady3 = function (csuiOptions, modules, success, failure) {\r\n    // The csuiOptions are only passed to the success function if the pseudo-module 'csui-options' is specified\r\n    // The csuiOptions parameter is not optional.\r\n    if (typeof csuiOptions !== 'object' || csuiOptions === null ||\r\n        Array.isArray(csuiOptions) || !csuiOptions.connection) {\r\n      throw new Error('Missing connection options.');\r\n    }\r\n\r\n    // Normalize the input parameters, which are all optional.\r\n    if (!failure) {\r\n      // call(options, success, failure)\r\n      if (typeof modules === 'function') {\r\n        failure = success;\r\n        success = modules;\r\n        modules = undefined;\r\n      }\r\n      // else call(options, modules, success)\r\n    }\r\n    if (!success) {\r\n      // call(options, success)\r\n      if (typeof modules === 'function') {\r\n        success = modules;\r\n        modules = undefined;\r\n      }\r\n    }\r\n    if (!modules) {\r\n      // call(options)\r\n      modules = [];\r\n    }\r\n\r\n    var csuiOptionsIndex;\r\n\r\n    // ensure needed/wanted links in head-section\r\n    function ensureNeededLinks(connection) {\r\n      var linkArr = document.head.querySelectorAll(\"link,style\");\r\n      var i,\r\n          linkHref,\r\n          overrideExists = false,\r\n          overrideElement,\r\n          themeExists = false,\r\n          themeRegex = /^.+\\/csui\\/themes\\/.+\\/(?:theme|theme-rtl)\\.css(?:\\?.*)?$/;\r\n\r\n      // check all links for maybe already existing link-tags\r\n      for (i = 0; i < linkArr.length; i++) {\r\n        if (linkArr[i].hasAttribute(\"data-csui-theme-overrides\")) {\r\n          if (!overrideElement) {\r\n            // remember first theme-overrides\r\n            overrideElement = linkArr[i];\r\n          }\r\n        }\r\n        if (linkArr[i].hasAttribute(\"href\")) {\r\n          linkHref = linkArr[i].getAttribute(\"href\");\r\n          linkHref = linkHref.toLowerCase();\r\n\r\n          // classify link\r\n          if (linkArr[i].hasAttribute(\"data-csui-theme-overrides\")) {\r\n            // overrides\r\n            if (window.csuiOverrideCssUrl) {\r\n              var overrideHref = window.csuiOverrideCssUrl.toLowerCase();\r\n              if (overrideHref == linkHref) {\r\n                overrideExists = true;\r\n              }\r\n            }\r\n          } else {\r\n            // theme\r\n            if (themeRegex.test(linkHref)) {\r\n              themeExists = true;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!themeExists) {\r\n        // theme(-rtl).css\r\n        var i18n = csui.require.s.contexts._.config.config.i18n;\r\n        var cssPath = '/csui/themes/carbonfiber/' + ((i18n.rtl === true) ? 'theme-rtl.css' : 'theme.css');\r\n        var originalConnection = csui.require.s.contexts._.config.config['csui/utils/contexts/factories/connector'].connection;\r\n        var supportPath = originalConnection.supportPath;\r\n        var origin = /^(\\w+:\\/\\/[^\\/]+)/.exec(originalConnection.url);\r\n        var baseSupportUrl = supportPath;\r\n        if (origin) {\r\n          baseSupportUrl = origin[1] + supportPath;\r\n        }\r\n\r\n        var themeHref = baseSupportUrl + cssPath;\r\n        var moduleStamp = csui.require.s.contexts._.config.urlArgs('csui', themeHref);\r\n        if (moduleStamp && moduleStamp.indexOf('v=') >= 0) {\r\n          themeHref += moduleStamp;\r\n        }\r\n\r\n        var themeLink = document.createElement(\"link\");\r\n        themeLink.setAttribute(\"rel\", \"stylesheet\");\r\n        themeLink.setAttribute(\"data-csui-required\", \"true\");\r\n        themeLink.setAttribute(\"href\", themeHref);\r\n\r\n        if (overrideExists === true) {\r\n          // insert before overrides.css\r\n          document.head.insertBefore(themeLink, overrideElement);\r\n        } else {\r\n          document.head.appendChild(themeLink);\r\n        }\r\n      }\r\n\r\n      // overrides.css\r\n      if (window.csuiOverrideCssUrl && overrideExists !== true) {\r\n        var newLink = document.createElement(\"link\");\r\n        newLink.setAttribute(\"rel\", \"stylesheet\");\r\n        newLink.setAttribute(\"type\", \"text/css\");\r\n        newLink.setAttribute(\"data-csui-theme-overrides\", \"true\");\r\n        newLink.setAttribute(\"data-csui-required\", \"true\");\r\n        newLink.setAttribute(\"href\", window.csuiOverrideCssUrl);\r\n        document.head.appendChild(newLink);\r\n      }\r\n    }\r\n\r\n    // returns index (0-based) where csui-options were found\r\n    function removeCsuiOptionsFromModules(modules) {\r\n      csuiOptionsIndex = -1;\r\n      if (modules.length > 0) {\r\n        csuiOptionsIndex = modules.indexOf('csui-options');\r\n        if (csuiOptionsIndex >= 0) {\r\n          // remove csui-options from modules\r\n          modules.splice(csuiOptionsIndex, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    function insertOptionsObjectIntoArguments(args) {\r\n      if (csuiOptionsIndex >= 0) {\r\n        // insert at remembered idx the options object\r\n        Array.prototype.splice.call(args, csuiOptionsIndex, 0, csuiOptions);\r\n      }\r\n    }\r\n\r\n    // Loads the required modules, once all configuration scripts\r\n    // have been loaded (or failed)\r\n    function loadModules() {\r\n      pushStartingModules(modules);\r\n      removeCsuiOptionsFromModules(modules);\r\n\r\n      // Allow overriding or extending configuration sent from the server.\r\n      var eventHandler = csuiOptions.onBeforeLoadModules;\r\n      if (eventHandler) {\r\n        eventHandler(csuiOptions, modules);\r\n      }\r\n\r\n      csui.require(modules, function () {\r\n        csui.ready || (csui.ready = true);\r\n        insertOptionsObjectIntoArguments(arguments);\r\n        success && success.apply(this, arguments);\r\n      }, failure);\r\n    }\r\n\r\n    // Initially add one for final waitForLoading() in loadConfiguration().\r\n    // The other additional load-functions should increase the value\r\n    // by their need.\r\n    var waitLoadingCounter = 1;\r\n\r\n    // callback function which decreases the loadingCounter\r\n    // and finally calls loadModule()\r\n    function waitForLoading() {\r\n      if (!--waitLoadingCounter) {\r\n        loadModules();\r\n      }\r\n    }\r\n\r\n    // Loads the csui settings to get the additional requirejs\r\n    // configurations which require authentication.\r\n    // The necessary authentication is ensured by setting\r\n    // HTTP-headers based on the given connection data.\r\n    //\r\n    // The configurations must be loaded before the very first\r\n    // require() statement is executed.\r\n    function loadCsuiSettings(connection, waitForLoading, checkedLocale, successCallback) {\r\n      // set running state to true\r\n      csui.settingsData[connection.url].isLoadRunning = true;\r\n      // extend loading counter\r\n      waitLoadingCounter = waitLoadingCounter + 2;\r\n\r\n      // Adds based on the given connection the corresponding\r\n      // authentication header(s) to the HTTP request.\r\n      // Currently the following authentication sources are supported:\r\n      // 1. credentials - basic authentication with username and password\r\n      // 2. session: { ticket: } - OTCS ticket which can be directly used with REST-calls\r\n      // 3. authenticationHeaders - user specified headers which are sent with the request\r\n      function addAuthenticationHeader() {\r\n        var authenticationFound;\r\n        if (connection.credentials &&\r\n          connection.credentials.username && connection.credentials.password) {\r\n          // username and password (basic authentication)\r\n          var headerVal = 'Basic ' + btoa(unescape(encodeURIComponent(connection.credentials.username + ':' + connection.credentials.password)));\r\n          request.setRequestHeader('Authorization' , headerVal);\r\n          authenticationFound = true;\r\n        } else if (connection.session && connection.session.ticket) {\r\n          // directly usable session ticket\r\n          request.setRequestHeader('OTCSTicket', connection.session.ticket);\r\n          authenticationFound = true;\r\n        } else if (connection.authenticationHeaders) {\r\n          // authentication headers (contains headers)\r\n          var authenticationHeaders = connection.authenticationHeaders;\r\n          for (var propName in authenticationHeaders) {\r\n            if (authenticationHeaders.hasOwnProperty(propName)) {\r\n              request.setRequestHeader(propName, authenticationHeaders[propName]);\r\n              authenticationFound = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (!authenticationFound) {\r\n          throw new Error('Missing authentication data in the connection object.');\r\n        }\r\n      }\r\n\r\n      // Applies RequireJS module configurations and language bundle index\r\n      function applySettings(settings) {\r\n        if (settings.configurations) {\r\n          settings.configurations.forEach(function toRequireConfigString(config) {\r\n            if (config.config) {\r\n              csui.require.config({config: config.config});\r\n            }\r\n          });\r\n        } else {\r\n          fail('Empty initial configuration detected.');\r\n        }\r\n        // Every registered csui extension may have a language\r\n        // bundle index to support the specified locale.\r\n        // Bundle indexes have to be loaded\r\n        // before the very first require() statement is executed.\r\n        if (settings.languageBundles) {\r\n          csui.require.config({bundles: settings.languageBundles});\r\n        }\r\n      }\r\n\r\n      // Replaces the initial authentication information with a fresh\r\n      // OTCS ticket; some OTDS tickets are once-use-only.\r\n      function replaceTicket() {\r\n        var ticket = request.getResponseHeader('OTCSTicket');\r\n        var ticketExpires = request.getResponseHeader('OTCSTicketExpires');\r\n        var serverDate = request.getResponseHeader('Date');\r\n        if (ticket) {\r\n          delete connection.credentials;\r\n          delete connection.authenticationHeaders;\r\n          connection.session = {\r\n            ticket: ticket,\r\n            expires: ticketExpires,\r\n            serverDate: serverDate\r\n          };\r\n        }\r\n      }\r\n\r\n      // Logs the error and calls the error callback.\r\n      function fail(message, error) {\r\n        console.error(message);\r\n        if (error) {\r\n          console.error(error);\r\n        }\r\n        if (failure) {\r\n          failure(new Error(message));\r\n        }\r\n      }\r\n\r\n      // perform the REST-call\r\n      var request = new XMLHttpRequest();\r\n      var url = connection.url;\r\n      if (!url) {\r\n        throw new Error('Missing connection URL.');\r\n      }\r\n      if (url[url.length - 1] !== '/') {\r\n        url += '/';\r\n      }\r\n      url += 'csui/settings?uilocale=' + checkedLocale;\r\n\r\n      request.onreadystatechange = function() {\r\n        if (this.readyState == XMLHttpRequest.DONE) {\r\n          csui.settingsData[connection.url].isLoadRunning = false;\r\n          if (this.status == 200) {\r\n            try {\r\n              var settings = JSON.parse(this.responseText);\r\n              applySettings(settings);\r\n              replaceTicket();\r\n              csui.settingsData[connection.url].loaded = true;\r\n              if (successCallback) {\r\n                successCallback(connection);\r\n              }\r\n              waitForLoading();\r\n            } catch (error) {\r\n              fail('Parsing initial settings failed.', error);\r\n            }\r\n          } else {\r\n            fail('Fetching initial settings failed.',\r\n              url + ': ' + request.status + ' ' + request.statusText);\r\n          }\r\n        }\r\n      };\r\n\r\n      request.open(\"GET\", url, true);\r\n      addAuthenticationHeader();\r\n      request.setRequestHeader('Accept', 'application/json');\r\n      request.send(null);\r\n\r\n      waitForLoading();\r\n    }\r\n\r\n    // trigger collected callbacks for a certain connection url\r\n    function triggerCsuiSettingsCallbacks(connection) {\r\n      csui.settingsData[connection.url].callbacks.forEach(function (cbData, index) {\r\n        cbData.callback(cbData.options);\r\n      });\r\n      csui.settingsData[connection.url].callbacks = [];\r\n    }\r\n\r\n    function getStaticAssetsLanguage() {\r\n      // TODO: Use some public interface to get the chosen locale\r\n      // and locales, which point to loadable language packs\r\n      // TODO: Think up something better, than copying this from i18n\r\n      var i18n = csui.require.s.contexts._.config.config.i18n || {};\r\n      var locale = i18n.locale ||\r\n            navigator.languages && navigator.languages[0] ||\r\n            navigator.language || 'en';\r\n      var loadableLocales = i18n.loadableLocales || ['en'];\r\n\r\n      // Support configuration with locale keys enabled by boolean values.\r\n      if (!(loadableLocales instanceof Array)) {\r\n        loadableLocales = Object\r\n          .keys(loadableLocales)\r\n          .filter(function (locale) {\r\n            return loadableLocales[locale];\r\n          });\r\n      }\r\n\r\n      // Normalize the locales to lower-case.\r\n      locale = locale.toLowerCase();\r\n      loadableLocales = loadableLocales.map(function (loadableLocale) {\r\n        return loadableLocale.toLowerCase();\r\n      });\r\n\r\n      // The first possibility - the full locale matches.\r\n      if (loadableLocales.indexOf(locale) >= 0) {\r\n        return locale;\r\n      }\r\n\r\n      // Try matching at least the language.\r\n      if (locale.indexOf('-') > 0) {\r\n        locale = locale.split('-')[0];\r\n        // The second possibility - the exact language.\r\n        if (loadableLocales.indexOf(locale) >= 0) {\r\n          return locale;\r\n        }\r\n        // The third possibility - the same language for other country.\r\n        if (loadableLocales.some(function (loadableLocale) {\r\n          if (loadableLocale.indexOf(locale) === 0) {\r\n            locale = loadableLocale;\r\n            return true;\r\n          }\r\n        })) {\r\n          return locale;\r\n        }\r\n      }\r\n\r\n      // Default to English when the requested language is not available.\r\n      return 'en';\r\n    }\r\n\r\n    // Really loads the configuration.\r\n    // Loads all necessary initial configurations before\r\n    // the execution of the very first require() statement.\r\n    // You can add later additional load-functions here.\r\n    function loadConfiguration(connection, waitForLoading, successCallback) {\r\n      var checkedLocale = getStaticAssetsLanguage();\r\n      loadCsuiSettings(connection, waitForLoading, checkedLocale, successCallback);\r\n\r\n      // this signals the counter which was set during initialization\r\n      waitForLoading();\r\n    }\r\n\r\n    function loadingHelper(connection) {\r\n      if (csui.settingsData[connection.url].loaded) {\r\n        loadModules();\r\n      } else {\r\n        loadConfiguration(connection, waitForLoading, function () {\r\n          ensureNeededLinks(connection);\r\n          setTimeout(triggerCsuiSettingsCallbacks, 0, connection);\r\n        });\r\n      }\r\n    }\r\n\r\n    function performLoading(connection) {\r\n      csui.settingsData[connection.url].callbacks || (csui.settingsData[connection.url].callbacks = []);\r\n\r\n      if (csui.settingsData[connection.url].isLoadRunning === true) {\r\n        csui.settingsData[connection.url].callbacks.push({\r\n          options: connection,\r\n          callback: loadingHelper\r\n        });\r\n      } else {\r\n        loadingHelper(connection);\r\n      }\r\n\r\n    }\r\n\r\n    function initSettingsData(connection) {\r\n      csui.settingsData || (csui.settingsData = {});\r\n      csui.settingsData[connection.url] || (csui.settingsData[connection.url] = {});\r\n    }\r\n\r\n    csuiOptions.connection || (csuiOptions.connection = {});\r\n    initSettingsData(csuiOptions.connection);\r\n    performLoading(csuiOptions.connection);\r\n\r\n  };\r\n\r\n  csui.getVersion = function () {\r\n    // Constant for debugging, but still parseable as a build number, this\r\n    // will be replaced by a number uniquely identifying the build by r.js\r\n    return '22.2.0.7280';\r\n  };\r\n\r\n  csui.getExtensionModules = csui.printExtensionModules = function (success, failure) {\r\n    csui.require(['csui/models/server.module/server.module.collection'\r\n    ], function (ServerModuleCollection) {\r\n      var serverModules = new ServerModuleCollection();\r\n      serverModules\r\n          .fetch()\r\n          .done(function () {\r\n            serverModules = serverModules.toJSON();\r\n            if (success) {\r\n              success(serverModules);\r\n            } else {\r\n              console.log(JSON.stringify(serverModules, undefined, 2));\r\n            }\r\n          })\r\n          .fail(function (error) {\r\n            if (failure) {\r\n              failure(error);\r\n            } else {\r\n              console.error('Loading extension modules failed:', error);\r\n            }\r\n          });\r\n    });\r\n  };\r\n})();\r\n\ncsui.define(\"helpers\", function(){});\n\n","csui.define('bundles/csui-helpers',[\r\n  'helpers'\r\n], {});\r\n\n"]}