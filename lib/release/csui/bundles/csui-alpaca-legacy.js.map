{"version":3,"sources":["../../src/lib/alpaca/js/alpaca.js","csui-alpaca-legacy.js"],"names":["csui","define","$","Alpaca","Handlebars","Bootstrap","moment","lang","round","strategies","up","Math","ceil","down","input","nearest","strategy","console","warn","jQuery","Fields","AddressField","ObjectField","extend","getFieldType","setup","this","base","undefined","data","street","schema","title","type","properties","items","maxLength","minItems","maxItems","city","state","enum","zip","pattern","merge","options","fields","maskString","size","optionLabels","isEmpty","addressValidation","isContainer","getAddress","value","getValue","view","address","each","index","afterRenderContainer","model","callback","self","container","getContainerEl","addClass","isDisplayOnly","appendTo","mapButton","button","text","on","google","maps","geocoder","Geocoder","geocode","results","status","GeocoderStatus","OK","mapCanvasId","getId","length","getFieldEl","map","Map","document","getElementById","zoom","center","geometry","location","mapTypeId","MapTypeId","ROADMAP","Marker","position","displayMessage","wrap","showMapOnLoad","trigger","getType","getTitle","getDescription","getSchemaOfOptions","validateAddress","description","default","getOptionsForOptions","helper","rightLabel","registerFieldClass","CKEditorField","TextAreaField","ckeditor","afterRenderControl","control","setTimeout","editor","CKEDITOR","replace","removeAllListeners","destroy","initControlEvents","e","onClick","call","onChange","triggerWithPropagation","onBlur","onFocus","onKeyPress","setValue","setData","getData","CloudCmsConnector","Connector","connect","onSuccess","onError","Gitana","config","err","gitana","datastore","readBranch","then","branch","loadData","nodeId","successCallback","errorCallback","Chain","trap","readNode","obj","JSON","parse","stringify","loadSchema","qname","readDefinition","loadOptions","formNodeId","loadReferenceSchema","loadReferenceOptions","formKey","registerConnectorClass","ColorField","TextField","inputType","registerDefaultSchemaFieldMapping","CountryField","SelectField","isUndefined","capitalize","countriesMap","getMessage","countryKey","push","label","toUpperCase","readonly","registerDefaultFormatFieldMapping","EmailField","regexps","email","handleValidate","baseStatus","valInfo","validation","getSchemaOfSchema","format","getOptionsForSchema","registerMessages","invalidEmail","PersonalNameField","val","upperValue","i","charAt","_this","later","v","CurrencyField","constructor","connector","pfOptionsSchema","getSchemaOfPriceFormatOptions","option","parseFloat","toFixed","centsLimit","field","getControlEl","priceFormat","is","hmtl","unmask","unmasked","result","cur","isNaN","centsSeparator","bind","unmaskedString","u","join","allowNegative","minimum","clearPrefix","clearSuffix","insertPlusSign","limit","prefix","suffix","thousandsSeparator","EditorField","aceTheme","aceMode","beautify","isObject","isString","html_beautify","css_beautify","js_beautify","aceHeight","css","aceWidth","el","ace","window","edit","setOptions","maxLines","Infinity","getSession","setUseWrapMode","setTheme","setMode","renderer","setHScrollBarAlwaysVisible","setShowPrintMargin","clearSelection","getUndoManager","reset","aceFitContentHeight","heightUpdateFunction","first","lineHeight","newHeight","getScreenLength","scrollBar","getWidth","height","toString","resize","setReadOnly","logError","getEditor","wordCountStatus","_validateWordCount","message","substituteTokens","wordlimit","editorAnnotationsStatus","_validateEditorAnnotations","annotations","getAnnotations","split","onDependentReveal","wordLimitExceeded","editorAnnotationsExist","IPv4Field","ipv4","invalidIPv4","GridField","ArrayField","grid","gridData","headers","key","fieldDefinition","row","key2","holder","find","gridConfig","handsontable","usHoldings","territories","American Samoa","District Of Columbia","Federated States Of Micronesia","Guam","Marshall Islands","Northern Mariana Islands","Palau","Puerto Rico","Virgin Islands","states","Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming","StateField","includeStates","includeTerritories","holdings","retrieveUSHoldings","keys","values","codeValue","res","opts","sorted","Object","sort","TinyMCEField","toolbar","setContent","returnVal","getContent","onKeyUp","onKeyDown","rteFieldID","id","tinyMCE","init","init_instance_callback","selector","remove","ImageField","keyHandler","handleObj","origHandler","handler","toLowerCase","event","target","test","nodeName","special","hotkeys","specialKeys","which","character","String","fromCharCode","modif","possible","altKey","ctrlKey","metaKey","shiftKey","shiftNums","l","apply","arguments","JSONField","_validateJSON","textValue","isValEmpty","code","keyCode","wich","insertAtCaret","removeClass","refreshValidationState","attr","stringNotAJSON","fn","myValue","selection","sel","createRange","selectionStart","startPos","endPos","selectionEnd","scrollTop","substring","version","8","9","13","16","17","18","19","20","27","32","33","34","35","36","37","38","39","40","45","46","96","97","98","99","100","101","102","103","104","105","106","107","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","144","145","191","224","`","1","2","3","4","5","6","7","0","-","=",";","'",",",".","/","\\","add","ZipcodeField","invalidZipcodeFormatFive","invalidZipcodeFormatNine","registerView","messages","countries","afg","ala","alb","dza","asm","and","ago","aia","ata","atg","arg","arm","abw","aus","aut","aze","bhs","bhr","bgd","brb","blr","bel","blz","ben","bmu","btn","bol","bih","bwa","bvt","bra","iot","brn","bgr","bfa","bdi","khm","cmr","can","cpv","cym","caf","tcd","chl","chn","cxr","cck","col","com","cog","cod","cok","cri","hrv","cub","cyp","cze","civ","dnk","dji","dma","dom","ecu","egy","slv","gnq","eri","est","eth","flk","fro","fji","fin","fra","guf","pyf","atf","gab","gmb","geo","deu","gha","gib","grc","grl","grd","glp","gum","gtm","ggy","gin","gnb","guy","hti","hmd","vat","hnd","hkg","hun","isl","ind","idn","irn","irq","irl","imn","isr","ita","jam","jpn","jey","jor","kaz","ken","kir","prk","kor","kwt","kgz","lao","lva","lbn","lso","lbr","lby","lie","ltu","lux","mac","mkd","mdg","mwi","mys","mdv","mli","mlt","mhl","mtq","mrt","mus","myt","mex","fsm","mda","mco","mng","mne","msr","mar","moz","mmr","nam","nru","npl","nld","ant","ncl","nzl","nic","ner","nga","niu","nfk","mnp","nor","omn","pak","plw","pse","pan","png","pry","per","phl","pcn","pol","prt","pri","qat","rou","rus","rwa","reu","blm","shn","kna","lca","maf","spm","vct","wsm","smr","stp","sau","sen","srb","syc","sle","sgp","svk","svn","slb","som","zaf","sgs","esp","lka","sdn","sur","sjm","swz","swe","che","syr","twn","tjk","tza","tha","tls","tgo","tkl","ton","tto","tun","tur","tkm","tca","tuv","uga","ukr","are","gbr","usa","umi","ury","uzb","vut","ven","vnm","vgb","vir","wlf","esh","yem","zmb","zwe","wizard","stepDescriptors","wizardConfigs","steps","wizardTitle","wizardDescription","buttonDescriptors","buttons","align","hideSubmitButton","buttonKey","showSteps","showProgressBar","performValidation","_wizardValidation","_wizardShowSteps","_wizardShowProgressBar","stepEls","stepDescriptor","stepTitle","stepDescription","markAllStepsVisited","wizardTemplateDescriptor","getTemplateDescriptor","wizardEl","tmpl","append","wizardNav","wizardSteps","wizardButtons","wizardProgressBar","currentIndex","previousButtonEl","nextButtonEl","submitButtonEl","refreshSteps","visits","stepElements","g","valueNow","valueMax","width","parseInt","hide","show","assertValidation","buttonId","currentStepEl","fieldId","childrenById","fns","cb","series","valid","isValid","b","validate","_valid","preventDefault","click","form","submit","navIndex","skipValidation","autoWizard","stepBindings","bindings","propertyId","childrenByPropertyId","hasOwnProperty","createSteps","step","stepEl"],"mappings":"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","file":"csui-alpaca-legacy.js","sourcesContent":["csui.define('csui/lib/alpaca/js/alpaca',[\"csui/lib/jquery\", \"csui/lib/alpaca/js/alpaca.lite\", \"csui/lib/handlebars\",\r\n    \"csui/lib/binf/js/binf\", \"csui/lib/moment\", \"i18n!csui/lib/alpaca/nls/lang\"\r\n], function ($, Alpaca, Handlebars, Bootstrap, moment, lang) {\r\n    //TODO: replace with better deprecation check during build phase\r\n    console.warn(\"It is recommended to use alpaca.lite for better performance\");\r\n    var jQuery = $;\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.AddressField = Alpaca.Fields.ObjectField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.AddressField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.ObjectField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"address\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.ObjectField#setup\r\n                 */\r\n                setup: function () {\r\n                    this.base();\r\n    \r\n                    if (this.data === undefined) {\r\n                        this.data = {\r\n                            street: ['', '']\r\n                        };\r\n                    }\r\n    \r\n                    this.schema = {\r\n                        \"title\": \"Home Address\",\r\n                        \"type\": \"object\",\r\n                        \"properties\": {\r\n                            \"street\": {\r\n                                \"title\": \"Street\",\r\n                                \"type\": \"array\",\r\n                                \"items\": {\r\n                                    \"type\": \"string\",\r\n                                    \"maxLength\": 30,\r\n                                    \"minItems\": 0,\r\n                                    \"maxItems\": 3\r\n                                }\r\n                            },\r\n                            \"city\": {\r\n                                \"title\": \"City\",\r\n                                \"type\": \"string\"\r\n                            },\r\n                            \"state\": {\r\n                                \"title\": \"State\",\r\n                                \"type\": \"string\",\r\n                                \"enum\": [\"AL\", \"AK\", \"AS\", \"AZ\", \"AR\", \"CA\", \"CO\", \"CT\", \"DE\", \"DC\", \"FM\", \"FL\", \"GA\", \"GU\", \"HI\", \"ID\", \"IL\", \"IN\", \"IA\", \"KS\", \"KY\", \"LA\", \"ME\", \"MH\", \"MD\", \"MA\", \"MI\", \"MN\", \"MS\", \"MO\", \"MT\", \"NE\", \"NV\", \"NH\", \"NJ\", \"NM\", \"NY\", \"NC\", \"ND\", \"MP\", \"OH\", \"OK\", \"OR\", \"PW\", \"PA\", \"PR\", \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VT\", \"VI\", \"VA\", \"WA\", \"WV\", \"WI\", \"WY\"]\r\n                            },\r\n                            \"zip\": {\r\n                                \"title\": \"Zip Code\",\r\n                                \"type\": \"string\",\r\n                                \"pattern\": /^(\\d{5}(-\\d{4})?)?$/\r\n                            }\r\n                        }\r\n                    };\r\n                    Alpaca.merge(this.options, {\r\n                        \"fields\": {\r\n                            \"zip\": {\r\n                                \"maskString\": \"99999\",\r\n                                \"size\": 5\r\n                            },\r\n                            \"state\": {\r\n                                \"optionLabels\": [\"ALABAMA\", \"ALASKA\", \"AMERICANSAMOA\", \"ARIZONA\", \"ARKANSAS\", \"CALIFORNIA\", \"COLORADO\", \"CONNECTICUT\", \"DELAWARE\", \"DISTRICTOFCOLUMBIA\", \"FEDERATEDSTATESOFMICRONESIA\", \"FLORIDA\", \"GEORGIA\", \"GUAM\", \"HAWAII\", \"IDAHO\", \"ILLINOIS\", \"INDIANA\", \"IOWA\", \"KANSAS\", \"KENTUCKY\", \"LOUISIANA\", \"MAINE\", \"MARSHALLISLANDS\", \"MARYLAND\", \"MASSACHUSETTS\", \"MICHIGAN\", \"MINNESOTA\", \"MISSISSIPPI\", \"MISSOURI\", \"MONTANA\", \"NEBRASKA\", \"NEVADA\", \"NEWHAMPSHIRE\", \"NEWJERSEY\", \"NEWMEXICO\", \"NEWYORK\", \"NORTHCAROLINA\", \"NORTHDAKOTA\", \"NORTHERNMARIANAISLANDS\", \"OHIO\", \"OKLAHOMA\", \"OREGON\", \"PALAU\", \"PENNSYLVANIA\", \"PUERTORICO\", \"RHODEISLAND\", \"SOUTHCAROLINA\", \"SOUTHDAKOTA\", \"TENNESSEE\", \"TEXAS\", \"UTAH\", \"VERMONT\", \"VIRGINISLANDS\", \"VIRGINIA\", \"WASHINGTON\", \"WESTVIRGINIA\", \"WISCONSIN\", \"WYOMING\"]\r\n                            }\r\n                        }\r\n                    });\r\n    \r\n                    if (Alpaca.isEmpty(this.options.addressValidation)) {\r\n                        this.options.addressValidation = true;\r\n                    }\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Field#isContainer\r\n                 */\r\n                isContainer: function () {\r\n                    return false;\r\n                },\r\n    \r\n                /**\r\n                 * Returns address in a single line string.\r\n                 *\r\n                 * @returns {String} Address as a single line string.\r\n                 */\r\n                getAddress: function () {\r\n                    var value = this.getValue();\r\n                    if (this.view.type === \"view\") {\r\n                        value = this.data;\r\n                    }\r\n                    var address = \"\";\r\n                    if (value) {\r\n                        if (value.street) {\r\n                            $.each(value.street, function (index, value) {\r\n                                address += value + \" \";\r\n                            });\r\n                        }\r\n                        if (value.city) {\r\n                            address += value.city + \" \";\r\n                        }\r\n                        if (value.state) {\r\n                            address += value.state + \" \";\r\n                        }\r\n                        if (value.zip) {\r\n                            address += value.zip;\r\n                        }\r\n                    }\r\n    \r\n                    return address;\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Field#afterRenderContainer\r\n                 */\r\n                afterRenderContainer: function (model, callback) {\r\n    \r\n                    var self = this;\r\n    \r\n                    this.base(model, function () {\r\n                        var container = self.getContainerEl();\r\n    \r\n                        // apply additional css\r\n                        $(container).addClass(\"alpaca-addressfield\");\r\n    \r\n                        if (self.options.addressValidation && !self.isDisplayOnly()) {\r\n                            $('<div style=\"clear:both;\"></div>').appendTo(container);\r\n                            var mapButton = $('<div class=\"alpaca-form-button\">Show Google Map</div>').appendTo(container);\r\n                            if (mapButton.button) {\r\n                                mapButton.button({\r\n                                    text: true\r\n                                });\r\n                            }\r\n                            mapButton.on('click', function () {\r\n    \r\n                                if (google && google.maps) {\r\n                                    var geocoder = new google.maps.Geocoder();\r\n                                    var address = self.getAddress();\r\n                                    if (geocoder) {\r\n                                        geocoder.geocode({\r\n                                            'address': address\r\n                                        }, function (results, status) {\r\n                                            if (status === google.maps.GeocoderStatus.OK) {\r\n                                                var mapCanvasId = self.getId() + \"-map-canvas\";\r\n                                                if ($('#' + mapCanvasId).length === 0) {\r\n                                                    $(\"<div id='\" + mapCanvasId + \"' class='alpaca-field-address-mapcanvas'></div>\").appendTo(self.getFieldEl());\r\n                                                }\r\n    \r\n                                                var map = new google.maps.Map(document.getElementById(self.getId() + \"-map-canvas\"), {\r\n                                                    \"zoom\": 10,\r\n                                                    \"center\": results[0].geometry.location,\r\n                                                    \"mapTypeId\": google.maps.MapTypeId.ROADMAP\r\n                                                });\r\n    \r\n                                                var marker = new google.maps.Marker({\r\n                                                    map: map,\r\n                                                    position: results[0].geometry.location\r\n                                                });\r\n    \r\n                                            }\r\n                                            else {\r\n                                                self.displayMessage(\"Geocoding failed: \" + status);\r\n                                            }\r\n                                        });\r\n                                    }\r\n    \r\n                                }\r\n                                else {\r\n                                    self.displayMessage(\"Google Map API is not installed.\");\r\n                                }\r\n                            }).wrap('<small/>');\r\n    \r\n                            if (self.options.showMapOnLoad) {\r\n                                mapButton.trigger('click');\r\n                            }\r\n                        }\r\n    \r\n                        callback();\r\n    \r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.ObjectField#getType\r\n                 */\r\n                getType: function () {\r\n                    return \"any\";\r\n                }\r\n    \r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.ObjectField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Address\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.ObjectField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Standard US Address with Street, City, State and Zip. Also comes with support for Google map.\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.ObjectField#getSchemaOfOptions\r\n                 */\r\n                getSchemaOfOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"validateAddress\": {\r\n                                \"title\": \"Address Validation\",\r\n                                \"description\": \"Enable address validation if true\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": true\r\n                            },\r\n                            \"showMapOnLoad\": {\r\n                                \"title\": \"Whether to show the map when first loaded\",\r\n                                \"type\": \"boolean\"\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.ObjectField#getOptionsForOptions\r\n                 */\r\n                getOptionsForOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"validateAddress\": {\r\n                                \"helper\": \"Address validation if checked\",\r\n                                \"rightLabel\": \"Enable Google Map for address validation?\",\r\n                                \"type\": \"checkbox\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"address\", Alpaca.Fields.AddressField);\r\n\r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.CKEditorField = Alpaca.Fields.TextAreaField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.CKEditorField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"ckeditor\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#setup\r\n                 */\r\n                setup: function () {\r\n                    if (!this.data) {\r\n                        this.data = \"\";\r\n                    }\r\n    \r\n                    this.base();\r\n    \r\n                    if (typeof (this.options.ckeditor) == \"undefined\") {\r\n                        this.options.ckeditor = {};\r\n                    }\r\n                },\r\n    \r\n                afterRenderControl: function (model, callback) {\r\n                    var self = this;\r\n    \r\n                    this.base(model, function () {\r\n    \r\n                        // see if we can render CK Editor\r\n                        if (!self.isDisplayOnly() && self.control && typeof (CKEDITOR) !== \"undefined\") {\r\n                            // use a timeout because CKEditor has some odd timing dependencies\r\n                            setTimeout(function () {\r\n    \r\n                                self.editor = CKEDITOR.replace($(self.control)[0], self.options.ckeditor);\r\n    \r\n                            }, 500);\r\n                        }\r\n    \r\n                        // if the ckeditor's dom element gets destroyed, make sure we clean up the editor instance\r\n                        $(self.control).on('destroyed', function () {\r\n    \r\n                            if (self.editor) {\r\n                                self.editor.removeAllListeners();\r\n                                self.editor.destroy(false);\r\n                                self.editor = null;\r\n                            }\r\n    \r\n                        });\r\n    \r\n                        callback();\r\n                    });\r\n                },\r\n    \r\n                initControlEvents: function () {\r\n                    var self = this;\r\n    \r\n                    setTimeout(function () {\r\n    \r\n                        // click event\r\n                        self.editor.on(\"click\", function (e) {\r\n                            self.onClick.call(self, e);\r\n                            self.trigger(\"click\", e);\r\n                        });\r\n    \r\n                        // change event\r\n                        self.editor.on(\"change\", function (e) {\r\n                            self.onChange();\r\n                            self.triggerWithPropagation(\"change\", e);\r\n                        });\r\n    \r\n                        // blur event\r\n                        self.editor.on('blur', function (e) {\r\n                            self.onBlur();\r\n                            self.trigger(\"blur\", e);\r\n                        });\r\n    \r\n                        // focus event\r\n                        self.editor.on(\"focus\", function (e) {\r\n                            self.onFocus.call(self, e);\r\n                            self.trigger(\"focus\", e);\r\n                        });\r\n    \r\n                        // keypress event\r\n                        self.editor.on(\"key\", function (e) {\r\n                            self.onKeyPress.call(self, e);\r\n                            self.trigger(\"keypress\", e);\r\n                        });\r\n    \r\n                        // NOTE: these do not seem to work with CKEditor?\r\n                        /*\r\n                        // keyup event\r\n                        self.editor.on(\"keyup\", function(e) {\r\n                            self.onKeyUp.call(self, e);\r\n                            self.trigger(\"keyup\", e);\r\n                        });\r\n        \r\n                        // keydown event\r\n                        self.editor.on(\"keydown\", function(e) {\r\n                            self.onKeyDown.call(self, e);\r\n                            self.trigger(\"keydown\", e);\r\n                        });\r\n                        */\r\n    \r\n                    }, 525); // NOTE: odd timing dependencies\r\n                },\r\n    \r\n                setValue: function (value) {\r\n                    var self = this;\r\n    \r\n                    // be sure to call into base method\r\n                    this.base(value);\r\n    \r\n                    if (self.editor) {\r\n                        self.editor.setData(value);\r\n                    }\r\n                },\r\n    \r\n                getValue: function () {\r\n                    var self = this;\r\n    \r\n                    var value = this.base();\r\n    \r\n                    if (self.editor) {\r\n                        value = self.editor.getData();\r\n                    }\r\n    \r\n                    return value;\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Field#destroy\r\n                 */\r\n                destroy: function () {\r\n                    // destroy the plugin instance\r\n                    if (this.editor) {\r\n                        this.editor.destroy();\r\n                        this.editor = null;\r\n                    }\r\n    \r\n                    // call up to base method\r\n                    this.base();\r\n                }\r\n    \r\n                /* builder_helpers */\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#getTitle\r\n                 */\r\n                ,\r\n                getTitle: function () {\r\n                    return \"CK Editor\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Provides an instance of a CK Editor control for use in editing HTML.\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.ControlField#getSchemaOfOptions\r\n                 */\r\n                getSchemaOfOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"ckeditor\": {\r\n                                \"title\": \"CK Editor options\",\r\n                                \"description\": \"Use this entry to provide configuration options to the underlying CKEditor plugin.\",\r\n                                \"type\": \"any\"\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.ControlField#getOptionsForOptions\r\n                 */\r\n                getOptionsForOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"ckeditor\": {\r\n                                \"type\": \"any\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"ckeditor\", Alpaca.Fields.CKEditorField);\r\n\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.CloudCmsConnector = Alpaca.Connector.extend(\r\n            /**\r\n             * @lends Alpaca.CloudCmsConnector.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * Makes initial connections to data source.\r\n                 *\r\n                 * @param {Function} onSuccess onSuccess callback.\r\n                 * @param {Function} onError onError callback.\r\n                 */\r\n                connect: function (onSuccess, onError) {\r\n                    var self = this;\r\n    \r\n                    Gitana.connect(this.config, function (err) {\r\n    \r\n                        if (err) {\r\n                            onError(err);\r\n                            return;\r\n                        }\r\n    \r\n                        self.gitana = this;\r\n    \r\n                        self.gitana.datastore(\"content\").readBranch(\"master\").then(function () {\r\n    \r\n                            self.branch = this;\r\n    \r\n                            onSuccess();\r\n                        });\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * Loads data from Cloud CMS.\r\n                 *\r\n                 * @param {String} nodeId the node id to load\r\n                 * @param {Function} onSuccess onSuccess callback\r\n                 * @param {Function} onError onError callback\r\n                 */\r\n                loadData: function (nodeId, successCallback, errorCallback) {\r\n                    Chain(this.branch).trap(function (err) {\r\n                        errorCallback(err);\r\n                        return false;\r\n                    }).readNode(nodeId).then(function () {\r\n    \r\n                        var obj = JSON.parse(JSON.stringify(this));\r\n    \r\n                        successCallback(obj);\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * Loads json schema from Cloud CMS.\r\n                 *\r\n                 * @param {Object|String} qname the definition qname to load\r\n                 * @param {Function} onSuccess onSuccess callback.\r\n                 * @param {Function} onError onError callback.\r\n                 */\r\n                loadSchema: function (qname, successCallback, errorCallback) {\r\n                    Chain(this.branch).trap(function (err) {\r\n                        errorCallback(err);\r\n                        return false;\r\n                    }).readDefinition(qname).then(function () {\r\n    \r\n                        var obj = JSON.parse(JSON.stringify(this));\r\n    \r\n                        successCallback(obj);\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * Loads json options from Cloud CMS.\r\n                 *\r\n                 * @param {Object|String} formNodeId the form to load\r\n                 * @param {Function} onSuccess onSuccess callback.\r\n                 * @param {Function} onError onError callback.\r\n                 */\r\n                loadOptions: function (formNodeId, successCallback, errorCallback) {\r\n                    Chain(this.branch).trap(function (err) {\r\n                        errorCallback(err);\r\n                        return false;\r\n                    }).readNode(formNodeId).then(function () {\r\n    \r\n                        var obj = JSON.parse(JSON.stringify(this));\r\n    \r\n                        successCallback(obj);\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * Loads a referenced JSON schema by it's qname from Cloud CMS.\r\n                 *\r\n                 * @param {Object|String} qname schema to load\r\n                 * @param {Function} onSuccess onSuccess callback.\r\n                 * @param {Function} onError onError callback.\r\n                 */\r\n                loadReferenceSchema: function (qname, successCallback, errorCallback) {\r\n                    Chain(this.branch).trap(function (err) {\r\n                        errorCallback(err);\r\n                        return false;\r\n                    }).readDefinition(qname).then(function () {\r\n    \r\n                        var obj = JSON.parse(JSON.stringify(this));\r\n    \r\n                        successCallback(obj);\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * Loads referenced JSON options by it's form key from Cloud CMS.\r\n                 *\r\n                 * @param {Object|String} formKey form to load.\r\n                 * @param {Function} onSuccess onSuccess callback.\r\n                 * @param {Function} onError onError callback.\r\n                 */\r\n                loadReferenceOptions: function (formKey, successCallback, errorCallback) {\r\n                    successCallback({});\r\n                }\r\n    \r\n            });\r\n    \r\n        Alpaca.registerConnectorClass(\"cloudcms\", Alpaca.CloudCmsConnector);\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.ColorField = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.ColorField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextField#setup\r\n                 */\r\n                setup: function () {\r\n                    // default html5 input type = \"color\";\r\n                    this.inputType = \"color\";\r\n    \r\n                    this.base();\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"color\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getType\r\n                 */\r\n                getType: function () {\r\n                    return \"string\";\r\n                },\r\n    \r\n                /* builder_helpers */\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Color Field\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"A color picker for selecting hexadecimal color values\";\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"color\", Alpaca.Fields.ColorField);\r\n        Alpaca.registerDefaultSchemaFieldMapping(\"color\", \"color\");\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.CountryField = Alpaca.Fields.SelectField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.CountryField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Field#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"country\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.Field#setup\r\n                 */\r\n                setup: function () {\r\n                    // defaults\r\n                    if (Alpaca.isUndefined(this.options.capitalize)) {\r\n                        this.options.capitalize = false;\r\n                    }\r\n    \r\n                    this.schema[\"enum\"] = [];\r\n                    this.options.optionLabels = [];\r\n    \r\n                    var countriesMap = this.getMessage(\"countries\");\r\n                    if (countriesMap) {\r\n                        for (var countryKey in countriesMap) {\r\n                            this.schema[\"enum\"].push(countryKey);\r\n    \r\n                            var label = countriesMap[countryKey];\r\n                            if (this.options.capitalize) {\r\n                                label = label.toUpperCase();\r\n                            }\r\n    \r\n                            this.options.optionLabels.push(label);\r\n                        }\r\n                    }\r\n    \r\n                    this.base();\r\n                }\r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Country Field\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Provides a dropdown selector of countries keyed by their ISO3 code.  The names of the countries are read from the I18N bundle for the current locale.\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getSchemaOfOptions\r\n                 */\r\n                getSchemaOfOptions: function () {\r\n    \r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"capitalize\": {\r\n                                \"title\": \"Capitalize\",\r\n                                \"description\": \"Whether the values should be capitalized\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": false,\r\n                                \"readonly\": true\r\n                            }\r\n                        }\r\n                    });\r\n    \r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getOptionsForOptions\r\n                 */\r\n                getOptionsForOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"capitalize\": {\r\n                                \"type\": \"checkbox\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"country\", Alpaca.Fields.CountryField);\r\n        Alpaca.registerDefaultFormatFieldMapping(\"country\", \"country\");\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.EmailField = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.EmailField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"email\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#setup\r\n                 */\r\n                setup: function () {\r\n                    // default html5 input type = \"email\";\r\n                    this.inputType = \"email\";\r\n    \r\n                    this.base();\r\n    \r\n                    if (!this.schema.pattern) {\r\n                        this.schema.pattern = Alpaca.regexps.email;\r\n                    }\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#handleValidate\r\n                 */\r\n                handleValidate: function () {\r\n                    var baseStatus = this.base();\r\n    \r\n                    var valInfo = this.validation;\r\n    \r\n                    if (!valInfo[\"invalidPattern\"][\"status\"]) {\r\n                        valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidEmail\");\r\n                    }\r\n    \r\n                    return baseStatus;\r\n                }\r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Email Field\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Email Field.\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getSchemaOfSchema\r\n                 */\r\n                getSchemaOfSchema: function () {\r\n                    var pattern = (this.schema && this.schema.pattern) ? this.schema.pattern : Alpaca.regexps.email;\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"pattern\": {\r\n                                \"title\": \"Pattern\",\r\n                                \"description\": \"Field Pattern in Regular Expression\",\r\n                                \"type\": \"string\",\r\n                                \"default\": pattern,\r\n                                \"enum\": [pattern],\r\n                                \"readonly\": true\r\n                            },\r\n                            \"format\": {\r\n                                \"title\": \"Format\",\r\n                                \"description\": \"Property data format\",\r\n                                \"type\": \"string\",\r\n                                \"default\": \"email\",\r\n                                \"enum\": [\"email\"],\r\n                                \"readonly\": true\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getOptionsForSchema\r\n                 */\r\n                getOptionsForSchema: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"format\": {\r\n                                \"type\": \"text\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerMessages({\r\n            // Removed format from error message (according to new specifications :  the format will\r\n            // be in the placeholder of email field).\r\n            //\"invalidEmail\": \"Invalid Email address e.g. info@cloudcms.com\"\r\n    \r\n            \"invalidEmail\": lang.invalidEmail\r\n        });\r\n        Alpaca.registerFieldClass(\"email\", Alpaca.Fields.EmailField);\r\n        Alpaca.registerDefaultFormatFieldMapping(\"email\", \"email\");\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.PersonalNameField = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.PersonalNameField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"personalname\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#setValue\r\n                 */\r\n                setValue: function (val) {\r\n                    var upperValue = \"\";\r\n    \r\n                    for (var i = 0; i < val.length; i++) {\r\n                        if (i === 0) {\r\n                            upperValue += val.charAt(i).toUpperCase();\r\n                        }\r\n                        else if (val.charAt(i - 1) === ' ' || val.charAt(i - 1) === '-' || val.charAt(i - 1) === \"'\") {\r\n                            upperValue += val.charAt(i).toUpperCase();\r\n                        }\r\n                        else {\r\n                            upperValue += val.charAt(i);\r\n                        }\r\n                    }\r\n    \r\n                    if (upperValue != this.getValue()) // jshint ignore:line\r\n                    {\r\n                        this.base(upperValue);\r\n                    }\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.ControlField#onKeyPress\r\n                 */\r\n                onKeyPress: function (e) {\r\n                    this.base(e);\r\n    \r\n                    var _this = this;\r\n    \r\n                    Alpaca.later(25, this, function () {\r\n                        var v = _this.getValue();\r\n                        _this.setValue(v);\r\n                    });\r\n    \r\n                }\r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Personal Name\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Text Field for personal name with captical letter for first letter & after hyphen, space or apostrophe.\";\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"personalname\", Alpaca.Fields.PersonalNameField);\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.CurrencyField = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.CurrencyField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @constructs\r\n                 * @augments Alpaca.Fields.TextField\r\n                 *\r\n                 * @class Currency Control\r\n                 *\r\n                 * @param {Object} container Field container.\r\n                 * @param {Any} data Field data.\r\n                 * @param {Object} options Field options.\r\n                 * @param {Object} schema Field schema.\r\n                 * @param {Object|String} view Field view.\r\n                 * @param {Alpaca.Connector} connector Field connector.\r\n                 * @param {Function} errorCallback Error callback.\r\n                 */\r\n                constructor: function (container, data, options, schema, view, connector, errorCallback) {\r\n                    options = options || {};\r\n    \r\n                    var pfOptionsSchema = this.getSchemaOfPriceFormatOptions().properties;\r\n                    for (var i in pfOptionsSchema) {\r\n                        var option = pfOptionsSchema[i];\r\n                        if (!(i in options)) {\r\n                            options[i] = option[\"default\"] || undefined;\r\n                        }\r\n                    }\r\n    \r\n                    if (typeof (data) !== \"undefined\") {\r\n                        data = \"\" + parseFloat(data).toFixed(options.centsLimit);\r\n                    }\r\n    \r\n                    this.base(container, data, options, schema, view, connector, errorCallback);\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"currency\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#postRender\r\n                 */\r\n                afterRenderControl: function (model, callback) {\r\n    \r\n                    var self = this;\r\n    \r\n                    var field = this.getControlEl();\r\n    \r\n                    this.base(model, function () {\r\n    \r\n                        $(field).priceFormat(self.options);\r\n    \r\n                        callback();\r\n    \r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getValue\r\n                 */\r\n                getValue: function () {\r\n    \r\n                    var field = this.getControlEl();\r\n    \r\n                    var val = $(field).is('input') ? field.val() : field.hmtl();\r\n                    if (this.options.unmask || this.options.round !== \"none\") {\r\n                        var unmasked = function () {\r\n                            var result = '';\r\n                            for (var i in val) {\r\n                                var cur = val[i];\r\n                                if (!isNaN(cur)) {\r\n                                    result += cur;\r\n                                } else if (cur === this.options.centsSeparator) {\r\n                                    result += '.';\r\n                                }\r\n                            }\r\n                            return parseFloat(result);\r\n                        }.bind(this)();\r\n                        if (this.options.round !== \"none\") {\r\n                            unmasked = round(this.options.round)(unmasked);\r\n                            if (!this.options.unmask) {\r\n                                var result = [];\r\n                                var unmaskedString = \"\" + unmasked;\r\n                                for (var i = 0, u = 0; i < val.length; i++) {\r\n                                    if (!isNaN(val[i])) {\r\n                                        result.push(unmaskedString[u++] || 0);\r\n                                    } else {\r\n                                        result.push(val[i]);\r\n                                    }\r\n                                }\r\n                                return result.join('');\r\n                            }\r\n                        }\r\n                        return unmasked;\r\n                    } else {\r\n                        return val;\r\n                    }\r\n                }\r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Currency Field\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Provides an automatically formatted and configurable input for entering currency amounts.\";\r\n                },\r\n    \r\n                getSchemaOfPriceFormatOptions: function () {\r\n                    return {\r\n                        \"properties\": {\r\n                            \"allowNegative\": {\r\n                                \"title\": \"Allow Negative\",\r\n                                \"description\": \"Determines if negative numbers are allowed.\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": false\r\n                            },\r\n                            \"centsLimit\": {\r\n                                \"title\": \"Cents Limit\",\r\n                                \"description\": \"The limit of fractional digits.\",\r\n                                \"type\": \"number\",\r\n                                \"default\": 2,\r\n                                \"minimum\": 0\r\n                            },\r\n                            \"centsSeparator\": {\r\n                                \"title\": \"Cents Separator\",\r\n                                \"description\": \"The separator between whole and fractional amounts.\",\r\n                                \"type\": \"text\",\r\n                                \"default\": \".\"\r\n                            },\r\n                            \"clearPrefix\": {\r\n                                \"title\": \"Clear Prefix\",\r\n                                \"description\": \"Determines if the prefix is cleared on blur.\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": false\r\n                            },\r\n                            \"clearSuffix\": {\r\n                                \"title\": \"Clear Suffix\",\r\n                                \"description\": \"Determines if the suffix is cleared on blur.\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": false\r\n                            },\r\n                            \"insertPlusSign\": {\r\n                                \"title\": \"Plus Sign\",\r\n                                \"description\": \"Determines if a plus sign should be inserted for positive values.\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": false\r\n                            },\r\n                            \"limit\": {\r\n                                \"title\": \"Limit\",\r\n                                \"description\": \"A limit of the length of the field.\",\r\n                                \"type\": \"number\",\r\n                                \"default\": undefined,\r\n                                \"minimum\": 0\r\n                            },\r\n                            \"prefix\": {\r\n                                \"title\": \"Prefix\",\r\n                                \"description\": \"The prefix if any for the field.\",\r\n                                \"type\": \"text\",\r\n                                \"default\": \"$\"\r\n                            },\r\n                            \"round\": {\r\n                                \"title\": \"Round\",\r\n                                \"description\": \"Determines if the field is rounded. (Rounding is done when getValue is called and is not reflected in the UI)\",\r\n                                \"type\": \"string\",\r\n                                \"enum\": [\"up\", \"down\", \"nearest\", \"none\"],\r\n                                \"default\": \"none\"\r\n                            },\r\n                            \"suffix\": {\r\n                                \"title\": \"Suffix\",\r\n                                \"description\": \"The suffix if any for the field.\",\r\n                                \"type\": \"text\",\r\n                                \"default\": \"\"\r\n                            },\r\n                            \"thousandsSeparator\": {\r\n                                \"title\": \"Thousands Separator\",\r\n                                \"description\": \"The separator between thousands.\",\r\n                                \"type\": \"string\",\r\n                                \"default\": \",\"\r\n                            },\r\n                            \"unmask\": {\r\n                                \"title\": \"Unmask\",\r\n                                \"description\": \"If true then the resulting value for this field will be unmasked.  That is, the resulting value will be a float instead of a string (with the prefix, suffix, etc. removed).\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": true\r\n                            }\r\n                        }\r\n                    };\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getSchemaOfOptions\r\n                 */\r\n                getSchemaOfOptions: function () {\r\n                    return Alpaca.merge(this.base(), this.getSchemaOfPriceFormatOptions());\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getOptionsForOptions\r\n                 */\r\n                getOptionsForOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"allowNegative\": {\r\n                                \"type\": \"checkbox\"\r\n                            },\r\n                            \"centsLimit\": {\r\n                                \"type\": \"number\"\r\n                            },\r\n                            \"centsSeparator\": {\r\n                                \"type\": \"text\"\r\n                            },\r\n                            \"clearPrefix\": {\r\n                                \"type\": \"checkbox\"\r\n                            },\r\n                            \"clearSuffix\": {\r\n                                \"type\": \"checkbox\"\r\n                            },\r\n                            \"insertPlusSign\": {\r\n                                \"type\": \"checkbox\"\r\n                            },\r\n                            \"limit\": {\r\n                                \"type\": \"number\"\r\n                            },\r\n                            \"prefix\": {\r\n                                \"type\": \"text\"\r\n                            },\r\n                            \"round\": {\r\n                                \"type\": \"select\"\r\n                            },\r\n                            \"suffix\": {\r\n                                \"type\": \"text\"\r\n                            },\r\n                            \"thousandsSeparator\": {\r\n                                \"type\": \"string\"\r\n                            },\r\n                            \"unmask\": {\r\n                                \"type\": \"checkbox\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"currency\", Alpaca.Fields.CurrencyField);\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.EditorField = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.EditorField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"editor\";\r\n                },\r\n    \r\n                setup: function () {\r\n                    var self = this;\r\n    \r\n                    this.base();\r\n    \r\n                    if (!self.options.aceTheme) {\r\n                        self.options.aceTheme = \"ace/theme/chrome\";\r\n                    }\r\n    \r\n                    if (!self.options.aceMode) {\r\n                        self.options.aceMode = \"ace/mode/json\";\r\n                    }\r\n    \r\n                    if (typeof (self.options.beautify) == \"undefined\") {\r\n                        self.options.beautify = true;\r\n                    }\r\n    \r\n                    if (self.options.beautify && this.data) {\r\n                        if (self.options.aceMode === \"ace/mode/json\") {\r\n                            if (Alpaca.isObject(this.data)) {\r\n                                // convert to string to format it\r\n                                this.data = JSON.stringify(this.data, null, \"    \");\r\n                            }\r\n                            else if (Alpaca.isString(this.data)) {\r\n                                // convert to object and then back to string to format it\r\n                                this.data = JSON.stringify(JSON.parse(this.data), null, \"    \");\r\n                            }\r\n                        }\r\n    \r\n                        if (self.options.aceMode === \"ace/mode/html\") {\r\n                            if (typeof (html_beautify) !== \"undefined\") {\r\n                                this.data = html_beautify(this.data);\r\n                            }\r\n                        }\r\n    \r\n                        if (self.options.aceMode === \"ace/mode/css\") {\r\n                            if (typeof (css_beautify) !== \"undefined\") {\r\n                                this.data = css_beautify(this.data);\r\n                            }\r\n                        }\r\n    \r\n                        if (self.options.aceMode === \"ace/mode/javascript\") {\r\n                            if (typeof (js_beautify) !== \"undefined\") {\r\n                                this.data = js_beautify(this.data);\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    if (self.options.aceMode === \"ace/mode/json\") {\r\n                        if (!this.data || this.data === \"{}\") {\r\n                            this.data = \"{\\n\\t\\n}\";\r\n                        }\r\n                    }\r\n    \r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#postRender\r\n                 */\r\n                afterRenderControl: function (model, callback) {\r\n                    var self = this;\r\n    \r\n                    this.base(model, function () {\r\n    \r\n                        if (self.control) {\r\n                            // ACE HEIGHT\r\n                            var aceHeight = self.options.aceHeight;\r\n                            if (aceHeight) {\r\n                                $(self.control).css(\"height\", aceHeight);\r\n                            }\r\n    \r\n                            // ACE WIDTH\r\n                            var aceWidth = self.options.aceWidth;\r\n                            if (!aceWidth) {\r\n                                aceWidth = \"100%\";\r\n                            }\r\n                            $(self.control).css(\"width\", aceWidth);\r\n                        }\r\n    \r\n                        // locate where we will insert the editor\r\n                        var el = $(self.control)[0];\r\n    \r\n                        // ace must be included ahead of time\r\n                        if (!ace && window.ace) {\r\n                            ace = window.ace;\r\n                        }\r\n    \r\n                        if (!ace) {\r\n                            Alpaca.logError(\"Editor Field is missing the 'ace' Cloud 9 Editor\");\r\n                        }\r\n                        else {\r\n                            self.editor = ace.edit(el);\r\n                            self.editor.setOptions({\r\n                                maxLines: Infinity\r\n                            });\r\n    \r\n                            self.editor.getSession().setUseWrapMode(true);\r\n    \r\n                            // theme\r\n                            var aceTheme = self.options.aceTheme;\r\n                            self.editor.setTheme(aceTheme);\r\n    \r\n                            // mode\r\n                            var aceMode = self.options.aceMode;\r\n                            self.editor.getSession().setMode(aceMode);\r\n    \r\n                            self.editor.renderer.setHScrollBarAlwaysVisible(false);\r\n                            //this.editor.renderer.setVScrollBarAlwaysVisible(false); // not implemented\r\n                            self.editor.setShowPrintMargin(false);\r\n    \r\n                            // set data onto editor\r\n                            self.editor.setValue(self.data);\r\n                            self.editor.clearSelection();\r\n    \r\n                            // clear undo session\r\n                            self.editor.getSession().getUndoManager().reset();\r\n    \r\n                            // FIT-CONTENT the height of the editor to the contents contained within\r\n                            if (self.options.aceFitContentHeight) {\r\n                                var heightUpdateFunction = function () {\r\n    \r\n                                    var first = false;\r\n                                    if (self.editor.renderer.lineHeight === 0) {\r\n                                        first = true;\r\n                                        self.editor.renderer.lineHeight = 16;\r\n                                    }\r\n    \r\n                                    // http://stackoverflow.com/questions/11584061/\r\n                                    var newHeight = self.editor.getSession().getScreenLength() * self.editor.renderer.lineHeight + self.editor.renderer.scrollBar.getWidth();\r\n    \r\n                                    $(self.control).height(newHeight.toString() + \"px\");\r\n    \r\n                                    // This call is required for the editor to fix all of\r\n                                    // its inner structure for adapting to a change in size\r\n                                    self.editor.resize();\r\n    \r\n                                    if (first) {\r\n                                        window.setTimeout(function () {\r\n                                            self.editor.clearSelection();\r\n                                        }, 100);\r\n                                    }\r\n                                };\r\n    \r\n                                // Set initial size to match initial content\r\n                                heightUpdateFunction();\r\n    \r\n                                // Whenever a change happens inside the ACE editor, update\r\n                                // the size again\r\n                                self.editor.getSession().on('change', heightUpdateFunction);\r\n                            }\r\n    \r\n                            // READONLY\r\n                            if (self.schema.readonly) {\r\n                                self.editor.setReadOnly(true);\r\n                            }\r\n    \r\n                            // if the editor's dom element gets destroyed, make sure we clean up the editor instance\r\n                            // normally, we expect Alpaca fields to be destroyed by the destroy() method but they may also be\r\n                            // cleaned-up via the DOM, thus we check here.\r\n                            $(el).on('destroyed', function () {\r\n    \r\n                                if (self.editor) {\r\n                                    self.editor.destroy();\r\n                                    self.editor = null;\r\n                                }\r\n    \r\n                            });\r\n                        }\r\n    \r\n                        callback();\r\n                    });\r\n    \r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Field#destroy\r\n                 */\r\n                destroy: function () {\r\n                    // destroy the editor instance\r\n                    if (this.editor) {\r\n                        this.editor.destroy();\r\n                        this.editor = null;\r\n                    }\r\n    \r\n                    // call up to base method\r\n                    this.base();\r\n                },\r\n    \r\n                /**\r\n                 * @return the ACE editor instance\r\n                 */\r\n                getEditor: function () {\r\n                    return this.editor;\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.ControlField#handleValidate\r\n                 */\r\n                handleValidate: function () {\r\n                    var baseStatus = this.base();\r\n    \r\n                    var valInfo = this.validation;\r\n    \r\n                    var wordCountStatus = this._validateWordCount();\r\n                    valInfo[\"wordLimitExceeded\"] = {\r\n                        \"message\": wordCountStatus ? \"\" : Alpaca.substituteTokens(this.getMessage(\"wordLimitExceeded\"), [this.options.wordlimit]),\r\n                        \"status\": wordCountStatus\r\n                    };\r\n    \r\n                    var editorAnnotationsStatus = this._validateEditorAnnotations();\r\n                    valInfo[\"editorAnnotationsExist\"] = {\r\n                        \"message\": editorAnnotationsStatus ? \"\" : this.getMessage(\"editorAnnotationsExist\"),\r\n                        \"status\": editorAnnotationsStatus\r\n                    };\r\n    \r\n                    return baseStatus && valInfo[\"wordLimitExceeded\"][\"status\"] && valInfo[\"editorAnnotationsExist\"][\"status\"];\r\n                },\r\n    \r\n                _validateEditorAnnotations: function () {\r\n                    if (this.editor) {\r\n                        var annotations = this.editor.getSession().getAnnotations();\r\n                        if (annotations && annotations.length > 0) {\r\n                            return false;\r\n                        }\r\n                    }\r\n    \r\n                    return true;\r\n                },\r\n    \r\n                /**\r\n                 * Validate for word limit.\r\n                 *\r\n                 * @returns {Boolean} True if the number of words is equal to or less than the word limit.\r\n                 */\r\n                _validateWordCount: function () {\r\n                    if (this.options.wordlimit && this.options.wordlimit > -1) {\r\n                        var val = this.editor.getValue();\r\n    \r\n                        if (val) {\r\n                            var wordcount = val.split(\" \").length;\r\n                            if (wordcount > this.options.wordlimit) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    return true;\r\n                },\r\n    \r\n                /**\r\n                 * Force editor to resize to ensure it gets drawn correctly.\r\n                 * @override\r\n                 */\r\n                onDependentReveal: function () {\r\n                    if (this.editor) {\r\n                        this.editor.resize();\r\n                    }\r\n                },\r\n    \r\n                /**\r\n                 *@see Alpaca.Fields.TextField#setValue\r\n                 */\r\n                setValue: function (value) {\r\n                    var self = this;\r\n    \r\n                    if (this.editor) {\r\n                        if (self.schema.type == \"object\" && Alpaca.isObject(value)) {\r\n                            // format\r\n                            value = JSON.stringify(value, null, \"    \");\r\n                        }\r\n    \r\n                        this.editor.setValue(value);\r\n                        self.editor.clearSelection();\r\n                    }\r\n    \r\n                    // be sure to call into base method\r\n                    this.base(value);\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getValue\r\n                 */\r\n                getValue: function () {\r\n                    var value = null;\r\n    \r\n                    if (this.editor) {\r\n                        value = this.editor.getValue();\r\n                    }\r\n    \r\n                    // if expected type back is \"object\", we do the conversion\r\n                    if (this.schema.type == \"object\") {\r\n                        if (!value) {\r\n                            value = {};\r\n                        }\r\n                        else {\r\n                            value = JSON.parse(value);\r\n                        }\r\n                    }\r\n    \r\n                    return value;\r\n                }\r\n    \r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Editor\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Editor\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getSchemaOfOptions\r\n                 */\r\n                getSchemaOfOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"aceTheme\": {\r\n                                \"title\": \"ACE Editor Theme\",\r\n                                \"description\": \"Specifies the theme to set onto the editor instance\",\r\n                                \"type\": \"string\",\r\n                                \"default\": \"ace/theme/twilight\"\r\n                            },\r\n                            \"aceMode\": {\r\n                                \"title\": \"ACE Editor Mode\",\r\n                                \"description\": \"Specifies the mode to set onto the editor instance\",\r\n                                \"type\": \"string\",\r\n                                \"default\": \"ace/mode/javascript\"\r\n                            },\r\n                            \"aceWidth\": {\r\n                                \"title\": \"ACE Editor Height\",\r\n                                \"description\": \"Specifies the width of the wrapping div around the editor\",\r\n                                \"type\": \"string\",\r\n                                \"default\": \"100%\"\r\n                            },\r\n                            \"aceHeight\": {\r\n                                \"title\": \"ACE Editor Height\",\r\n                                \"description\": \"Specifies the height of the wrapping div around the editor\",\r\n                                \"type\": \"string\",\r\n                                \"default\": \"300px\"\r\n                            },\r\n                            \"aceFitContentHeight\": {\r\n                                \"title\": \"ACE Fit Content Height\",\r\n                                \"description\": \"Configures the ACE Editor to auto-fit its height to the contents of the editor\",\r\n                                \"type\": \"boolean\",\r\n                                \"default\": false\r\n                            },\r\n                            \"wordlimit\": {\r\n                                \"title\": \"Word Limit\",\r\n                                \"description\": \"Limits the number of words allowed in the text area.\",\r\n                                \"type\": \"number\",\r\n                                \"default\": -1\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getOptionsForOptions\r\n                 */\r\n                getOptionsForOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"aceTheme\": {\r\n                                \"type\": \"text\"\r\n                            },\r\n                            \"aceMode\": {\r\n                                \"type\": \"text\"\r\n                            },\r\n                            \"wordlimit\": {\r\n                                \"type\": \"integer\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n    \r\n            });\r\n    \r\n        Alpaca.registerMessages({\r\n            \"wordLimitExceeded\": \"The maximum word limit of {0} has been exceeded.\",\r\n            \"editorAnnotationsExist\": \"The editor has errors in it that must be corrected\"\r\n        });\r\n\r\n        Alpaca.registerFieldClass(\"editor\", Alpaca.Fields.EditorField);\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.IPv4Field = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.IPv4Field.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"ipv4\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#setup\r\n                 */\r\n                setup: function () {\r\n                    this.base();\r\n    \r\n                    if (!this.schema.pattern) {\r\n                        this.schema.pattern = Alpaca.regexps.ipv4;\r\n                    }\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#handleValidate\r\n                 */\r\n                handleValidate: function () {\r\n                    var baseStatus = this.base();\r\n    \r\n                    var valInfo = this.validation;\r\n    \r\n                    if (!valInfo[\"invalidPattern\"][\"status\"]) {\r\n                        valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidIPv4\");\r\n                    }\r\n    \r\n                    return baseStatus;\r\n                }\r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"IP Address Field\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"IP Address Field.\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getSchemaOfSchema\r\n                 */\r\n                getSchemaOfSchema: function () {\r\n                    var pattern = (this.schema && this.schema.pattern) ? this.schema.pattern : Alpaca.regexps.ipv4;\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"pattern\": {\r\n                                \"title\": \"Pattern\",\r\n                                \"description\": \"Field Pattern in Regular Expression\",\r\n                                \"type\": \"string\",\r\n                                \"default\": pattern,\r\n                                \"readonly\": true\r\n                            },\r\n                            \"format\": {\r\n                                \"title\": \"Format\",\r\n                                \"description\": \"Property data format\",\r\n                                \"type\": \"string\",\r\n                                \"enum\": [\"ip-address\"],\r\n                                \"default\": \"ip-address\",\r\n                                \"readonly\": true\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getOptionsForSchema\r\n                 */\r\n                getOptionsForSchema: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"format\": {\r\n                                \"type\": \"text\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerMessages({\r\n            \"invalidIPv4\": lang.invalidIPv4\r\n        });\r\n        Alpaca.registerFieldClass(\"ipv4\", Alpaca.Fields.IPv4Field);\r\n        Alpaca.registerDefaultFormatFieldMapping(\"ip-address\", \"ipv4\");\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.GridField = Alpaca.Fields.ArrayField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.GridField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.ControlField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"grid\";\r\n                },\r\n    \r\n                setup: function () {\r\n                    this.base();\r\n    \r\n                    if (typeof (this.options.grid) == \"undefined\") {\r\n                        this.options.grid = {};\r\n                    }\r\n                },\r\n    \r\n                afterRenderContainer: function (model, callback) {\r\n                    var self = this;\r\n    \r\n                    this.base(model, function () {\r\n    \r\n                        // convert the data array into the grid's expected format\r\n                        var gridData = [];\r\n    \r\n                        // add in headers\r\n                        var headers = [];\r\n                        for (var key in self.options.fields) {\r\n                            var fieldDefinition = self.options.fields[key];\r\n    \r\n                            var label = key;\r\n                            if (fieldDefinition.label) {\r\n                                label = fieldDefinition.label;\r\n                            }\r\n    \r\n                            headers.push(label);\r\n                        }\r\n                        gridData.push(headers);\r\n    \r\n                        for (var i = 0; i < self.data.length; i++) {\r\n                            var row = [];\r\n                            for (var key2 in self.data[i]) {\r\n                                row.push(self.data[i][key2]);\r\n                            }\r\n                            gridData.push(row);\r\n                        }\r\n    \r\n                        /*\r\n                        // TODO\r\n                        var gridData = [\r\n                            [\"Maserati\", \"Mazda\", \"Mercedes\", \"Mini\", \"Mitsubishi\"],\r\n                            [\"2009\", 0, 2941, 4303, 354, 5814],\r\n                            [\"2010\", 5, 2905, 2867, 412, 5284],\r\n                            [\"2011\", 4, 2517, 4822, 552, 6127],\r\n                            [\"2012\", 2, 2422, 5399, 776, 4151]\r\n                        ];\r\n                        */\r\n    \r\n                        var holder = $(self.container).find(\".alpaca-container-grid-holder\");\r\n    \r\n                        var gridConfig = self.options.grid;\r\n                        gridConfig.data = gridData;\r\n    \r\n                        $(holder).handsontable(gridConfig);\r\n    \r\n                        callback();\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.ControlField#getType\r\n                 */\r\n                getType: function () {\r\n                    return \"array\";\r\n                }\r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @see Alpaca.ControlField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Grid Field\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.ControlField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Renders array items into a grid\";\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"grid\", Alpaca.Fields.GridField);\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.usHoldings = {};\r\n\r\n    Alpaca.usHoldings.territories = {\r\n        \"American Samoa\": \"AS\",\r\n        \"District Of Columbia\": \"DC\",\r\n        \"Federated States Of Micronesia\": \"FM\",\r\n        \"Guam\": \"GU\",\r\n        \"Marshall Islands\": \"MH\",\r\n        \"Northern Mariana Islands\": \"MP\",\r\n        \"Palau\": \"PW\",\r\n        \"Puerto Rico\": \"PR\",\r\n        \"Virgin Islands\": \"VI\"\r\n    };\r\n\r\n    Alpaca.usHoldings.states = {\r\n        \"Alabama\": \"AL\",\r\n        \"Alaska\": \"AK\",\r\n        \"Arizona\": \"AZ\",\r\n        \"Arkansas\": \"AR\",\r\n        \"California\": \"CA\",\r\n        \"Colorado\": \"CO\",\r\n        \"Connecticut\": \"CT\",\r\n        \"Delaware\": \"DE\",\r\n        \"Florida\": \"FL\",\r\n        \"Georgia\": \"GA\",\r\n        \"Hawaii\": \"HI\",\r\n        \"Idaho\": \"ID\",\r\n        \"Illinois\": \"IL\",\r\n        \"Indiana\": \"IN\",\r\n        \"Iowa\": \"IA\",\r\n        \"Kansas\": \"KS\",\r\n        \"Kentucky\": \"KY\",\r\n        \"Louisiana\": \"LA\",\r\n        \"Maine\": \"ME\",\r\n        \"Maryland\": \"MD\",\r\n        \"Massachusetts\": \"MA\",\r\n        \"Michigan\": \"MI\",\r\n        \"Minnesota\": \"MN\",\r\n        \"Mississippi\": \"MS\",\r\n        \"Missouri\": \"MO\",\r\n        \"Montana\": \"MT\",\r\n        \"Nebraska\": \"NE\",\r\n        \"Nevada\": \"NV\",\r\n        \"New Hampshire\": \"NH\",\r\n        \"New Jersey\": \"NJ\",\r\n        \"New Mexico\": \"NM\",\r\n        \"New York\": \"NY\",\r\n        \"North Carolina\": \"NC\",\r\n        \"North Dakota\": \"ND\",\r\n        \"Ohio\": \"OH\",\r\n        \"Oklahoma\": \"OK\",\r\n        \"Oregon\": \"OR\",\r\n        \"Pennsylvania\": \"PA\",\r\n        \"Rhode Island\": \"RI\",\r\n        \"South Carolina\": \"SC\",\r\n        \"South Dakota\": \"SD\",\r\n        \"Tennessee\": \"TN\",\r\n        \"Texas\": \"TX\",\r\n        \"Utah\": \"UT\",\r\n        \"Vermont\": \"VT\",\r\n        \"Virginia\": \"VA\",\r\n        \"Washington\": \"WA\",\r\n        \"West Virginia\": \"WV\",\r\n        \"Wisconsin\": \"WI\",\r\n        \"Wyoming\": \"WY\"\r\n    };\r\n\r\n    Alpaca.Fields.StateField = Alpaca.Fields.SelectField.extend(\r\n        /**\r\n         * @lends Alpaca.Fields.StateField.prototype\r\n         */\r\n        {\r\n            /**\r\n             * @see Alpaca.Fields.TextField#getFieldType\r\n             */\r\n            getFieldType: function () {\r\n                return \"state\";\r\n            },\r\n\r\n            /**\r\n             * @see Alpaca.Fields.TextField#setup\r\n             */\r\n            setup: function () {\r\n                // defaults\r\n                if (Alpaca.isUndefined(this.options.capitalize)) {\r\n                    this.options.capitalize = false;\r\n                }\r\n                if (Alpaca.isUndefined(this.options.includeStates)) {\r\n                    this.options.includeStates = true;\r\n                }\r\n                if (Alpaca.isUndefined(this.options.includeTerritories)) {\r\n                    this.options.includeTerritories = true;\r\n                }\r\n                if (Alpaca.isUndefined(this.options.format)) {\r\n                    this.options.format = \"name\";\r\n                }\r\n\r\n                // validate settings\r\n                if (this.options.format === \"name\" || this.options.format === \"code\") {\r\n                    // valid formats\r\n                }\r\n                else {\r\n                    Alpaca.logError(\"The configured state format: \" + this.options.format + \" is not a legal value [name, code]\");\r\n\r\n                    // default to name format\r\n                    this.options.format = \"name\";\r\n                }\r\n\r\n                // configure\r\n                var holdings = Alpaca.retrieveUSHoldings(\r\n                    this.options.includeStates,\r\n                    this.options.includeTerritories,\r\n                    (this.options.format === \"code\"),\r\n                    this.options.capitalize);\r\n\r\n                this.schema[\"enum\"] = holdings.keys;\r\n                this.options.optionLabels = holdings.values;\r\n\r\n                this.base();\r\n            }\r\n\r\n\r\n            /* builder_helpers */\r\n            ,\r\n\r\n            /**\r\n             * @see Alpaca.Fields.TextField#getTitle\r\n             */\r\n            getTitle: function () {\r\n                return \"State Field\";\r\n            },\r\n\r\n            /**\r\n             * @see Alpaca.Fields.TextField#getDescription\r\n             */\r\n            getDescription: function () {\r\n                return \"Provides a dropdown selector of states and/or territories in the United States, keyed by their two-character code.\";\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             * @see Alpaca.Fields.TextField#getSchemaOfOptions\r\n             */\r\n            getSchemaOfOptions: function () {\r\n\r\n                return Alpaca.merge(this.base(), {\r\n                    \"properties\": {\r\n                        \"format\": {\r\n                            \"title\": \"Format\",\r\n                            \"description\": \"How to represent the state values in the selector\",\r\n                            \"type\": \"string\",\r\n                            \"default\": \"name\",\r\n                            \"enum\": [\"name\", \"code\"],\r\n                            \"readonly\": true\r\n                        },\r\n                        \"capitalize\": {\r\n                            \"title\": \"Capitalize\",\r\n                            \"description\": \"Whether the values should be capitalized\",\r\n                            \"type\": \"boolean\",\r\n                            \"default\": false,\r\n                            \"readonly\": true\r\n                        },\r\n                        \"includeStates\": {\r\n                            \"title\": \"Include States\",\r\n                            \"description\": \"Whether to include the states of the United States\",\r\n                            \"type\": \"boolean\",\r\n                            \"default\": true,\r\n                            \"readonly\": true\r\n                        },\r\n                        \"includeTerritories\": {\r\n                            \"title\": \"Include Territories\",\r\n                            \"description\": \"Whether to include the territories of the United States\",\r\n                            \"type\": \"boolean\",\r\n                            \"default\": true,\r\n                            \"readonly\": true\r\n                        }\r\n                    }\r\n                });\r\n\r\n            },\r\n\r\n            /**\r\n             * @private\r\n             * @see Alpaca.Fields.TextField#getOptionsForOptions\r\n             */\r\n            getOptionsForOptions: function () {\r\n                return Alpaca.merge(this.base(), {\r\n                    \"fields\": {\r\n                        \"format\": {\r\n                            \"type\": \"text\"\r\n                        },\r\n                        \"capitalize\": {\r\n                            \"type\": \"checkbox\"\r\n                        },\r\n                        \"includeStates\": {\r\n                            \"type\": \"checkbox\"\r\n                        },\r\n                        \"includeTerritories\": {\r\n                            \"type\": \"checkbox\"\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n\r\n            /* end_builder_helpers */\r\n        });\r\n\r\n    Alpaca.registerFieldClass(\"state\", Alpaca.Fields.StateField);\r\n    Alpaca.registerDefaultFormatFieldMapping(\"state\", \"state\");\r\n\r\n    /**\r\n     * Helper function to retrieve the holdings of US states and territories.\r\n     *\r\n     * @param {Boolean} includeStates whether to include US states\r\n     * @param {Boolean} includeTerritories whether to include US territories\r\n     * @param {Boolean} codeValue whether to hand back US holding codes (instead of names)\r\n     * @param {Boolean} capitalize whether to capitalize the values handed back\r\n     *\r\n     * @returns {Object} an object containing \"keys\" and \"values\", both of which are arrays.\r\n     */\r\n    Alpaca.retrieveUSHoldings = (function () {\r\n        return function (includeStates, includeTerritories, codeValue, capitalize) {\r\n            var res = {\r\n                keys: [],\r\n                values: []\r\n            };\r\n            var opts = $.extend(\r\n                {},\r\n                includeStates ? Alpaca.usHoldings.states : {},\r\n                includeTerritories ? Alpaca.usHoldings.territories : {}\r\n            );\r\n            var sorted = Object.keys(opts);\r\n            sorted.sort();\r\n            for (var i in sorted) {\r\n                var state = sorted[i];\r\n                var key = opts[state];\r\n                var value = codeValue ? key : state;\r\n                if (capitalize) {\r\n                    value = value.toUpperCase();\r\n                }\r\n                res.keys.push(key);\r\n                res.values.push(value);\r\n            }\r\n            return res;\r\n        };\r\n    })();\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.TinyMCEField = Alpaca.Fields.TextAreaField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.tinyMCEField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"tinymce\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#setup\r\n                 */\r\n                setup: function () {\r\n                    var self = this;\r\n    \r\n                    if (!this.data) {\r\n                        this.data = \"\";\r\n                    }\r\n    \r\n                    if (!self.options.toolbar) {\r\n                        self.options.toolbar = \"insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image\";\r\n                    }\r\n    \r\n                    this.base();\r\n                },\r\n    \r\n                setValue: function (value) {\r\n                    var self = this;\r\n    \r\n                    // be sure to call into base method\r\n                    this.base(value);\r\n    \r\n                    if (self.editor) {\r\n                        self.editor.setContent(value);\r\n                    }\r\n                },\r\n    \r\n                getValue: function () {\r\n                    var self = this;\r\n    \r\n                    var returnVal = null;\r\n    \r\n                    if (self.editor) {\r\n                        returnVal = self.editor.getContent()\r\n                    }\r\n    \r\n                    return returnVal;\r\n                },\r\n    \r\n                initControlEvents: function () {\r\n                    var self = this;\r\n    \r\n                    setTimeout(function () {\r\n    \r\n                        // click event\r\n                        self.editor.on(\"click\", function (e) {\r\n                            self.onClick.call(self, e);\r\n                            self.trigger(\"click\", e);\r\n                        });\r\n    \r\n                        // change event\r\n                        self.editor.on(\"change\", function (e) {\r\n                            self.onChange();\r\n                            self.triggerWithPropagation(\"change\", e);\r\n                        });\r\n    \r\n                        // blur event\r\n                        self.editor.on('blur', function (e) {\r\n                            self.onBlur();\r\n                            self.trigger(\"blur\", e);\r\n                        });\r\n    \r\n                        // focus event\r\n                        self.editor.on(\"focus\", function (e) {\r\n                            self.onFocus.call(self, e);\r\n                            self.trigger(\"focus\", e);\r\n                        });\r\n    \r\n                        // keypress event\r\n                        self.editor.on(\"keypress\", function (e) {\r\n                            self.onKeyPress.call(self, e);\r\n                            self.trigger(\"keypress\", e);\r\n                        });\r\n    \r\n                        // keyup event\r\n                        self.editor.on(\"keyup\", function (e) {\r\n                            self.onKeyUp.call(self, e);\r\n                            self.trigger(\"keyup\", e);\r\n                        });\r\n    \r\n                        // keydown event\r\n                        self.editor.on(\"keydown\", function (e) {\r\n                            self.onKeyDown.call(self, e);\r\n                            self.trigger(\"keydown\", e);\r\n                        });\r\n                    }, 525);\r\n                },\r\n    \r\n                afterRenderControl: function (model, callback) {\r\n                    var self = this;\r\n                    this.base(model, function () {\r\n    \r\n                        if (!self.isDisplayOnly() && self.control) {\r\n                            var rteFieldID = self.control[0].id;\r\n    \r\n                            setTimeout(function () {\r\n    \r\n                                tinyMCE.init({\r\n                                    init_instance_callback: function (editor) {\r\n                                        self.editor = editor;\r\n    \r\n                                        callback();\r\n                                    },\r\n                                    selector: \"#\" + rteFieldID,\r\n                                    toolbar: self.options.toolbar\r\n                                });\r\n    \r\n                            }, 500);\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Field#destroy\r\n                 */\r\n                destroy: function () {\r\n                    // destroy the plugin instance\r\n                    if (this.editor) {\r\n                        this.editor.remove();\r\n                        this.editor = null;\r\n                    }\r\n    \r\n                    // call up to base method\r\n                    this.base();\r\n                },\r\n    \r\n    \r\n                /* builder_helpers */\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"TinyMCE Editor\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextAreaField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Provides an instance of a TinyMCE control for use in editing HTML.\";\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.ControlField#getSchemaOfOptions\r\n                 */\r\n                getSchemaOfOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"toolbar\": {\r\n                                \"title\": \"TinyMCE toolbar options\",\r\n                                \"description\": \"Toolbar options for TinyMCE plugin.\",\r\n                                \"type\": \"string\"\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.ControlField#getOptionsForOptions\r\n                 */\r\n                getOptionsForOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"toolbar\": {\r\n                                \"type\": \"text\"\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerFieldClass(\"tinymce\", Alpaca.Fields.TinyMCEField);\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.ImageField = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.ImageField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function() {\r\n                    return \"image\";\r\n                }\r\n        \r\n                /* builder_helpers */\r\n                ,\r\n        \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function() {\r\n                    return \"Image Field\";\r\n                },\r\n        \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function() {\r\n                    return \"Image Field.\";\r\n                }\r\n        \r\n                /* end_builder_helpers */\r\n            });\r\n        \r\n        Alpaca.registerFieldClass(\"image\", Alpaca.Fields.ImageField);\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n\r\n        \r\n    \r\n        Alpaca.Fields.JSONField = Alpaca.Fields.TextAreaField.extend(\r\n        /**\r\n         * @lends Alpaca.Fields.JSONField.prototype\r\n         */\r\n        {\r\n            /**\r\n             * @see Alpaca.Fields.TextAreaField#getFieldType\r\n             */\r\n            getFieldType: function() {\r\n                return \"json\";\r\n            },\r\n    \r\n            /**\r\n             * @see Alpaca.ContainerField#getValue\r\n             */\r\n            setValue: function(value)\r\n            {\r\n                if (Alpaca.isObject(value) || typeof(value) === \"object\")\r\n                {\r\n                    value = JSON.stringify(value, null, 3);\r\n                }\r\n    \r\n                this.base(value);\r\n            },\r\n    \r\n            /**\r\n             * @see Alpaca.ContainerField#getValue\r\n             */\r\n            getValue: function()\r\n            {\r\n                var val = this.base();\r\n    \r\n                if (val && Alpaca.isString(val))\r\n                {\r\n                    val = JSON.parse(val);\r\n                }\r\n    \r\n                return val;\r\n            },\r\n    \r\n            /**\r\n             * @see Alpaca.Fields.TextField#handleValidate\r\n             */\r\n            handleValidate: function()\r\n            {\r\n                var baseStatus = this.base();\r\n    \r\n                var valInfo = this.validation;\r\n    \r\n                var status = this._validateJSON();\r\n                valInfo[\"stringNotAJSON\"] = {\r\n                    \"message\": status.status ? \"\" : this.getMessage(\"stringNotAJSON\") +\" \"+ status.message,\r\n                    \"status\": status.status\r\n                };\r\n    \r\n                return baseStatus && valInfo[\"stringNotAJSON\"][\"status\"] ;\r\n            },\r\n    \r\n            /**\r\n             * Validates if it is a valid JSON object.\r\n             * @returns {Boolean} true if it is a valid JSON object\r\n             */\r\n            _validateJSON: function()\r\n            {\r\n                var textValue = this.control.val();\r\n    \r\n                // allow null\r\n                if (Alpaca.isValEmpty(textValue))\r\n                {\r\n                    return {\r\n                        \"status\" : true\r\n                    };\r\n                }\r\n    \r\n                // parse the string\r\n                try\r\n                {\r\n                    var obj = JSON.parse(textValue);\r\n    \r\n                    // format the string as well\r\n                    this.setValue(JSON.stringify(obj, null, 3));\r\n                    return {\r\n                        \"status\" : true\r\n                    };\r\n                }\r\n                catch(e)\r\n                {\r\n                    return {\r\n                        \"status\" : false,\r\n                        \"message\" : e.message\r\n                    };\r\n                }\r\n            },\r\n    \r\n            /**\r\n             * @see Alpaca.Fields.TextAreaField#postRender\r\n             */\r\n            afterRenderControl: function(model, callback)\r\n            {\r\n                var self = this;\r\n    \r\n                this.base(model, function() {\r\n    \r\n                    if (self.control)\r\n                    {\r\n                        // Some auto-formatting capabilities\r\n                        self.control.on('keypress', function(e) {\r\n    \r\n                            var code = e.keyCode || e.wich;\r\n    \r\n                            if (code === 34) {\r\n                                self.control.insertAtCaret('\"');\r\n                            }\r\n                            if (code === 123) {\r\n                                self.control.insertAtCaret('}');\r\n                            }\r\n                            if (code === 91) {\r\n                                self.control.insertAtCaret(']');\r\n                            }\r\n                        });\r\n    \r\n                        self.control.on('keypress', 'Ctrl+l', function() {\r\n                            self.getFieldEl().removeClass(\"alpaca-field-focused\");\r\n    \r\n                            // set class from state\r\n                            self.refreshValidationState();\r\n                        });\r\n    \r\n                        self.control.attr('title','Type Ctrl+L to format and validate the JSON string.');\r\n                    }\r\n    \r\n                    callback();\r\n    \r\n                });\r\n    \r\n            }\r\n    \r\n            /* builder_helpers */\r\n            ,\r\n    \r\n            /**\r\n             * @see Alpaca.Fields.TextAreaField#getTitle\r\n             */\r\n            getTitle: function() {\r\n                return \"JSON Editor\";\r\n            },\r\n    \r\n            /**\r\n             * @see Alpaca.Fields.TextAreaField#getDescription\r\n             */\r\n            getDescription: function() {\r\n                return \"Editor for JSON objects with basic validation and formatting.\";\r\n            }\r\n    \r\n            /* end_builder_helpers */\r\n        });\r\n    \r\n        // Additional Registrations\r\n        Alpaca.registerMessages({\r\n            \"stringNotAJSON\": \"This value is not a valid JSON string.\"\r\n        });\r\n    \r\n        Alpaca.registerFieldClass(\"json\", Alpaca.Fields.JSONField);\r\n    \r\n        $.fn.insertAtCaret = function (myValue) {\r\n    \r\n            return this.each(function() {\r\n    \r\n                //IE support\r\n                if (document.selection) {\r\n    \r\n                    this.trigger('focus');\r\n                    sel = document.selection.createRange();\r\n                    sel.text = myValue;\r\n                    this.trigger('focus');\r\n    \r\n                } else if (this.selectionStart || this.selectionStart == '0') { // jshint ignore:line\r\n    \r\n                    //MOZILLA / NETSCAPE support\r\n                    var startPos = this.selectionStart;\r\n                    var endPos = this.selectionEnd;\r\n                    var scrollTop = this.scrollTop;\r\n                    this.value = this.value.substring(0, startPos) + myValue + this.value.substring(endPos, this.value.length);\r\n                    this.trigger('focus');\r\n                    this.selectionStart = startPos /*+ myValue.length*/;\r\n                    this.selectionEnd = startPos /*+ myValue.length*/;\r\n                    this.scrollTop = scrollTop;\r\n    \r\n                } else {\r\n    \r\n                    this.value += myValue;\r\n                    this.trigger('focus');\r\n                }\r\n            });\r\n        };\r\n    \r\n        /*\r\n         * jQuery Hotkeys Plugin\r\n         * Copyright 2010, John Resig\r\n         * Dual licensed under the MIT or GPL Version 2 licenses.\r\n         *\r\n         * Based upon the plugin by Tzury Bar Yochay:\r\n         * http://github.com/tzuryby/hotkeys\r\n         *\r\n         * Original idea by:\r\n         * Binny V A, http://www.openjs.com/scripts/events/keyboard_shortcuts/\r\n        */\r\n        jQuery.hotkeys = {\r\n            version: \"0.8\",\r\n    \r\n            specialKeys: {\r\n                8: \"backspace\", 9: \"tab\", 13: \"return\", 16: \"shift\", 17: \"ctrl\", 18: \"alt\", 19: \"pause\",\r\n                20: \"capslock\", 27: \"esc\", 32: \"space\", 33: \"pageup\", 34: \"pagedown\", 35: \"end\", 36: \"home\",\r\n                37: \"left\", 38: \"up\", 39: \"right\", 40: \"down\", 45: \"insert\", 46: \"del\",\r\n                96: \"0\", 97: \"1\", 98: \"2\", 99: \"3\", 100: \"4\", 101: \"5\", 102: \"6\", 103: \"7\",\r\n                104: \"8\", 105: \"9\", 106: \"*\", 107: \"+\", 109: \"-\", 110: \".\", 111 : \"/\",\r\n                112: \"f1\", 113: \"f2\", 114: \"f3\", 115: \"f4\", 116: \"f5\", 117: \"f6\", 118: \"f7\", 119: \"f8\",\r\n                120: \"f9\", 121: \"f10\", 122: \"f11\", 123: \"f12\", 144: \"numlock\", 145: \"scroll\", 191: \"/\", 224: \"meta\"\r\n            },\r\n    \r\n            shiftNums: {\r\n                \"`\": \"~\", \"1\": \"!\", \"2\": \"@\", \"3\": \"#\", \"4\": \"$\", \"5\": \"%\", \"6\": \"^\", \"7\": \"&\",\r\n                \"8\": \"*\", \"9\": \"(\", \"0\": \")\", \"-\": \"_\", \"=\": \"+\", \";\": \": \", \"'\": \"\\\"\", \",\": \"<\",\r\n                \".\": \">\",  \"/\": \"?\",  \"\\\\\": \"|\"\r\n            }\r\n        };\r\n    \r\n        function keyHandler( handleObj ) {\r\n            // Only care when a possible input has been specified\r\n            if ( typeof handleObj.data !== \"string\" ) {\r\n                return;\r\n            }\r\n    \r\n            var origHandler = handleObj.handler,\r\n                keys = handleObj.data.toLowerCase().split(\" \");\r\n    \r\n            handleObj.handler = function( event ) {\r\n                // Don't fire in text-accepting inputs that we didn't directly bind to\r\n                if ( this !== event.target && (/textarea|select/i.test( event.target.nodeName ) ||\r\n                     event.target.type === \"text\") ) {\r\n                    return;\r\n                }\r\n    \r\n                // Keypress represents characters, not special keys\r\n                var special = event.type !== \"keypress\" && jQuery.hotkeys.specialKeys[ event.which ],\r\n                    character = String.fromCharCode( event.which ).toLowerCase(),\r\n                    key, modif = \"\", possible = {};\r\n    \r\n                // check combinations (alt|ctrl|shift+anything)\r\n                if ( event.altKey && special !== \"alt\" ) {\r\n                    modif += \"alt+\";\r\n                }\r\n    \r\n                if ( event.ctrlKey && special !== \"ctrl\" ) {\r\n                    modif += \"ctrl+\";\r\n                }\r\n    \r\n                // TODO: Need to make sure this works consistently across platforms\r\n                if ( event.metaKey && !event.ctrlKey && special !== \"meta\" ) {\r\n                    modif += \"meta+\";\r\n                }\r\n    \r\n                if ( event.shiftKey && special !== \"shift\" ) {\r\n                    modif += \"shift+\";\r\n                }\r\n    \r\n                if ( special ) {\r\n                    possible[ modif + special ] = true;\r\n    \r\n                } else {\r\n                    possible[ modif + character ] = true;\r\n                    possible[ modif + jQuery.hotkeys.shiftNums[ character ] ] = true;\r\n    \r\n                    // \"$\" can be triggered as \"Shift+4\" or \"Shift+$\" or just \"$\"\r\n                    if ( modif === \"shift+\" ) {\r\n                        possible[ jQuery.hotkeys.shiftNums[ character ] ] = true;\r\n                    }\r\n                }\r\n    \r\n                for ( var i = 0, l = keys.length; i < l; i++ ) {\r\n                    if ( possible[ keys[i] ] ) {\r\n                        return origHandler.apply( this, arguments );\r\n                    }\r\n                }\r\n            };\r\n        }\r\n    \r\n        jQuery.each([ \"keydown\", \"keyup\", \"keypress\" ], function() {\r\n            jQuery.event.special[ this ] = { add: keyHandler };\r\n        });\r\n    \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.ZipcodeField = Alpaca.Fields.TextField.extend(\r\n            /**\r\n             * @lends Alpaca.Fields.ZipcodeField.prototype\r\n             */\r\n            {\r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getFieldType\r\n                 */\r\n                getFieldType: function () {\r\n                    return \"zipcode\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#setup\r\n                 */\r\n                setup: function () {\r\n                    this.base();\r\n    \r\n                    this.options.format = (this.options.format ? this.options.format : \"nine\");\r\n    \r\n                    if (this.options.format === \"nine\") {\r\n                        this.schema.pattern = Alpaca.regexps[\"zipcode-nine\"];\r\n                    }\r\n                    else if (this.options.format === \"five\") {\r\n                        this.schema.pattern = Alpaca.regexps[\"zipcode-five\"];\r\n                    }\r\n                    else {\r\n                        Alpaca.logError(\"The configured zipcode format: \" + this.options.format + \" is not a legal value [five, nine]\");\r\n    \r\n                        // default to nine format\r\n                        this.options.format = \"nine\";\r\n                        this.schema.pattern = Alpaca.regexps[\"zipcode-nine\"];\r\n                    }\r\n    \r\n                    // set mask string\r\n                    if (this.options.format === \"nine\") {\r\n                        this.options[\"maskString\"] = \"99999-9999\";\r\n                    }\r\n                    else if (this.options.format === \"five\") {\r\n                        this.options[\"maskString\"] = \"99999\";\r\n                    }\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#handleValidate\r\n                 */\r\n                handleValidate: function () {\r\n                    var baseStatus = this.base();\r\n    \r\n                    var valInfo = this.validation;\r\n    \r\n                    if (!valInfo[\"invalidPattern\"][\"status\"]) {\r\n    \r\n                        if (this.options.format === \"nine\") {\r\n                            valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidZipcodeFormatNine\");\r\n                        }\r\n                        else if (this.options.format === \"five\") {\r\n                            valInfo[\"invalidPattern\"][\"message\"] = this.getMessage(\"invalidZipcodeFormatFive\");\r\n                        }\r\n                    }\r\n    \r\n                    return baseStatus;\r\n                }\r\n    \r\n    \r\n    \r\n                /* builder_helpers */\r\n                ,\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getSchemaOfOptions\r\n                 */\r\n                getSchemaOfOptions: function () {\r\n    \r\n                    return Alpaca.merge(this.base(), {\r\n                        \"properties\": {\r\n                            \"format\": {\r\n                                \"title\": \"Format\",\r\n                                \"description\": \"How to represent the zipcode field\",\r\n                                \"type\": \"string\",\r\n                                \"default\": \"five\",\r\n                                \"enum\": [\"five\", \"nine\"],\r\n                                \"readonly\": true\r\n                            }\r\n                        }\r\n                    });\r\n    \r\n                },\r\n    \r\n                /**\r\n                 * @private\r\n                 * @see Alpaca.Fields.TextField#getOptionsForOptions\r\n                 */\r\n                getOptionsForOptions: function () {\r\n                    return Alpaca.merge(this.base(), {\r\n                        \"fields\": {\r\n                            \"format\": {\r\n                                \"type\": \"text\"\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getTitle\r\n                 */\r\n                getTitle: function () {\r\n                    return \"Zipcode Field\";\r\n                },\r\n    \r\n                /**\r\n                 * @see Alpaca.Fields.TextField#getDescription\r\n                 */\r\n                getDescription: function () {\r\n                    return \"Provides a five or nine-digital US zipcode control with validation.\";\r\n                }\r\n    \r\n                /* end_builder_helpers */\r\n            });\r\n    \r\n        Alpaca.registerMessages({\r\n            \"invalidZipcodeFormatFive\": \"Invalid Five-Digit Zipcode (#####)\",\r\n            \"invalidZipcodeFormatNine\": \"Invalid Nine-Digit Zipcode (#####-####)\"\r\n        });\r\n        Alpaca.registerFieldClass(\"zipcode\", Alpaca.Fields.ZipcodeField);\r\n        Alpaca.registerDefaultFormatFieldMapping(\"zipcode\", \"zipcode\");\r\n\r\n        /**\r\n        * Defines the base class implementation for views.  All views in Alpaca ultimately extend this form.\r\n        * This provides the ideal place for any global overrides of view templates, message bundles or other settings.\r\n        */\r\n        Alpaca.registerView({\r\n            \"id\": \"base\",\r\n            \"title\": \"Abstract base view\",\r\n            \"messages\": {\r\n                \"countries\": {\r\n                    \"afg\": \"Afghanistan\",\r\n                    \"ala\": \"Aland Islands\",\r\n                    \"alb\": \"Albania\",\r\n                    \"dza\": \"Algeria\",\r\n                    \"asm\": \"American Samoa\",\r\n                    \"and\": \"Andorra\",\r\n                    \"ago\": \"Angola\",\r\n                    \"aia\": \"Anguilla\",\r\n                    \"ata\": \"Antarctica\",\r\n                    \"atg\": \"Antigua and Barbuda\",\r\n                    \"arg\": \"Argentina\",\r\n                    \"arm\": \"Armenia\",\r\n                    \"abw\": \"Aruba\",\r\n                    \"aus\": \"Australia\",\r\n                    \"aut\": \"Austria\",\r\n                    \"aze\": \"Azerbaijan\",\r\n                    \"bhs\": \"Bahamas\",\r\n                    \"bhr\": \"Bahrain\",\r\n                    \"bgd\": \"Bangladesh\",\r\n                    \"brb\": \"Barbados\",\r\n                    \"blr\": \"Belarus\",\r\n                    \"bel\": \"Belgium\",\r\n                    \"blz\": \"Belize\",\r\n                    \"ben\": \"Benin\",\r\n                    \"bmu\": \"Bermuda\",\r\n                    \"btn\": \"Bhutan\",\r\n                    \"bol\": \"Bolivia\",\r\n                    \"bih\": \"Bosnia and Herzegovina\",\r\n                    \"bwa\": \"Botswana\",\r\n                    \"bvt\": \"Bouvet Island\",\r\n                    \"bra\": \"Brazil\",\r\n                    \"iot\": \"British Indian Ocean Territory\",\r\n                    \"brn\": \"Brunei Darussalam\",\r\n                    \"bgr\": \"Bulgaria\",\r\n                    \"bfa\": \"Burkina Faso\",\r\n                    \"bdi\": \"Burundi\",\r\n                    \"khm\": \"Cambodia\",\r\n                    \"cmr\": \"Cameroon\",\r\n                    \"can\": \"Canada\",\r\n                    \"cpv\": \"Cape Verde\",\r\n                    \"cym\": \"Cayman Islands\",\r\n                    \"caf\": \"Central African Republic\",\r\n                    \"tcd\": \"Chad\",\r\n                    \"chl\": \"Chile\",\r\n                    \"chn\": \"China\",\r\n                    \"cxr\": \"Christmas Island\",\r\n                    \"cck\": \"Cocos (Keeling), Islands\",\r\n                    \"col\": \"Colombia\",\r\n                    \"com\": \"Comoros\",\r\n                    \"cog\": \"Congo\",\r\n                    \"cod\": \"Congo, the Democratic Republic of the\",\r\n                    \"cok\": \"Cook Islands\",\r\n                    \"cri\": \"Costa Rica\",\r\n                    \"hrv\": \"Croatia\",\r\n                    \"cub\": \"Cuba\",\r\n                    \"cyp\": \"Cyprus\",\r\n                    \"cze\": \"Czech Republic\",\r\n                    \"civ\": \"Cote d'Ivoire\",\r\n                    \"dnk\": \"Denmark\",\r\n                    \"dji\": \"Djibouti\",\r\n                    \"dma\": \"Dominica\",\r\n                    \"dom\": \"Dominican Republic\",\r\n                    \"ecu\": \"Ecuador\",\r\n                    \"egy\": \"Egypt\",\r\n                    \"slv\": \"El Salvador\",\r\n                    \"gnq\": \"Equatorial Guinea\",\r\n                    \"eri\": \"Eritrea\",\r\n                    \"est\": \"Estonia\",\r\n                    \"eth\": \"Ethiopia\",\r\n                    \"flk\": \"Falkland Islands (Malvinas),\",\r\n                    \"fro\": \"Faroe Islands\",\r\n                    \"fji\": \"Fiji\",\r\n                    \"fin\": \"Finland\",\r\n                    \"fra\": \"France\",\r\n                    \"guf\": \"French Guiana\",\r\n                    \"pyf\": \"French Polynesia\",\r\n                    \"atf\": \"French Southern Territories\",\r\n                    \"gab\": \"Gabon\",\r\n                    \"gmb\": \"Gambia\",\r\n                    \"geo\": \"Georgia\",\r\n                    \"deu\": \"Germany\",\r\n                    \"gha\": \"Ghana\",\r\n                    \"gib\": \"Gibraltar\",\r\n                    \"grc\": \"Greece\",\r\n                    \"grl\": \"Greenland\",\r\n                    \"grd\": \"Grenada\",\r\n                    \"glp\": \"Guadeloupe\",\r\n                    \"gum\": \"Guam\",\r\n                    \"gtm\": \"Guatemala\",\r\n                    \"ggy\": \"Guernsey\",\r\n                    \"gin\": \"Guinea\",\r\n                    \"gnb\": \"Guinea-Bissau\",\r\n                    \"guy\": \"Guyana\",\r\n                    \"hti\": \"Haiti\",\r\n                    \"hmd\": \"Heard Island and McDonald Islands\",\r\n                    \"vat\": \"Holy See (Vatican City State),\",\r\n                    \"hnd\": \"Honduras\",\r\n                    \"hkg\": \"Hong Kong\",\r\n                    \"hun\": \"Hungary\",\r\n                    \"isl\": \"Iceland\",\r\n                    \"ind\": \"India\",\r\n                    \"idn\": \"Indonesia\",\r\n                    \"irn\": \"Iran, Islamic Republic of\",\r\n                    \"irq\": \"Iraq\",\r\n                    \"irl\": \"Ireland\",\r\n                    \"imn\": \"Isle of Man\",\r\n                    \"isr\": \"Israel\",\r\n                    \"ita\": \"Italy\",\r\n                    \"jam\": \"Jamaica\",\r\n                    \"jpn\": \"Japan\",\r\n                    \"jey\": \"Jersey\",\r\n                    \"jor\": \"Jordan\",\r\n                    \"kaz\": \"Kazakhstan\",\r\n                    \"ken\": \"Kenya\",\r\n                    \"kir\": \"Kiribati\",\r\n                    \"prk\": \"Korea, Democratic People's Republic of\",\r\n                    \"kor\": \"Korea, Republic of\",\r\n                    \"kwt\": \"Kuwait\",\r\n                    \"kgz\": \"Kyrgyzstan\",\r\n                    \"lao\": \"Lao People's Democratic Republic\",\r\n                    \"lva\": \"Latvia\",\r\n                    \"lbn\": \"Lebanon\",\r\n                    \"lso\": \"Lesotho\",\r\n                    \"lbr\": \"Liberia\",\r\n                    \"lby\": \"Libyan Arab Jamahiriya\",\r\n                    \"lie\": \"Liechtenstein\",\r\n                    \"ltu\": \"Lithuania\",\r\n                    \"lux\": \"Luxembourg\",\r\n                    \"mac\": \"Macao\",\r\n                    \"mkd\": \"Macedonia, the former Yugoslav Republic of\",\r\n                    \"mdg\": \"Madagascar\",\r\n                    \"mwi\": \"Malawi\",\r\n                    \"mys\": \"Malaysia\",\r\n                    \"mdv\": \"Maldives\",\r\n                    \"mli\": \"Mali\",\r\n                    \"mlt\": \"Malta\",\r\n                    \"mhl\": \"Marshall Islands\",\r\n                    \"mtq\": \"Martinique\",\r\n                    \"mrt\": \"Mauritania\",\r\n                    \"mus\": \"Mauritius\",\r\n                    \"myt\": \"Mayotte\",\r\n                    \"mex\": \"Mexico\",\r\n                    \"fsm\": \"Micronesia, Federated States of\",\r\n                    \"mda\": \"Moldova, Republic of\",\r\n                    \"mco\": \"Monaco\",\r\n                    \"mng\": \"Mongolia\",\r\n                    \"mne\": \"Montenegro\",\r\n                    \"msr\": \"Montserrat\",\r\n                    \"mar\": \"Morocco\",\r\n                    \"moz\": \"Mozambique\",\r\n                    \"mmr\": \"Myanmar\",\r\n                    \"nam\": \"Namibia\",\r\n                    \"nru\": \"Nauru\",\r\n                    \"npl\": \"Nepal\",\r\n                    \"nld\": \"Netherlands\",\r\n                    \"ant\": \"Netherlands Antilles\",\r\n                    \"ncl\": \"New Caledonia\",\r\n                    \"nzl\": \"New Zealand\",\r\n                    \"nic\": \"Nicaragua\",\r\n                    \"ner\": \"Niger\",\r\n                    \"nga\": \"Nigeria\",\r\n                    \"niu\": \"Niue\",\r\n                    \"nfk\": \"Norfolk Island\",\r\n                    \"mnp\": \"Northern Mariana Islands\",\r\n                    \"nor\": \"Norway\",\r\n                    \"omn\": \"Oman\",\r\n                    \"pak\": \"Pakistan\",\r\n                    \"plw\": \"Palau\",\r\n                    \"pse\": \"Palestinian Territory, Occupied\",\r\n                    \"pan\": \"Panama\",\r\n                    \"png\": \"Papua New Guinea\",\r\n                    \"pry\": \"Paraguay\",\r\n                    \"per\": \"Peru\",\r\n                    \"phl\": \"Philippines\",\r\n                    \"pcn\": \"Pitcairn\",\r\n                    \"pol\": \"Poland\",\r\n                    \"prt\": \"Portugal\",\r\n                    \"pri\": \"Puerto Rico\",\r\n                    \"qat\": \"Qatar\",\r\n                    \"rou\": \"Romania\",\r\n                    \"rus\": \"Russian Federation\",\r\n                    \"rwa\": \"Rwanda\",\r\n                    \"reu\": \"Reunion\",\r\n                    \"blm\": \"Saint Barthelemy\",\r\n                    \"shn\": \"Saint Helena\",\r\n                    \"kna\": \"Saint Kitts and Nevis\",\r\n                    \"lca\": \"Saint Lucia\",\r\n                    \"maf\": \"Saint Martin (French part)\",\r\n                    \"spm\": \"Saint Pierre and Miquelon\",\r\n                    \"vct\": \"Saint Vincent and the Grenadines\",\r\n                    \"wsm\": \"Samoa\",\r\n                    \"smr\": \"San Marino\",\r\n                    \"stp\": \"Sao Tome and Principe\",\r\n                    \"sau\": \"Saudi Arabia\",\r\n                    \"sen\": \"Senegal\",\r\n                    \"srb\": \"Serbia\",\r\n                    \"syc\": \"Seychelles\",\r\n                    \"sle\": \"Sierra Leone\",\r\n                    \"sgp\": \"Singapore\",\r\n                    \"svk\": \"Slovakia\",\r\n                    \"svn\": \"Slovenia\",\r\n                    \"slb\": \"Solomon Islands\",\r\n                    \"som\": \"Somalia\",\r\n                    \"zaf\": \"South Africa\",\r\n                    \"sgs\": \"South Georgia and the South Sandwich Islands\",\r\n                    \"esp\": \"Spain\",\r\n                    \"lka\": \"Sri Lanka\",\r\n                    \"sdn\": \"Sudan\",\r\n                    \"sur\": \"Suriname\",\r\n                    \"sjm\": \"Svalbard and Jan Mayen\",\r\n                    \"swz\": \"Swaziland\",\r\n                    \"swe\": \"Sweden\",\r\n                    \"che\": \"Switzerland\",\r\n                    \"syr\": \"Syrian Arab Republic\",\r\n                    \"twn\": \"Taiwan, Province of China\",\r\n                    \"tjk\": \"Tajikistan\",\r\n                    \"tza\": \"Tanzania, United Republic of\",\r\n                    \"tha\": \"Thailand\",\r\n                    \"tls\": \"Timor-Leste\",\r\n                    \"tgo\": \"Togo\",\r\n                    \"tkl\": \"Tokelau\",\r\n                    \"ton\": \"Tonga\",\r\n                    \"tto\": \"Trinidad and Tobago\",\r\n                    \"tun\": \"Tunisia\",\r\n                    \"tur\": \"Turkey\",\r\n                    \"tkm\": \"Turkmenistan\",\r\n                    \"tca\": \"Turks and Caicos Islands\",\r\n                    \"tuv\": \"Tuvalu\",\r\n                    \"uga\": \"Uganda\",\r\n                    \"ukr\": \"Ukraine\",\r\n                    \"are\": \"United Arab Emirates\",\r\n                    \"gbr\": \"United Kingdom\",\r\n                    \"usa\": \"United States\",\r\n                    \"umi\": \"United States Minor Outlying Islands\",\r\n                    \"ury\": \"Uruguay\",\r\n                    \"uzb\": \"Uzbekistan\",\r\n                    \"vut\": \"Vanuatu\",\r\n                    \"ven\": \"Venezuela\",\r\n                    \"vnm\": \"Viet Nam\",\r\n                    \"vgb\": \"Virgin Islands, British\",\r\n                    \"vir\": \"Virgin Islands, U.S.\",\r\n                    \"wlf\": \"Wallis and Futuna\",\r\n                    \"esh\": \"Western Sahara\",\r\n                    \"yem\": \"Yemen\",\r\n                    \"zmb\": \"Zambia\",\r\n                    \"zwe\": \"Zimbabwe\"\r\n                }\r\n            }\r\n        });\r\n        \r\n    })(jQuery);\r\n\r\n    (function($) {\r\n        \r\n        Alpaca.Fields.ObjectField = Alpaca.Fields.ObjectField.extend({\r\n\r\n            ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            //\r\n            // WIZARD\r\n            //\r\n            ///////////////////////////////////////////////////////////////////////////////////////////////////////\r\n    \r\n            /**\r\n             * Wraps the current object into a wizard container and wires up the navigation and buttons so that\r\n             * wizard elements flip nicely.\r\n             */\r\n            wizard: function () {\r\n                var self = this;\r\n    \r\n                // config-driven\r\n                var stepDescriptors = this.wizardConfigs.steps;\r\n                if (!stepDescriptors) {\r\n                    stepDescriptors = [];\r\n                }\r\n                var wizardTitle = this.wizardConfigs.title;\r\n                var wizardDescription = this.wizardConfigs.description;\r\n                var buttonDescriptors = this.wizardConfigs.buttons;\r\n                if (!buttonDescriptors) {\r\n                    buttonDescriptors = {};\r\n                }\r\n                if (!buttonDescriptors[\"previous\"]) {\r\n                    buttonDescriptors[\"previous\"] = {}\r\n                }\r\n                if (!buttonDescriptors[\"previous\"].title) {\r\n                    buttonDescriptors[\"previous\"].title = \"Previous\";\r\n                }\r\n                if (!buttonDescriptors[\"previous\"].align) {\r\n                    buttonDescriptors[\"previous\"].align = \"left\";\r\n                }\r\n                if (!buttonDescriptors[\"previous\"].type) {\r\n                    buttonDescriptors[\"previous\"].type = \"button\";\r\n                }\r\n                if (!buttonDescriptors[\"next\"]) {\r\n                    buttonDescriptors[\"next\"] = {}\r\n                }\r\n                if (!buttonDescriptors[\"next\"].title) {\r\n                    buttonDescriptors[\"next\"].title = \"Next\";\r\n                }\r\n                if (!buttonDescriptors[\"next\"].align) {\r\n                    buttonDescriptors[\"next\"].align = \"right\";\r\n                }\r\n                if (!buttonDescriptors[\"next\"].type) {\r\n                    buttonDescriptors[\"next\"].type = \"button\";\r\n                }\r\n    \r\n                if (!this.wizardConfigs.hideSubmitButton) {\r\n                    if (!buttonDescriptors[\"submit\"]) {\r\n                        buttonDescriptors[\"submit\"] = {}\r\n                    }\r\n                    if (!buttonDescriptors[\"submit\"].title) {\r\n                        buttonDescriptors[\"submit\"].title = \"Submit\";\r\n                    }\r\n                    if (!buttonDescriptors[\"submit\"].align) {\r\n                        buttonDescriptors[\"submit\"].align = \"right\";\r\n                    }\r\n                    if (!buttonDescriptors[\"submit\"].type) {\r\n                        buttonDescriptors[\"submit\"].type = \"button\";\r\n                    }\r\n                }\r\n    \r\n                for (var buttonKey in buttonDescriptors) {\r\n                    if (!buttonDescriptors[buttonKey].type) {\r\n                        buttonDescriptors[buttonKey].type = \"button\";\r\n                    }\r\n                }\r\n                var showSteps = this.wizardConfigs.showSteps;\r\n                if (typeof (showSteps) == \"undefined\") {\r\n                    showSteps = true;\r\n                }\r\n                var showProgressBar = this.wizardConfigs.showProgressBar;\r\n                var performValidation = this.wizardConfigs.validation;\r\n                if (typeof (performValidation) == \"undefined\") {\r\n                    performValidation = true;\r\n                }\r\n    \r\n                // DOM-driven configuration\r\n                var wizardTitle = $(this.field).attr(\"data-alpaca-wizard-title\");\r\n                var wizardDescription = $(this.field).attr(\"data-alpaca-wizard-description\");\r\n                var _wizardValidation = $(this.field).attr(\"data-alpaca-wizard-validation\");\r\n                if (typeof (_wizardValidation) != \"undefined\") {\r\n                    performValidation = _wizardValidation ? true : false;\r\n                }\r\n                var _wizardShowSteps = $(this.field).attr(\"data-alpaca-wizard-show-steps\");\r\n                if (typeof (_wizardShowSteps) != \"undefined\") {\r\n                    showSteps = _wizardShowSteps ? true : false;\r\n                }\r\n                var _wizardShowProgressBar = $(this.field).attr(\"data-alpaca-wizard-show-progress-bar\");\r\n                if (typeof (_wizardShowProgressBar) != \"undefined\") {\r\n                    showProgressBar = _wizardShowProgressBar ? true : false;\r\n                }\r\n    \r\n                // find all of the steps\r\n                var stepEls = $(this.field).find(\"[data-alpaca-wizard-role='step']\");\r\n    \r\n                // DOM-driven configuration of step descriptors\r\n                if (stepDescriptors.length == 0) {\r\n                    stepEls.each(function (i) {\r\n    \r\n                        var stepDescriptor = {};\r\n    \r\n                        var stepTitle = $(this).attr(\"data-alpaca-wizard-step-title\");\r\n                        if (typeof (stepTitle) != \"undefined\") {\r\n                            stepDescriptor.title = stepTitle;\r\n                        }\r\n                        if (!stepDescriptor.title) {\r\n                            stepDescriptor.title = \"Step \" + i;\r\n                        }\r\n    \r\n                        var stepDescription = $(this).attr(\"data-alpaca-wizard-step-description\");\r\n                        if (typeof (stepDescription) != \"undefined\") {\r\n                            stepDescriptor.description = stepDescription;\r\n                        }\r\n                        if (!stepDescriptor.description) {\r\n                            stepDescriptor.description = \"Step \" + i;\r\n                        }\r\n    \r\n                        stepDescriptors.push(stepDescriptor);\r\n                    });\r\n                }\r\n    \r\n                // assume something for progress bar if not specified\r\n                if (typeof (showProgressBar) == \"undefined\") {\r\n                    if (stepDescriptors.length > 1) {\r\n                        showProgressBar = true;\r\n                    }\r\n                }\r\n    \r\n    \r\n                // model for use in rendering the wizard\r\n                var model = {};\r\n                model.wizardTitle = wizardTitle;\r\n                model.wizardDescription = wizardDescription;\r\n                model.showSteps = showSteps;\r\n                model.performValidation = performValidation;\r\n                model.steps = stepDescriptors;\r\n                model.buttons = buttonDescriptors;\r\n                model.schema = self.schema;\r\n                model.options = self.options;\r\n                model.data = self.data;\r\n                model.showProgressBar = showProgressBar;\r\n                model.markAllStepsVisited = this.wizardConfigs.markAllStepsVisited;\r\n                model.view = self.view;\r\n    \r\n                // render the actual wizard\r\n                var wizardTemplateDescriptor = self.view.getTemplateDescriptor(\"wizard\", self);\r\n                if (wizardTemplateDescriptor) {\r\n                    var wizardEl = Alpaca.tmpl(wizardTemplateDescriptor, model);\r\n    \r\n                    $(self.field).append(wizardEl);\r\n    \r\n                    var wizardNav = $(wizardEl).find(\".alpaca-wizard-nav\");\r\n                    var wizardSteps = $(wizardEl).find(\".alpaca-wizard-steps\");\r\n                    var wizardButtons = $(wizardEl).find(\".alpaca-wizard-buttons\");\r\n                    var wizardProgressBar = $(wizardEl).find(\".alpaca-wizard-progress-bar\");\r\n    \r\n                    // move steps into place\r\n                    $(wizardSteps).append(stepEls);\r\n    \r\n                    (function (wizardNav, wizardSteps, wizardButtons, model) {\r\n    \r\n                        var currentIndex = 0;\r\n    \r\n                        var previousButtonEl = $(wizardButtons).find(\"[data-alpaca-wizard-button-key='previous']\");\r\n                        var nextButtonEl = $(wizardButtons).find(\"[data-alpaca-wizard-button-key='next']\");\r\n                        var submitButtonEl = $(wizardButtons).find(\"[data-alpaca-wizard-button-key='submit']\");\r\n    \r\n                        // snap into place a little controller to work the buttons\r\n                        // assume the first step\r\n                        var refreshSteps = function () {\r\n                            // NAV\r\n                            if (model.showSteps) {\r\n                                if (!model.visits) {\r\n                                    model.visits = {};\r\n                                }\r\n    \r\n                                // optionally mark all steps as visited\r\n                                if (model.markAllStepsVisited) {\r\n                                    var stepElements = $(wizardNav).find(\"[data-alpaca-wizard-step-index]\");\r\n                                    for (var g = 0; g < stepElements.length; g++) {\r\n                                        model.visits[g] = true;\r\n                                    }\r\n                                }\r\n    \r\n                                // mark current step as visited\r\n                                model.visits[currentIndex] = true;\r\n    \r\n                                var stepElements = $(wizardNav).find(\"[data-alpaca-wizard-step-index]\");\r\n                                $(stepElements).removeClass(\"binf-disabled\");\r\n                                $(stepElements).removeClass(\"completed\");\r\n                                $(stepElements).removeClass(\"binf-active\");\r\n                                $(stepElements).removeClass(\"visited\");\r\n                                for (var g = 0; g < stepElements.length; g++) {\r\n                                    if (g < currentIndex) {\r\n                                        $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"completed\");\r\n                                    }\r\n                                    else if (g === currentIndex) {\r\n                                        $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"binf-active\");\r\n                                    }\r\n                                    else {\r\n                                        if (model.visits && model.visits[g]) {\r\n                                            // do not mark disabled for this case\r\n                                        }\r\n                                        else {\r\n                                            $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"binf-disabled\");\r\n                                        }\r\n    \r\n                                    }\r\n    \r\n                                    if (model.visits && model.visits[g]) {\r\n                                        $(wizardNav).find(\"[data-alpaca-wizard-step-index='\" + g + \"']\").addClass(\"visited\");\r\n                                    }\r\n                                }\r\n                            }\r\n    \r\n                            // PROGRESS BAR\r\n                            if (model.showProgressBar) {\r\n                                var valueNow = currentIndex + 1;\r\n                                var valueMax = model.steps.length + 1;\r\n                                var width = parseInt(((valueNow / valueMax) * 100), 10) + \"%\";\r\n    \r\n                                $(wizardProgressBar).find(\".binf-progress-bar\").attr(\"aria-valuemax\", valueMax);\r\n                                $(wizardProgressBar).find(\".binf-progress-bar\").attr(\"aria-valuenow\", valueNow);\r\n                                $(wizardProgressBar).find(\".binf-progress-bar\").css(\"width\", width);\r\n                            }\r\n    \r\n    \r\n                            // BUTTONS\r\n    \r\n                            // hide everything\r\n                            previousButtonEl.hide();\r\n                            nextButtonEl.hide();\r\n                            submitButtonEl.hide();\r\n    \r\n                            // simple case\r\n                            if (model.steps.length == 1) {\r\n                                submitButtonEl.show();\r\n                            }\r\n                            else if (model.steps.length > 1) {\r\n                                if (currentIndex > 0) {\r\n                                    previousButtonEl.show();\r\n                                }\r\n    \r\n                                nextButtonEl.show();\r\n    \r\n                                if (currentIndex == 0) {\r\n                                    nextButtonEl.show();\r\n                                }\r\n                                else if (currentIndex == model.steps.length - 1) {\r\n                                    nextButtonEl.hide();\r\n                                    submitButtonEl.show();\r\n                                }\r\n                            }\r\n    \r\n                            // hide all steps\r\n                            $(wizardSteps).find(\"[data-alpaca-wizard-role='step']\").hide();\r\n                            $($(wizardSteps).find(\"[data-alpaca-wizard-role='step']\")[currentIndex]).show();\r\n    \r\n                        };\r\n    \r\n                        var assertValidation = function (buttonId, callback) {\r\n                            if (!model.performValidation) {\r\n                                callback(true);\r\n                                return;\r\n                            }\r\n    \r\n                            // collect all of the fields on the current step\r\n                            var fields = [];\r\n    \r\n                            var currentStepEl = $($(wizardSteps).find(\"[data-alpaca-wizard-role='step']\")[currentIndex]);\r\n                            $(currentStepEl).find(\".alpaca-field\").each(function () {\r\n                                var fieldId = $(this).attr(\"data-alpaca-field-id\");\r\n                                if (fieldId) {\r\n                                    var field = self.childrenById[fieldId];\r\n                                    if (field) {\r\n                                        fields.push(field);\r\n                                    }\r\n                                }\r\n                            });\r\n    \r\n                            // wrap into validation functions\r\n                            var fns = [];\r\n                            for (var i = 0; i < fields.length; i++) {\r\n                                fns.push(function (field) {\r\n                                    return function (cb) {\r\n                                        field.refreshValidationState(true, function () {\r\n                                            cb();\r\n                                        });\r\n                                    }\r\n                                }(fields[i]));\r\n                            }\r\n    \r\n                            // run all validations\r\n                            Alpaca.series(fns, function () {\r\n    \r\n                                var valid = true;\r\n                                for (var i = 0; i < fields.length; i++) {\r\n                                    valid = valid && fields[i].isValid(true);\r\n                                }\r\n    \r\n                                // custom validation function?\r\n                                var b = model.buttons[buttonId];\r\n                                if (b && b.validate) {\r\n                                    b.validate.call(self, function (_valid) {\r\n                                        valid = valid && _valid;\r\n                                        callback(valid);\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    callback(valid);\r\n                                }\r\n                            });\r\n                        };\r\n    \r\n                        $(previousButtonEl).on('click', function (e) {\r\n                            e.preventDefault();\r\n    \r\n                            if (currentIndex >= 1) {\r\n                                //assertValidation(\"previous\", function(valid) {\r\n    \r\n                                //if (valid)\r\n                                //{\r\n                                var b = model.buttons[\"previous\"];\r\n                                if (b) {\r\n                                    if (b.click) {\r\n                                        b.click.call(self, e);\r\n                                    }\r\n                                }\r\n    \r\n                                currentIndex--;\r\n    \r\n                                refreshSteps();\r\n                                //}\r\n                                //});\r\n                            }\r\n                        });\r\n    \r\n                        $(nextButtonEl).on('click', function (e) {\r\n                            e.preventDefault();\r\n    \r\n                            if (currentIndex + 1 <= model.steps.length - 1) {\r\n                                assertValidation(\"next\", function (valid) {\r\n    \r\n                                    if (valid) {\r\n                                        var b = model.buttons[\"next\"];\r\n                                        if (b) {\r\n                                            if (b.click) {\r\n                                                b.click.call(self, e);\r\n                                            }\r\n                                        }\r\n    \r\n                                        currentIndex++;\r\n    \r\n                                        refreshSteps();\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n    \r\n                        $(submitButtonEl).on('click', function (e) {\r\n                            e.preventDefault();\r\n    \r\n                            if (currentIndex === model.steps.length - 1) {\r\n                                assertValidation(\"submit\", function (valid) {\r\n    \r\n                                    if (valid) {\r\n                                        var b = model.buttons[\"submit\"];\r\n                                        if (b) {\r\n                                            if (b.click) {\r\n                                                b.click.call(self, e);\r\n                                            }\r\n                                            else {\r\n                                                // are we in a form?\r\n                                                if (self.form) {\r\n                                                    self.form.submit();\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                });\r\n                            }\r\n                        });\r\n    \r\n                        // all custom buttons\r\n                        $(wizardButtons).find(\"[data-alpaca-wizard-button-key]\").each(function () {\r\n                            var key = $(this).attr(\"data-alpaca-wizard-button-key\");\r\n                            if (key != \"submit\" && key != \"next\" && key != \"previous\") { // standard buttons have different behavior\r\n                                var b = model.buttons[key];\r\n                                if (b && b.click) {\r\n                                    $(this).on('click', function (b) {\r\n                                        return function (e) {\r\n                                            b.click.call(self, e);\r\n                                        };\r\n                                    }(b));\r\n                                }\r\n                            }\r\n                        });\r\n    \r\n                        $(wizardNav).find(\"[data-alpaca-wizard-step-index]\").on('click', function (e) {\r\n                            e.preventDefault();\r\n    \r\n                            var navIndex = $(this).attr(\"data-alpaca-wizard-step-index\");\r\n                            if (navIndex) {\r\n                                navIndex = parseInt(navIndex, 10);\r\n    \r\n                                if (navIndex == currentIndex || (model.visits && model.visits[navIndex])) {\r\n                                    // if we're going backwards, then we do not run validation\r\n                                    if (navIndex < currentIndex) {\r\n                                        currentIndex = navIndex;\r\n                                        refreshSteps();\r\n                                    }\r\n                                    else if (navIndex > currentIndex) {\r\n                                        assertValidation(null, function (valid) {\r\n    \r\n                                            if (valid) {\r\n                                                currentIndex = navIndex;\r\n                                                refreshSteps();\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    else {\r\n                                        // current item should not be clickable\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n    \r\n                        self.on(\"moveToStep\", function (event) {\r\n    \r\n                            var index = event.index;\r\n                            var skipValidation = event.skipValidation;\r\n    \r\n                            if ((typeof (index) !== \"undefined\") && index <= model.steps.length - 1) {\r\n                                if (skipValidation) {\r\n                                    currentIndex = index;\r\n                                    refreshSteps();\r\n                                }\r\n                                else {\r\n                                    assertValidation(null, function (valid) {\r\n    \r\n                                        if (valid) {\r\n                                            currentIndex = index;\r\n    \r\n                                            refreshSteps();\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                        });\r\n    \r\n                        self.on(\"advanceOrSubmit\", function (event) {\r\n    \r\n                            assertValidation(null, function (valid) {\r\n    \r\n                                if (valid) {\r\n                                    if (currentIndex === model.steps.length - 1) {\r\n                                        $(submitButtonEl).trigger('click');\r\n                                    }\r\n                                    else {\r\n                                        $(nextButtonEl).trigger('click');\r\n                                    }\r\n                                }\r\n                            });\r\n                        });\r\n    \r\n    \r\n                        refreshSteps();\r\n    \r\n                    }(wizardNav, wizardSteps, wizardButtons, model));\r\n                }\r\n            },\r\n    \r\n            /**\r\n             * Renders a configuration-based wizard without a layout template.\r\n             */\r\n            autoWizard: function () {\r\n                var stepBindings = this.wizardConfigs.bindings;\r\n                if (!stepBindings) {\r\n                    stepBindings = {};\r\n                }\r\n    \r\n                for (var propertyId in this.childrenByPropertyId) {\r\n                    if (!stepBindings.hasOwnProperty(propertyId)) {\r\n                        stepBindings[propertyId] = 1;\r\n                    }\r\n                }\r\n    \r\n                // should we create steps?\r\n                var createSteps = true;\r\n                if ($(this.field).find(\"[data-alpaca-wizard-role='step']\").length > 0) {\r\n                    // already there\r\n                    createSteps = false;\r\n                }\r\n    \r\n                var step = 1;\r\n                var col = [];\r\n                do {\r\n                    // collect fields in this step\r\n                    col = [];\r\n                    for (var propertyId in stepBindings) {\r\n                        if (stepBindings[propertyId] == step) {\r\n                            if (this.childrenByPropertyId && this.childrenByPropertyId[propertyId]) {\r\n                                col.push(this.childrenByPropertyId[propertyId].field);\r\n                            }\r\n                        }\r\n                    }\r\n    \r\n                    if (col.length > 0) {\r\n                        var stepEl = null;\r\n                        if (createSteps) {\r\n                            stepEl = $('<div data-alpaca-wizard-role=\"step\"></div>');\r\n                            $(this.field).append(stepEl);\r\n                        }\r\n                        else {\r\n                            stepEl = $($(this.field).find(\"[data-alpaca-wizard-role='step']\")[step - 1]);\r\n                        }\r\n    \r\n                        // move elements in\r\n                        for (var i = 0; i < col.length; i++) {\r\n                            $(stepEl).append(col[i]);\r\n                        }\r\n    \r\n                        step++;\r\n                    }\r\n                }\r\n                while (col.length > 0);\r\n    \r\n                // now run the normal wizard\r\n                this.wizard();\r\n            },\r\n    \r\n        });\r\n        \r\n    })(jQuery);\r\n\r\n    return Alpaca;\r\n\r\n    // Helper functions\r\n\r\n    function round() {\r\n        var strategies = {\r\n            up: Math.ceil,\r\n            down: function (input) { return ~~input; },\r\n            nearest: Math.round\r\n        };\r\n        return function (strategy) {\r\n            return strategies[strategy];\r\n        };\r\n    }\r\n});\r\n\n","csui.define('bundles/csui-alpaca-legacy',[\r\n\r\n    'csui/lib/alpaca/js/alpaca',\r\n\r\n], {});\n"]}