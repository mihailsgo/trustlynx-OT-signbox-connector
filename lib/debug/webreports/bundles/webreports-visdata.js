csui.define('webreports/utils/general.utils',[
    'csui/lib/underscore',
    'csui/utils/contexts/factories/node'
], function (_, NodeModelFactory) {

    var generalUtils = _.extend({

        getCaseInsensitiveProperty: function(obj, name) {
            if (obj && name){
                return obj[name] || obj[_.find(_.keys(obj), function(key){
                    return key.toLowerCase() === name.toLowerCase();
                })];
            } else {
                return undefined;
            }
        },

        getCurrentNode: function(context){
            return context.getModel(NodeModelFactory);
        },

        isWebReportNodeContext: function(context){
            var currentNode = this.getCurrentNode(context);
            return currentNode && ( currentNode.get("type") === 30303 );
        }

    });

    return generalUtils;
});

csui.define('webreports/utils/url.webreports',['csui/lib/underscore','csui/utils/url','csui/utils/contexts/factories/node'], function (_,Url, NodeModelFactory) {

    var UrlWebReports = _.extend({

        appendWebReportParameters: function (query, parameters) {

            // Append any WebReport parameters to the RestURL if present
            if (!_.isUndefined(parameters)) {
                // Currently supported array format generated by the Perspective Manager
                if (_.isArray(parameters)) {
                    query = this.combineQueryString(query, this._serializeWebReportParameters(parameters));
                } else {
                    // Support parameters in legacy format
                    query = this.combineQueryString(query, parameters);
                }
            }

            return query;
        },

        appendCurrentContainer: function (query, context) {

            var csuiContainerID;

            // Append the containerID parameter to the RestURL if present
            if (!_.isUndefined(context)) {
                csuiContainerID = this.getCurrentContainerID(context);

                if (csuiContainerID){
                    query = this.combineQueryString(query, 'csuiContainerID='+ csuiContainerID );
                }
            }

            return query;
        },

        appendSWRCellID: function (query, options) {

            var subWebReportCellID;

            // Append the containerID parameter to the RestURL if present
            if (options && options.data && options.data.swrLaunchCell && options.data.swrLaunchCell.id) {

                subWebReportCellID = parseInt(options.data.swrLaunchCell.id, 10);

                if (typeof subWebReportCellID === "number" && !isNaN(subWebReportCellID)){
                    query = this.combineQueryString(query, 'subwebreport_id='+ subWebReportCellID );
                }
            }

            return query;
        },

        getCurrentContainerID: function (context) {
            var csuiContainerID,
                node = context.getModel(NodeModelFactory);

            if (!_.isUndefined(node)){
                csuiContainerID = node.get('id');
            }
            return csuiContainerID;
        },

        _serializeWebReportParameters: function(parameters){
            var serializedParms = '';

            _.each(parameters, function (parmPair) {
                if (parmPair.value === null || parmPair.value === undefined){
                    parmPair.value = "";
                }
                if ( parmPair.name !== '' ) {
                    if (serializedParms.length) {
                        serializedParms += '&' + parmPair.name + '=' + parmPair.value;
                    } else {
                        serializedParms += parmPair.name + '=' + parmPair.value;
                    }
                }
            });

            return serializedParms;
        },

        /* Converts parameters in the format:
                parameters: [
                    {
                        name: 'myparm1',
                        value: 'val1'
                    },
                    {
                        name: 'myparm2',
                        value: 'val2'
                    }
                ]

           To the format:

                {
                    myparm1: 'val1',
                    myparm2: 'val2'
                }

           This is used to generate an object to pass in as data to a POST API.
        */

        getWebReportParametersAsData: function(parameters){

            var parmsObject = {};

            if (_.isArray(parameters)) {
                _.each(parameters, function (parmPair) {
                    if ( parmPair.name !== '' ) {
                        parmsObject[parmPair.name] = parmPair.value;
                    }
                });
            } else if (_.isObject(parameters)) {
                parmsObject = parameters;
            }


            return parmsObject;
        },

        /*  The inverse of getWebReportParametersAsData( parameters ).

         Converts parameters in the format:
             {
             myparm1: 'val1',
             myparm2: 'val2'
             }

         To the format:
             [
                 {
                     name: 'myparm1',
                     value: 'val1'
                 },
                 {
                     name: 'myparm2',
                     value: 'val2'
                 }
             ]

         Used to pass parameters from the prompt screen into a WR using Widget destinations.
        */
        getDataAsWebReportParameters: function(parameters){

            var parmsArray = [];

            if ( _.isObject(parameters) ) {
                _.mapObject(parameters, function (val, key){
                        parmsArray.push({"name": key, "value": val});
                });
            }

            return parmsArray;
        }



    }, Url);

    return UrlWebReports;

});

csui.define('webreports/mixins/webreports.view.mixin',[
    'csui/lib/jquery',
    'csui/lib/underscore',
    'webreports/utils/url.webreports'
], function ($, _, Url) {
    "use strict";

    var WebReportsViewMixin = {

        mixin: function (prototype) {
            return _.extend(prototype, {

                setCommonModelOptions: function(options){
                    var modelOptions = {};

                    if (options && options.data) {

                        this.setModelParameters(options, modelOptions);

                        // Add the id to the modelOptions
                        if (options.data.id) {
                            _.extend(modelOptions,{id: options.data.id});
                        }

                        // If the widget is loaded in a container context then we can get the id
                        // from the page context
                        if (options.context) {
                            _.extend(modelOptions,{context: options.context});
                        }

                    }

                    return modelOptions;
                },

                setModelParameters: function(options, modelOptions){
                    var parameters;
                    // Widgets can pass in WebReport parameters to append to the URL
                    if (_.has(options.data, 'parameters')) {
                        parameters = options.data.parameters;
                        if(!_.isUndefined(parameters) && typeof parameters === "object") {
                            _.extend(modelOptions,{parameters: parameters});

                            // Flatten the parameters and add them directly to the modelOptions
                            // This is needed so that the unique key generated for the collection in the context takes the parameters into account
                            // Nested objects don't get taken into account.
                            _.extend( modelOptions, Url.getWebReportParametersAsData(parameters));
                        }
                    }
                },

                getWidgetFactory: function(options, WidgetFactory, modelOptions) {
                    // returns a factory using the supplied args
                    var factory;

                    if (options && options.context && WidgetFactory && modelOptions) {
                        factory = options.context.getFactory(WidgetFactory, { attributes: modelOptions } );
                    }

                    return factory;
                },

                getFactory: function(){
                    return this._factory;
                },

                setFactory: function(factory){
                    this._factory = factory;
                }
            });
        }
    };

    return WebReportsViewMixin;
});

csui.define('webreports/models/run.webreport.pre/run.webreport.pre.model',[
    'csui/lib/jquery',
    'csui/lib/underscore',
    'csui/lib/backbone',
    'csui/utils/base',
    'csui/models/form',
    'csui/models/mixins/connectable/connectable.mixin',
    'csui/models/mixins/fetchable/fetchable.mixin'
], function ($, _, Backbone, base, FormModel, ConnectableMixin, FetchableMixin) {
    'use strict';

    var RunWRPreModel = FormModel.extend({

        parametersModel: undefined,
        destinationModel: undefined,

        constructor: function RunWRPreModel(attributes, options) {

            this.options = options || (options = {});

            Backbone.Model.prototype.constructor.apply(this, arguments);

            this.makeConnectable(options);
            this.makeFetchable(options);
        },

        url: function () {
            var path = "forms/nodes/run",
                connector = this.connector,
                params = {
                    id: this.options.id
                },
                resource = path + '?' + $.param(params);
            return base.Url.combine( connector.connection.url, resource);
        },

        parse: function (response) {
            this.parametersModel = new Backbone.Model( response.data.parameters_data );
            this.destinationModel = new Backbone.Model( response.data.destination_data );
            return response.forms[0];
        }

    });

    ConnectableMixin.mixin(RunWRPreModel.prototype);
    FetchableMixin.mixin(RunWRPreModel.prototype);

    return RunWRPreModel;

});

csui.define('webreports/utils/contexts/factories/run.webreport.pre.factory',[
	'csui/lib/underscore',
	'csui/utils/contexts/factories/factory',
	'csui/utils/contexts/factories/connector',
	'webreports/models/run.webreport.pre/run.webreport.pre.model'
], function (_,ModelFactory, ConnectorFactory, RunWRPreModel) {

	var runWebReportPreFactory = ModelFactory.extend({

		// Unique prefix of the default model instance, when this model is assigned
		// to a context it can be shared by multiple widgets
		propertyPrefix: 'runwebreportpre',

		constructor: function runWebReportPreFactory(context, options) {

			// Don't pass the attributes into the model:
			if (_.has(options,"attributes")){
				delete options.attributes;
			}
			if (_.has(options, this.propertyPrefix) && _.has(options[this.propertyPrefix], "attributes")){
				delete options[this.propertyPrefix].attributes;
			}

			ModelFactory.prototype.constructor.apply(this, arguments);

			// Obtain the server connector from the application context to share
			// the server connection with the rest of the application; include
			// the options, which can contain settings for dependent factories
			var connector = context.getObject(ConnectorFactory, options),
				modelOptions = _.extend( options.options, {
				connector: connector
			});

			// Expose the model instance in the `property` key on this factory
			// instance to be used by the context
			this.property = new RunWRPreModel( {}, modelOptions );
		}

	});

	return runWebReportPreFactory;

});
csui.define('webreports/utils/commands/open.classic.webreport',['csui/lib/underscore', 'csui/utils/commandhelper', 'csui/utils/commands/open.classic.page'
], function (_, CommandHelper, OpenClassicPageCommand) {

    var OpenClassicWebReportCommand = OpenClassicPageCommand.extend({

        defaults: {
            signature: 'OpenClassicWebReport',
            scope: "single"
        },
        
        enabled: function (status) {
            var node = CommandHelper.getJustOneNode(status);
            return node && node.get('type') === 30303;
        },

        getUrlQueryParameters: function (node, options) {
            var additionalParms,
                baseParms = {
                func: 'll',
                objAction: 'RunReport',
                objId: node.get('id'),
                nexturl: location.href
            };

            if ( _.has(options, "parameters") ) {
                // blend any parms entered in the prompt forms:
                baseParms = _.extend( baseParms, options.parameters );
            }

            return baseParms;
        }

    });

    return OpenClassicWebReportCommand;

});
csui.define('webreports/models/run.webreport/run.webreport.model',[
	'csui/lib/underscore',
	'csui/lib/backbone',
	'csui/utils/base',
	'csui/models/mixins/connectable/connectable.mixin'
], function (_, Backbone, base, ConnectableMixin ) {

	var RunWebReportModel = Backbone.Model.extend({

		constructor: function RunWebReportModel(attributes, options) {
			this.options = options || {};
			Backbone.Model.prototype.constructor.apply(this, arguments);

			this.makeConnectable(this.options);
		},

		url: function () {
			var parms,
				options = this.options,
				id = options.id,
				connector = this.connector,
				path = "nodes/"+ id +"/output";

			// Add in any prompt parameter values to the query:
			if (_.has(options, "parameters")) {

				// Support for name/value pairs in a single object only, not an array of objects:
				if ( !_.isArray(options.parameters) && _.isObject(options.parameters)){
					parms = options.parameters;
					path = path + "?" + base.Url.combineQueryString(parms);
				}

			}

			return base.Url.combine( connector.connection.url, path );

		},

		parse: function(resp, options) {
			// update the destinationModel with the resolved/current destination_data:
			if (_.has(options, "destinationModel")){
				options.destinationModel.set( resp.data.destination_data, options);
			} else {
				options.destinationModel = new Backbone.Model(resp.data.destination_data);
			}

			return resp;
		},

		// Removes any parameters passed on the model:
		clearParameters: function () {
			if ( _.has(this, "options") && _.has(this.options, "parameters") ) {
				delete( this.options.parameters);
			}
		}
		
	});

	ConnectableMixin.mixin(RunWebReportModel.prototype);

	return RunWebReportModel;

});
csui.define('webreports/utils/contexts/factories/run.webreport.factory',[
	'csui/lib/underscore',
	'csui/utils/contexts/factories/factory',
	'csui/utils/contexts/factories/connector',
	'webreports/models/run.webreport/run.webreport.model'
], function (_,ModelFactory, ConnectorFactory, RunWRModel) {

	var RunWRModelFactory = ModelFactory.extend({

		// Unique prefix of the default model instance, when this model is assigned
		// to a context it can be shared by multiple widgets
		propertyPrefix: 'runwrmodel',

		constructor: function RunWRModelFactory(context, options) {
			
			// Don't pass the attributes into the model:
			if (_.has(options,"attributes")){
				delete options.attributes;
			}
			if (_.has(options, this.propertyPrefix) && _.has(options[this.propertyPrefix], "attributes")){
				delete options[this.propertyPrefix].attributes;
			}


			ModelFactory.prototype.constructor.apply(this, arguments);

			var connector = context.getObject(ConnectorFactory, options),
				modelOptions = _.extend( options.options, {
					connector: connector
				});


			// Pass through any populated parameters:
			if (_.has(options,"parameters") ) {
				modelOptions = _.extend( modelOptions, {
					parameters: options.parameters
				});
			}

			// Expose the model instance in the `property` key on this factory
			// instance to be used by the context
			this.property = new RunWRModel({}, modelOptions);
		}

	});

	return RunWRModelFactory;

});

csui.define('webreports/controls/run.webreport.pre/impl/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

csui.define('webreports/controls/run.webreport.pre/impl/nls/root/lang',{
  WebReportParameters: "WebReport Parameters",
  RunWebReport: "Run WebReport",
  Cancel: "Cancel",
  WebReportExecutedSuccessfully: "WebReport executed successfully",
  WebReportExecutingInBackground: "WebReport is executing in background",
  anErrorOccurredExecutingTheWebReport: "An error occurred executing the WebReport",
  okLabel: "OK",
  MissingNodeModelForThisAction: "Missing node model for this action"
});


csui.define('webreports/utils/commands/execute.webreport',['csui/lib/underscore', 'csui/lib/jquery',
	'csui/utils/base',
	'csui/utils/commandhelper', 'csui/models/command',
	'csui/controls/globalmessage/globalmessage',
	'webreports/utils/contexts/factories/run.webreport.factory',
	'i18n!webreports/controls/run.webreport.pre/impl/nls/lang'
], function (_, $,
			 base,
			 CommandHelper, CommandModel,
			 GlobalMessage,
			 RunWRModelFactory,
			 lang ){

	var ExecuteWebReport = CommandModel.extend({

		defaults: {
			signature: 'ExecuteWebReport',
			scope: "single"
		},

		enabled: function (status) {
			var node = CommandHelper.getJustOneNode(status);
			return node && node.get('type') === 30303;
		},

		// Converts a json object of parameters into form data for POSTing:
		convertParametersToFormData: function(parameters){
			
			var serializedParms = '';
			
			if ( _.isObject( parameters ) && !_.isArray( parameters) ){

				_.each( parameters, function(value, key, list){

					var parm,
						val;

					parm = encodeURI(key);
					val = encodeURI(value);

					if (serializedParms.length) {

						serializedParms += '&' + parm + '=' + val;

					} else {

						serializedParms += parm + '=' + val;

					}

				});

			}

			return serializedParms;
		},

		execute: function (status, options) {

			// Generate a request to execute the WebReport on the server:
			var executeWRModel,
				requestAttrs,
				crud_method = "read", // GET default
				deferred = $.Deferred(),
				destinationModel = options.destinationModel,
				http_method = destinationModel.get("http_method"),
				lower_http_method = http_method.toLowerCase(),
				runInBackground = destinationModel.get("run_in_background"),
				executeOptions = {
					attributes: {
						id: options.node.get("id")
					},
					options: {
						id: options.node.get("id")
					}
				},
				hasParameters = ( _.has( options, "parameters" ) );


			executeWRModel = options.context.getModel( RunWRModelFactory, executeOptions );


			if (lower_http_method === "get") {

				// Set the CRUD value:
				crud_method = "read";

				// Pass the current parameters through the model, which are added as query parameters:
				if ( hasParameters && _.has(executeWRModel, "options" ) ) {
					executeWRModel.options =  _.extend( executeWRModel.options, {
						parameters: options.parameters
					});
				}

			} else {

				// Set the CRUD value:
				switch ( lower_http_method ) {

					case "post":
						crud_method = "create";
						break;

					case "put":
						crud_method = "update";
						break;

					case "patch":
						crud_method = "patch";
						break;

					case "delete":
						crud_method = "delete";
						break;
				}

				if ( hasParameters ) {
					// Convert the parameters object into form data for the POST:
					requestAttrs = this.convertParametersToFormData( options.parameters );
				}

			}

			// Make a request that will execute the WR:
			// 		- The success functions stores the response data as attrs, similar to the Backbone.save().
			executeWRModel
				.sync( crud_method, executeWRModel, {
					data: requestAttrs,
					success: function(resp) {
						 // store the response as the model's attrs:
						 if (resp) {
							 var serverAttrs = executeWRModel.parse(resp, options);
							 executeWRModel.set(serverAttrs, options);
						 }
						// Clear out the passed parms so they don't linger in the context:
						executeWRModel.clearParameters();
						deferred.resolve( arguments, executeWRModel );
					 },
					error: function(request, statusText, errorThrown ){
						var error = new base.Error(request);
						GlobalMessage.showMessage("error", error.message, error.errorDetails);
						executeWRModel.clearParameters();
						deferred.reject();
					}
				});


			if (runInBackground){
				// resolve right away in order to show the Status Screen now instead of after the WR has executed:
				deferred.resolve( [{}, "success"], executeWRModel, true );
			}

			return deferred.promise();

		}

	});

	return ExecuteWebReport;

});
csui.define('webreports/controls/run.webreport.pre/run.webreport.pre.controller',['require', 'csui/lib/underscore', 'csui/lib/jquery',
    'csui/models/nodes',
    'csui/utils/command.error',
    'webreports/utils/contexts/factories/run.webreport.pre.factory',
    'webreports/utils/commands/open.classic.webreport',
    'webreports/utils/commands/execute.webreport',
    'i18n!webreports/controls/run.webreport.pre/impl/nls/lang'
], function (require, _, $,
             NodeCollection,
             CommandError,
             RunWRPreModelFactory,
             OpenClassicWebReport,
             ExecuteWebReportCommand,
             lang) {
    'use strict';

    function RunWebReportPreController() {
    }

    _.extend(RunWebReportPreController.prototype, {

        runWRPreModel: undefined,
        destinationModel: undefined,
        parametersModel: undefined,
        promptCheckPromise: undefined,

        _getCommandStatus: function () {
            var status;
            if (typeof this.commandStatus === "undefined") {
                status = {
                    nodes: new NodeCollection(this.options.node)
                };
            } else {
                status = this.commandStatus;
            }

            return status;
        },

        /////////////////////////////////
        // Moved from OpenWebReport cmd
        //////////////////////////////////
        switchToPromptView: function (initialStatus, options) {
            var context,
                originatingView,
                self = this,
                deferred = $.Deferred(),
                status = this._getCommandStatus(),
                selected = status.nodes;

            context = status.context || options && options.context;

            originatingView = status.originatingView || options.originatingView;

            // WR node executed from a list view.
            // Render the prompt view in situ:
            csui.require(['csui/lib/marionette', 'csui/lib/backbone',
                'webreports/widgets/parameter.prompt.form/parameter.prompt.form.view',
                'csui/controls/dialog/dialog.view',
                'csui/utils/contexts/factories/next.node',
                'csui/utils/contexts/factories/previous.node',
                'csui/utils/contexts/factories/node',
                'csui/widgets/nodestable/nodestable.view'
            ], function (Marionette, Backbone, PromptView, DialogView, NextNodeFactory, PreviousNodeFactory, NodeFactory, NodesTableWidget) {

                var attrs,
                    parm,
                    promptView,
                    newAttrs = {},
                    previousNode = context.getModel(PreviousNodeFactory),
                    nextNode = context.getModel(NextNodeFactory),
                    thisNode = context.getModel(NodeFactory),
                    promptViewOptions = {
                        RunWRController: self,
                        model: selected,
                        originatingView: originatingView,
                        context: context,
                        showCloseIcon: originatingView ? false : true,
                        showBackIcon: originatingView ? true : false
                    };

                // Set the previousNode to the current node so we come back here:
                previousNode.clear({silent: true});
                previousNode.set(thisNode.attributes);

                // Clear out the nextNode, as the user might hit the back button to Cancel:
                nextNode.clear({silent: true});

                promptView = new PromptView(promptViewOptions);

                // replace the originatingView with sliding left/right animation if it's coming from a NodesTable widget:
                if (originatingView instanceof NodesTableWidget) {

                    var _showOriginatingView,
                        $wrPrompts,
                        $originatingView = originatingView.$el,
                        ntWidthVal = $originatingView.width(),
                        ntWidth = ntWidthVal + 'px';

                    $originatingView.parent().append("<div class='wr-prompt-parameters-wrapper'></div>");
                    $wrPrompts = $($originatingView.parent().find('.wr-prompt-parameters-wrapper')[0]);
                    $wrPrompts.hide();

                    promptView.render();
                    Marionette.triggerMethodOn(promptView, 'before:show');
                    $wrPrompts.append(promptView.el);

                    $originatingView.hide('blind', {
                        direction: 'left',
                        complete: function () {
                            $wrPrompts.show('blind',
                                {
                                    direction: 'right',
                                    complete: function () {
                                        Marionette.triggerMethodOn(promptView, 'show');
                                    }
                                },
                                100);
                        }
                    }, 100);

                    $originatingView.promise().done(function () {
                        originatingView.isDisplayed = false;
                        deferred.resolve();
                    });

                    _showOriginatingView = function () {
                        $wrPrompts.hide('blind', {
                            direction: 'right',
                            complete: function () {
                                $originatingView.show('blind',
                                    {
                                        direction: 'left',
                                        complete: function () {
                                            originatingView.triggerMethod('dom:refresh');
                                            originatingView.isDisplayed = true;
                                            //reset required switch to default.
                                            !!status.collection && (status.collection.requireSwitched = false);
                                        }
                                    },
                                    100);
                                promptView.destroy();
                                $wrPrompts.remove();
                                deferred.resolve();
                            }
                        }, 100);

                    };

                    Backbone.listenTo(promptView, 'promptView:close', _.bind(_showOriginatingView, self));
                    Backbone.listenTo(promptView, 'promptView:close:without:animation', function () {
                        $originatingView.show('blind',
                            {
                                direction: 'left',
                                complete: function () {
                                    originatingView.triggerMethod('dom:refresh');

                                    //reset required switch to default.
                                    !!status.collection && (status.collection.requireSwitched = false);
                                }
                            },
                            100);
                        promptView.destroy();
                        $wrPrompts.remove();
                        deferred.resolve();
                    });

                } else {  // show PromptView in a modal dialog

                    self.dialog = new DialogView({
                        className: 'wr-prompt-parameters',
                        largeSize: true,
                        view: promptView
                    });

                    self.dialog.show();

                    // UX specs does not have header bar
                    self.dialog.ui.header.hide();
                    self.dialog.listenTo(promptView, 'promptView:close', function () {
                        self.dialog.destroy();
                        deferred.resolve();
                    });

                    self.dialog.listenTo(promptView, 'promptView:close:without:animation', function () {
                        self.dialog.destroy();
                        deferred.resolve();
                    });

                }
            }, function (error) { // error require-ing;
                deferred.reject(new CommandError(error));
            });
            return deferred.promise();
        },

        // Modified version of CommandHelper.getAtLeastOneNode:
        _getAtLeastOneNode: function (status) {
            if (!status.nodes) {
                return new NodeCollection();
            }

            if (status.nodes.length === 1 && status.collection) {
                return status.collection;
            } else {
                return status.nodes;
            }

        },

        //////////////////////////////////////
        //  end Moved from OpenWebReport cmd
        //////////////////////////////////////

        // Entry point for checking if a WR has prompt parms:
        checkForPromptParameters: function (options) {
            var showPrompts,
                promptCheckPromise,
                self = this,
                deferred = $.Deferred(),
                suppressPromptView = (options && _.has(options, 'suppressPromptView')) ? options.suppressPromptView : false;
            // default behavior is to invoke a prompt view as a modal


            this.options = options;
            this._blockParentActions();

            this.getRunWRPreModel(options)
                .done(function () {
                    showPrompts = self._checkPrompts(suppressPromptView);
                    deferred.resolve(showPrompts);
                })
                .fail(function () {
                    self._unblockParentActions();
                    self._cleanupFactory();
                    deferred.reject();
                });

            promptCheckPromise = deferred.promise();
            this.promptCheckPromise = promptCheckPromise;

            return promptCheckPromise;

        },

        getPromptCheckPromise: function(){
            return this.promptCheckPromise;
        },

        // Returns a form view for the WR that can be shown in a number of places:
        getFormView: function (options) {
            var formView,
                WRRunModel = (_.has(this, "runWRPreModel")) ? this.runWRPreModel : (_.has(options, "promptModel")) ? options.promptModel : undefined, // 2nd case is for special scenarios like test pages
                deferred = $.Deferred();

            // Check if we still don't have a model:
            if (typeof WRRunModel !== "undefined") {

                csui.require([
                    'csui/controls/form/form.view'
                ], function (FormView) {
                    // Create a FormView using the WR Prompt parameters model:
                    formView = new FormView({
                        context: options.context,
                        model: WRRunModel,
                        mode: 'create'
                    });

                    deferred.resolve(formView);

                }, function (error) {
                    deferred.reject();
                });

            } else {
                // No model to use:
                deferred.reject();
            }

            return deferred.promise();
        },

        // Invoke to actually execute the WR:
        executeWR: function (parms) {
            var executeWRCommand,
                executionMethod,
                status,
                self = this,
                options = _.extend(this.options, {
                    destinationModel: this.destinationModel
                }),
                destinationModel = this.destinationModel,
                outputDestination = destinationModel.get("output_destination");

            // Check where we need to send the user:
            executionMethod = this._checkExecutionRoute();

            if (executionMethod === "classic") {

                // Need to open the WR in classic:
                this.openInClassic(parms);
                this._unblockParentActions();

            } else {
                // Add the entered parameters into the query and make sure the originatingView is still blocked:
                if (typeof parms !== "undefined") {
                    _.extend(parms, {"prompting": "done"}); // let the server know that prompting is complete.
                    this.options.parameters = parms;

                    this._blockParentActions();
                }

                // Only execute the executeWRcommand cmd for non-smartUI destinations.
                // In non-SmartUI Destination, the WR execution is handled by the widget within the perspective.
                // Other Destinations we want to explicitly execute a WR via restAPI.
                if (outputDestination === "fullpagewidget") {
                    // For widget destinations, the widget that is loaded in the new perspective
                    // will execute the WR itself:
                    self._showOutputPerspective();
                } else {

                    executeWRCommand = new ExecuteWebReportCommand();

                    // If there's a status, it's invoked via a Command
                    // If we don't have one, make one using the nodeCollection and existing node model.
                    if (typeof this.commandStatus === "undefined") {
                        status = {
                            nodes: new NodeCollection(options.node)
                        };
                    } else {
                        status = this.commandStatus;
                    }

                    // Make sure the command is enabled:
                    if (executeWRCommand.enabled(status)) {

                        // Execute the WR so we can render the status screen:
                        executeWRCommand
                            .execute(status, this.options)
                            .done(function (results, executeModel, runInBackground) {

                                if (self.destinationModel.get("show_status_screen") === true) {
                                    self.statusScreenOptions = _.extend(self.options, {
                                        executeModel: executeModel,
                                        runInBackground: runInBackground
                                    });

                                    // Show the status screen right away:
                                    self.showStatusScreen();
                                } else {
                                    // WR is configured NOT to show the Status Screen
                                    self._unblockParentActions();
                                }
                            })
                            .fail(function () {
                                self._unblockParentActions();
                            });

                    }

                }

            }

        },

        // Opens the output in a new perspective:
        _showOutputPerspective: function () {
            var self = this,
                options = this.options,
                node = options && options.node,
                id = node && node.get("id");

            if (id) {

                // Trigger the Perspective switch to show the WebReport by setting the next node
                csui.require([
                    'csui/utils/contexts/factories/next.node',
                    'csui/utils/contexts/factories/previous.node',
                    'csui/utils/contexts/factories/node'
                ], function (NextNodeFactory, PreviousNodeFactory, NodeFactory) {

                    self.previousNode = self.options.context.getModel(PreviousNodeFactory);
                    self.nextNode = self.options.context.getModel(NextNodeFactory);
                    self.node = self.options.context.getModel(NodeFactory);

                    // Set the previousNode to the current node:
                    self.previousNode.clear({silent: true});
                    self.previousNode.set(self.node.attributes);

                    // Set the nextNode, which will trigger loading the perspective for the WebReport Node:
                    self.nextNode.clear({silent: true});
                    self.nextNode.set({id: id});

                    self._unblockParentActions();
                });
            } else {
                console.error("Unable to get node ID for WebReport");
            }

        },

        // Handoff to the classic WR opener:
        openInClassic: function (parms) {
            var status,
                OpenClassic = new OpenClassicWebReport();

            // Add the entered parameters into the query:
            if (typeof parms !== "undefined") {
                _.extend(parms, {"prompting": "done"}); // let the classic UI know that prompting is complete.
                this.options.parameters = parms;
            }

            // If there's a status, it's invoked via a Command:
            if (typeof this.commandStatus !== "undefined") {
                status = this.commandStatus;
            } else {
                // Not launched from a command, mostly hit the /output URL directly.
                // In this case, we want to open the classic URL but in the same tab:
                OpenClassic.openInNewTab = false;

                // Create a status collection using the WR node model we already have:
                status = {
                    nodes: new NodeCollection(this.options.node)
                };
            }

            // Execute the WR in classic:
            OpenClassic.execute(status, this.options);

        },

        // Gets the RunWRPre model:
        getRunWRPreModel: function (options) {
            var self = this,
                deferred = $.Deferred();

            this.runWRPreModel = this.getRunWrPreFactory(options);

            this.runWRPreModel
                .fetch()
                .done(function (data, status, jqxhr) {
                    self.destinationModel = self.runWRPreModel.destinationModel;
                    self.parametersModel = self.runWRPreModel.parametersModel;
                    deferred.resolve();
                })
                .fail(function (jqXHR, textStatus, errorThrown) {
                    deferred.reject();
                });

            return deferred.promise();
        },

        getRunWrPreFactory: function(options){
            return options.context.getModel(RunWRPreModelFactory, {
                        // If we're suppressing the prompt view then we don't want to reuse the prompt params
                        // This causes more than one widget that points to the same WebReport to sync parm views.
                        unique: true,
                        attributes: {
                            id: options.node.get("id")
                        },
                        options: {
                            id: options.node.get("id")
                        }
                    });
        },

        // Map to the additional models we need to lookup for the status screen for each destination type:
        additionalModelMap: {
            node: {
                primary: "outputData.node_id",
                secondary: "destination_data.destination_specific.create_in_id"
            },

            version: {
                primary: "destination_data.destination_specific.add_version_to_id"
                //secondary: undefined // todo:  LLWR-10682
            },

            workflow: {
                primary: "destination_data.destination_specific.workflow_map_id",
                secondary: "outputData.work_id"
            }
        },

        // Pre-populate the models required for the status screen:
        _getStatusScreenModels: function () {
            var options = this.statusScreenOptions,
                outputData = options.executeModel.get("data"),
                destination_data = outputData.destination_data,
                self = this,
                deferred = $.Deferred();

            // Get a new node model so we can show the icon/name/default action/etc:
            csui.require(["csui/utils/contexts/factories/node",
                    "workflow/models/workitem/workitem.model.factory"],
                function (NodeFactory, WorkItemModelFactory) {
                    var primaryID,
                        secondaryID,
                        primaryFactory,
                        primaryNode,
                        secondaryNode,
                        secondaryFactory,
                        promises = [],
                        target = destination_data.output_destination;

                    // If it's a node destination, is this a Version destination or a Node destination with the Add Version option?
                    if (target === "node") {
                        if (_.has(destination_data.destination_specific, "add_version_to_id")) {
                            // this is really the version destination:
                            target = "version";
                        }
                    }

                    primaryFactory = NodeFactory;
                    secondaryFactory = NodeFactory;

                    // Always get the primary node model:
                    primaryID = eval(self.additionalModelMap[target].primary);

                    // Get the right model for the corresponding Destination type:
                    if (destination_data.output_destination === 'workflow') {
                        // The WF Attachments id is returned on the WorkItem model.
                        // We use the WFMap as the node model so we can get a general WF icon, and get the workItem model so we can get the attachmentsID.
                        if (destination_data.destination_specific.workflow_attach_output === true) {
                            secondaryFactory = WorkItemModelFactory;
                            secondaryID = eval(self.additionalModelMap[target].secondary);
                        } else {
                            secondaryID = undefined;
                        }
                    } else {
                        secondaryID = eval(self.additionalModelMap[target].secondary);
                    }

                    ////////////////////////////////
                    // Get the primary model:
                    ////////////////////////////////
                    primaryNode = options.context.getModel(primaryFactory, {
                        attributes: {
                            id: primaryID
                        }
                    });

                    promises.push(primaryNode.fetch());

                    /////////////////////////////////////////
                    // Get the secondary model if needed:
                    /////////////////////////////////////////
                    if (typeof secondaryID !== "undefined") {

                        secondaryNode = options.context.getModel(secondaryFactory, {
                            attributes: {
                                id: secondaryID
                            }
                        });

                        if (destination_data.output_destination === 'workflow' && destination_data.destination_specific.workflow_attach_output === true) {

                            // For WorkItem models we have to set the attributes after, they can't be passed in during construction:
                            secondaryNode.set({
                                process_id: secondaryID,
                                subprocess_id: secondaryID,
                                task_id: 1
                            }, {
                                silent: true  // prevent any of the callbacks from running and changing the perspective
                            });
                        }

                        promises.push(secondaryNode.fetch());

                    }

                    $.whenAll.apply($, promises).then(function (results) {

                        var dataPackages,
                            attachmentsID,
                            wfAttachmentsNode;

                        options.primaryNode = primaryNode;
                        options.secondaryNode = secondaryNode;

                        if (destination_data.output_destination === "workflow" && destination_data.destination_specific.workflow_attach_output === true) {

                            // For WF Destinations where the output was attached to the WF, also look up the WF attachments model so we can get its ID:
                            if (secondaryNode.has("data_packages")) {

                                dataPackages = secondaryNode.get("data_packages");

                                if (_.isArray(dataPackages)
                                    && dataPackages.length > 0
                                    && _.has(dataPackages[0], "data")
                                    && _.has(dataPackages[0].data, "attachment_folder_id")
                                ) {

                                    attachmentsID = dataPackages[0].data.attachment_folder_id;

                                    wfAttachmentsNode = options.context.getModel(NodeFactory, {
                                        attributes: {
                                            id: attachmentsID
                                        }
                                    });

                                    wfAttachmentsNode
                                        .fetch()
                                        .then(function () {
                                            self.options.wfAttachmentsNode = wfAttachmentsNode;
                                            self._renderStatusScreen();
                                        });

                                } else {
                                    console.warn("The dataID for the Workflow Attachments is not available.");
                                    self._unblockParentActions();
                                }

                            } else {
                                console.warn("Could not get data packages from Workflow model.");
                                self._unblockParentActions();
                            }

                        } else {
                            self._renderStatusScreen();
                        }
                    });

                }, function (error) {
                    // error requiring node models:
                    self._unblockParentActions();
                }); // require

        },

        // Shows the Status Screen.
        // Checks to make sure the required models are populated before showing the Status Screen view
        _renderStatusScreen: function () {
            var dialogTitle,
                statusScreenDialog,
                statusScreenView,
                hasSecondaryNode,
                self = this,
                options = this.statusScreenOptions,
                specifics = options.destinationModel.get("destination_specific"),
                outputDestination = options.destinationModel.get("output_destination"),
                deferred = $.Deferred();

            if (outputDestination === "node") {
                // Is this Node destination with Add Version, or the Version destination?
                if (_.has(specifics, "add_version_to_id")) {
                    outputDestination = "version";
                }
            }

            dialogTitle = (options.destinationModel.get("run_in_background")) ? lang.WebReportExecutingInBackground : lang.WebReportExecutedSuccessfully;

            this._unblockParentActions();

            // Require in the status view to prevent cyclic dependencies:
            csui.require([
                    'csui/controls/dialog/dialog.view',
                    'webreports/controls/status.screen/status.screen.view'],
                function (DialogView,
                          StatusScreen) {

                    // Create the dialog view first:
                    statusScreenDialog = new DialogView({
                        title: dialogTitle,
                        buttons: [
                            {
                                label: lang.okLabel,
                                close: true,
                                click: _.bind(self._onCloseStatusScreen, self)
                            }
                        ]
                    });

                    // Create the Status Screen view, passing in the dialogView for easy access later:
                    statusScreenView = new StatusScreen(_.extend(options, {dialogView: statusScreenDialog}));

                    // Set the Status Screen view as the view for the DialogView:
                    statusScreenDialog.options.view = statusScreenView;

                    // Listen for when one of the links is clicked in the Status Screen, so we can turn off the blocking view:
                    statusScreenView.on("onClickNodeLink", _.bind(self._onCloseStatusScreen, self))
                        .on("onClickSecondaryLink", _.bind(self._onCloseStatusScreen, self));

                    // Show the DialogView:
                    statusScreenDialog.show();

                    deferred.resolve();

                },
                function () {
                    deferred.reject();
                }
            ); // end require

        },

        _onCloseStatusScreen: function () {
            this._unblockParentActions();
            this._cleanupFactory();
        },

        showStatusScreen: function () {
            var options = this.statusScreenOptions,
                rib = options.runInBackground,
                destination_data = (rib) ? options.destinationModel.toJSON() : options.executeModel.get("data").destination_data // if it's running in background, use the destination info from the runPre forms result since we don't have the actual output yet
            ;

            // Check to see if we need to get any additional models for the status screen:
            if (!rib && destination_data.output_destination in this.additionalModelMap) {
                this._getStatusScreenModels();
            } else {
                // We have all we need:
                this._renderStatusScreen();
            }
        },

        // Evaluates the destination setting and routes accordingly.
        // Used for WRs that DON'T have any prompts, but use the Browser destination:
        _checkExecutionRoute: function (parms) {

            var executionRoute,
                destinationModel = this.destinationModel;

            switch (destinationModel.get("output_destination")) {

                // browser and desktop use the classic opener:
                case "browser":
                case "desktop":
                    executionRoute = "classic";
                    break;

                default:
                    // everything else uses the status screen currently:
                    executionRoute = "smart_ui";
                    break;

            }

            return executionRoute;
        },


        // Checks the runPre model to see if the WebReport has any prompt-able parameters:
        // Returns 1 of 3 possible states:
        //			- WR has no parameters to prompt (noPrompts)
        //			- WR has parameters that are supported in the smartUI (showSmartPrompts)
        //			- WR has parameters that aren't supported in smartUI OR a custom prompt screen. (showClassicPrompts)
        _checkPrompts: function (suppressPromptView) {
            var parm,
                currentSchema,
                currentOptions,
                formSchema,
                formOptions,
                promptRoute = "noPrompts",
                parametersModel = this.parametersModel,
                promptFileId = parametersModel.get("prompt_file_id"),
                hasCustomPromptScreen = false,
                runWRPreModel = this.runWRPreModel,
                destinationModel = this.destinationModel,
                outputDestination = destinationModel.get("output_destination"),
                fullPageWidget = (outputDestination === "fullpagewidget"),
                self = this;

            if (typeof runWRPreModel !== "undefined") {

                hasCustomPromptScreen = (typeof promptFileId !== "undefined" && promptFileId !== "");

                if (hasCustomPromptScreen) {
                    // There's a custom prompt screen:
                    promptRoute = "showClassicPrompts";
                } else {
                    // No custom prompt screen, now check each parameter for compatibilty with SmartUI:
                    formSchema = runWRPreModel.get("schema");
                    formOptions = runWRPreModel.get("options");

                    if (typeof formSchema !== "undefined" && typeof formOptions !== "undefined") {

                        for (parm in formSchema.properties) {

                            if (formSchema.properties.hasOwnProperty(parm)) {

                                currentSchema = formSchema.properties[parm];
                                currentOptions = formOptions.fields[parm];

                                // Do we have any viewable prompt parms?
                                if (currentOptions.hidden === false) {

                                    // Is it a Custom parm?
                                    if (currentSchema.type === "Custom") {
                                        // There's a Custom prompt parameter, so we need to show the Classic prompt page:
                                        promptRoute = "showClassicPrompts";
                                        break;
                                    } else {
                                        // This parameter is supported in the smartUI:
                                        promptRoute = "showSmartPrompts";
                                    }
                                }

                            }

                        }

                    }

                }
            }

            if (!suppressPromptView) {
                if (fullPageWidget) {
                    this._unblockParentActions();
                    this.executeWR(this.options.parameters);
                } else {
                    switch (promptRoute) {
                        case 'showSmartPrompts':
                            // Need to show the prompt screen.
                            this.switchToPromptView(status, this.options)
                                .done(function () {
                                    self._unblockParentActions();
                                });
                            break;
                        case 'showClassicPrompts':
                            // Need to prompt in the classic UI:
                            this.openInClassic();
                            this._unblockParentActions();
                            break;
                        default:
                            // no prompts:
                            this._unblockParentActions();
                            this.executeWR(this.options.parameters);
                    }
                }
            }

            this.promptRoute = promptRoute;

            return promptRoute;
        },

        _blockParentActions: function () {
            var origView;
            if (_.has(this, "options") && _.has(this.options, "originatingView")) {
                origView = this.options.originatingView;
                origView && origView.blockActions && origView.blockActions();
                origView && origView.tableView && origView.tableView.blockActions && origView.tableView.blockActions();
            }
        },

        _unblockParentActions: function () {
            var origView;
            if (_.has(this, "options") && _.has(this.options, "originatingView")) {
                origView = this.options.originatingView;
                origView && origView.unblockActions && origView.unblockActions();
                origView && origView.tableView && origView.tableView.unblockActions && origView.tableView.unblockActions();
            }
        },

        _cleanupFactory: function () {
            var options = this.options;

            if (_.has(options, "executeModel")){
                options.executeModel.clear({silent: true});
            }
        }

    });

    _.extend(RunWebReportPreController, {version: "1.0"});

    return RunWebReportPreController;

});
csui.define('webreports/utils/contexts/factories/run.webreport.pre.controller.factory',[
    'csui/lib/underscore',
    'csui/utils/contexts/factories/factory',
    'csui/utils/contexts/factories/connector',
    'webreports/controls/run.webreport.pre/run.webreport.pre.controller'
], function (_,ObjectFactory, ConnectorFactory, RunWRPreController) {

    var RunWebReportPreControllerFactory = ObjectFactory.extend({

        // Unique prefix of the default model instance, when this model is assigned
        // to a context it can be shared by multiple widgets
        propertyPrefix: 'runwebreportprecontroller',

        constructor: function RunWebReportPreControllerFactory(context, options) {

            // Don't pass the attributes into the model:
            if (_.has(options,"attributes")){
                delete options.attributes;
            }
            if (_.has(options, this.propertyPrefix) && _.has(options[this.propertyPrefix], "attributes")){
                delete options[this.propertyPrefix].attributes;
            }

            ObjectFactory.prototype.constructor.apply(this, arguments);

            // Obtain the server connector from the application context to share
            // the server connection with the rest of the application; include
            // the options, which can contain settings for dependent factories
            var connector = context.getObject(ConnectorFactory, options),
                modelOptions = _.extend( options.options, {
                    connector: connector
                });

            // Expose the model instance in the `property` key on this factory
            // instance to be used by the context
            this.property = new RunWRPreController( {}, modelOptions );
        }

    });

    return RunWebReportPreControllerFactory;

});

/* START_TEMPLATE */
csui.define('hbs!webreports/controls/parameter.prompt/impl/parameter.prompt.footer',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <button type=\"button\" class=\"binf-btn binf-btn-primary csui-acc-tab-region csui-acc-focusable-active cancelPrompt\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"cancel") || (depth0 != null ? lookupProperty(depth0,"cancel") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"cancel","hash":{},"loc":{"start":{"line":2,"column":119},"end":{"line":2,"column":129}}}) : helper)))
    + "</button>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"showCancelButton") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"loc":{"start":{"line":1,"column":0},"end":{"line":3,"column":7}}})) != null ? stack1 : "")
    + "    <button type=\"button\" class=\"binf-btn binf-btn-primary csui-acc-tab-region csui-acc-focusable-active submitPrompt\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"runReport") || (depth0 != null ? lookupProperty(depth0,"runReport") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"runReport","hash":{},"loc":{"start":{"line":4,"column":119},"end":{"line":4,"column":132}}}) : helper)))
    + "</button>";
}});
Handlebars.registerPartial('webreports_controls_parameter.prompt_impl_parameter.prompt.footer', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('webreports/controls/parameter.prompt/impl/nls/parameter.prompt.lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

csui.define('webreports/controls/parameter.prompt/impl/nls/root/parameter.prompt.lang',{
    runReport: 'Run WebReport',
    cancel: 'Cancel',
    noFormFields: 'There are no parameter fields to show.',
    defaultPromptTitle: 'WebReport Parameters',
    ariaLabel: 'WebReport Parameters'
});



csui.define('css!webreports/controls/parameter.prompt/impl/parameter.prompt',[],function(){});
csui.define('webreports/controls/parameter.prompt/impl/parameter.prompt.footer.view',[
    'csui/lib/underscore',
    'csui/lib/jquery',
    'csui/lib/marionette3',
    'hbs!webreports/controls/parameter.prompt/impl/parameter.prompt.footer',
    'i18n!webreports/controls/parameter.prompt/impl/nls/parameter.prompt.lang',
    'css!webreports/controls/parameter.prompt/impl/parameter.prompt'
], function(_, $, Marionette, template, lang){
    'use strict';

    var ParameterPromptFooterView = Marionette.View.extend({

        className: 'webreports-parameter-prompt-footer',

        template: template,

        templateContext: function () {
            var options = this.options || {};
            return {
                showCancelButton: options.showCancelButton,
                cancel: lang.cancel,
                runReport: lang.runReport
            };
        },

        ui: {
            submitPrompt: '.binf-btn.binf-btn-primary.submitPrompt',
            cancelPrompt: '.binf-btn.binf-btn-primary.cancelPrompt'
        },

        events: {
            'click @ui.submitPrompt': 'submitPrompt',
            'click @ui.cancelPrompt': 'cancelPrompt'
        },

        constructor: function ParameterPromptFooterView(options) {

            Marionette.View.prototype.constructor.call(this, options);

        },

        submitPrompt: function() {

            var options = this.options,
                originatingView = options.parentView.options.originatingView,
                formView = options.parentView.getChildView('promptForm'),
                formValues = (formView) ? formView.getValues() : {},
                eventArgs = {
                    view: options.parentView,
                    formValues: formValues
                };

            if (formView && formView.validate()){
                if (originatingView) {
                    originatingView.trigger('prompt:form:submitted', eventArgs);
                }
                else {
                    this.trigger('prompt:form:submitted', eventArgs);
                }
            }
        },

        cancelPrompt: function() {
            var options = this.options;

            if (options && options.originatingView) {
                options.originatingView.trigger('prompt:form:cancelled');
            }
            else {
                this.trigger('prompt:form:cancelled');
            }
        }
    });

    return ParameterPromptFooterView;

});

/* START_TEMPLATE */
csui.define('hbs!webreports/controls/parameter.prompt/impl/parameter.prompt',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"webreports-parameter-prompt-form-wrapper\">\r\n    <div class=\"webreports-parameter-prompt-form\"></div>\r\n</div>\r\n<div class=\"webreports-parameter-prompt-footer\"></div>";
}});
Handlebars.registerPartial('webreports_controls_parameter.prompt_impl_parameter.prompt', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('webreports/controls/parameter.prompt/parameter.prompt.view',[
    'csui/lib/underscore',
    'csui/lib/marionette3',
    'csui/controls/tile/behaviors/perfect.scrolling.behavior',
    'csui/controls/form/form.view',
    'webreports/controls/parameter.prompt/impl/parameter.prompt.footer.view',
    'hbs!webreports/controls/parameter.prompt/impl/parameter.prompt',
    'i18n!webreports/controls/parameter.prompt/impl/nls/parameter.prompt.lang',
    'css!webreports/controls/parameter.prompt/impl/parameter.prompt'
], function(_, Marionette, PerfectScrollingBehavior, FormView, FooterView, template, lang) {
    'use strict';

    var ParameterPromptView = Marionette.View.extend({

        className: 'webreports-parameter-prompt-content',

        template: template,

        wrapTemplate: false,

        regions: {
            promptForm: {
                el: '.webreports-parameter-prompt-form',
                replaceElement: false
            },
            footer: {
                el: '.webreports-parameter-prompt-footer',
                replaceElement: true
            }
        },

        behaviors: {
            PerfectScrolling: {
                behaviorClass: PerfectScrollingBehavior,
                contentParent: '.webreports-parameter-prompt-form-wrapper',
                suppressScrollX: true,
                // like bottom padding of container, otherwise scrollbar is shown always
                scrollYMarginOffset: 15
            }
        },

        constructor: function ParameterPromptView(options) {

            Marionette.View.prototype.constructor.call(this, options);

        },

        onRender: function() {
            var options = this.options,
                errorWithForm = (options.promptRoute !== 'showSmartPrompts'),
                formView = new FormView({
                    context: options.context,
                    model: this.model
                }),
                footerView = new FooterView({
                    context: options.context,
                    parentView: this,
                    model: this.model
                }),
                errorView = new Marionette.View({
                    template: false,
                    el: '<div class="csui-no-result-message">' + lang.noFormFields + '</div>'
                }),
                contentView = (errorWithForm) ? errorView : formView;

            this.showChildView('promptForm', contentView);

            if (!errorWithForm){
                this.showChildView('footer', footerView);
            }

        }

    });

    return ParameterPromptView;

});

/* START_TEMPLATE */
csui.define('hbs!webreports/controls/parameter.prompt/impl/parameter.prompt.tile.view',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <div class=\"tile-type-icon\">\r\n            <span class=\"icon title-icon "
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"icon") || (depth0 != null ? lookupProperty(depth0,"icon") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"icon","hash":{},"loc":{"start":{"line":5,"column":41},"end":{"line":5,"column":49}}}) : helper)))
    + "\" aria-hidden=\"true\"></span>\r\n        </div>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"imageUrl") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"loc":{"start":{"line":8,"column":8},"end":{"line":12,"column":15}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"tile-type-image "
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"imageClass") || (depth0 != null ? lookupProperty(depth0,"imageClass") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageClass","hash":{},"loc":{"start":{"line":9,"column":40},"end":{"line":9,"column":54}}}) : helper)))
    + "\">\r\n                <span class=\"tile-type-icon tile-type-icon-img\"><img src=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"imageUrl") || (depth0 != null ? lookupProperty(depth0,"imageUrl") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageUrl","hash":{},"loc":{"start":{"line":10,"column":74},"end":{"line":10,"column":86}}}) : helper)))
    + "\" alt=\"\" aria-hidden=\"true\"></span>\r\n            </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"tile-header\">\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"icon") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"loc":{"start":{"line":3,"column":4},"end":{"line":13,"column":11}}})) != null ? stack1 : "")
    + "\r\n    <div class=\"tile-title\" >\r\n        <h2 class=\"csui-heading\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"title","hash":{},"loc":{"start":{"line":16,"column":33},"end":{"line":16,"column":42}}}) : helper)))
    + "</h2>\r\n    </div>\r\n\r\n    <div class=\"tile-controls\" title=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"title","hash":{},"loc":{"start":{"line":19,"column":38},"end":{"line":19,"column":47}}}) : helper)))
    + "\"></div>\r\n\r\n</div>\r\n\r\n<div class=\"tile-content\"></div>\r\n\r\n<div class=\"tile-footer\"></div>\r\n";
}});
Handlebars.registerPartial('webreports_controls_parameter.prompt_impl_parameter.prompt.tile.view', t);
return t;
});
/* END_TEMPLATE */
;
// this is a simply wrapper that utilises the tile view (mainly for the header), without imposing the tile structure on the parameter prompt view itself
csui.define('webreports/controls/parameter.prompt/parameter.prompt.tile.view',[
    'csui/lib/underscore',
    'csui/lib/jquery',
    'csui/utils/base',
    'csui/controls/tile/tile.view',
    'webreports/controls/parameter.prompt/parameter.prompt.view',
    'hbs!webreports/controls/parameter.prompt/impl/parameter.prompt.tile.view',
    'i18n!webreports/controls/parameter.prompt/impl/nls/parameter.prompt.lang'
], function(_, $, base, TileView, ParameterPromptView, template, lang) {
    'use strict';

    var ParameterPromptTileView = TileView.extend({

        templateHelpers: function() {

            var options = this.options,
                originatingViewOptions = (options && _.has(options,'originatingView') && _.has(options.originatingView,'options')) ? options.originatingView.options : false,
                titleObj = (originatingViewOptions && _.has(originatingViewOptions,'data') && _.has(originatingViewOptions.data,'title') && _.isObject(originatingViewOptions.data.title)) ? originatingViewOptions.data.title : lang.defaultPromptTitle,
                iconClass = (originatingViewOptions && _.has(originatingViewOptions,'data') && _.has(originatingViewOptions.data,'titleBarIcon')) ? originatingViewOptions.data.titleBarIcon : 'title-webreports',
                helpers = {
                    title: base.getClosestLocalizedString(titleObj, lang.dialogTitle),
                    icon: iconClass || 'title-webreports'
                };

            return helpers;
        },

        template: template,

        contentView: ParameterPromptView,

        constructor: function ParameterPromptTileView(options) {

            this.contentViewOptions = options;

            TileView.prototype.constructor.call(this, options);

        }

    });

    return ParameterPromptTileView;

});

/* START_TEMPLATE */
csui.define('hbs!webreports/controls/parameter.prompt/impl/widget.prompt.wrapper',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"webreports-widget-prompt-wrapper-content\"></div>";
}});
Handlebars.registerPartial('webreports_controls_parameter.prompt_impl_widget.prompt.wrapper', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('webreports/controls/parameter.prompt/widget.prompt.wrapper.view',[
    'csui/lib/underscore',
    'csui/lib/marionette3',
    'csui/lib/backbone',
    'csui/lib/jquery',
    'csui/models/node/node.model',
    'csui/controls/progressblocker/blocker',
    'csui/controls/mixins/view.events.propagation/view.events.propagation.mixin',
    'webreports/utils/general.utils',
    'webreports/utils/url.webreports',
    'webreports/mixins/webreports.view.mixin',
    'webreports/utils/contexts/factories/run.webreport.pre.controller.factory',
    'webreports/controls/parameter.prompt/parameter.prompt.tile.view',
    'hbs!webreports/controls/parameter.prompt/impl/widget.prompt.wrapper'
], function(_,
            Marionette,
            Backbone,
            $,
            NodeModel,
            BlockingView,
            ViewEventsPropagationMixin,
            generalUtils,
            UrlWebreports,
            WebReportsViewMixin,
            RunWrPreControllerFactory,
            ParameterPromptTileView,
            template) {

    var WidgetPromptWrapperView = Marionette.View.extend({

        template: template,

        wrapTemplate: false,

        regions: {
            content: {
                el: '.webreports-widget-prompt-wrapper-content',
                replaceElement: true
            }
        },

        ui: {
            showParametersBtn: '.webreports-visual-count-btn-parameters',
            tileHeader: '.tile-header'
        },

        events: {
            'click @ui.showParametersBtn': 'onShowParameterPromptView',
            'keyup @ui.showParametersBtn': 'onShowParameterPromptView',
            'keydown .cs-go-back': 'onKeyInView',
            'click .cs-go-back': 'onBackButton'
        },

        constructor: function WidgetPromptWrapperView(options) {
            var promptOptions,
                node,
                thisView = this,
                showPrompt = (options.data.parameterPrompt === 'showPromptForm' ||
                                (options.data.outputDestination && options.data.outputDestination === "fullpagewidget"));

            this.showPrompt = showPrompt;
            this.widgetView = options.view;

            if (showPrompt) {

                node = new NodeModel({
                    id: options.data.id,
                    type: 30303 // webreport
                });

                promptOptions = {
                    node: node,
                    context: options.context,
                    suppressPromptView: true,
                    originatingView: this
                };

                var getPromptView = this._getPromptView(promptOptions, options);

                getPromptView
                    .done(function (options) {
                        if (options) {
                            thisView.promptOptions = options;
                            thisView.listenTo(thisView, 'prompt:form:submitted', thisView.onPromptFormSubmitted);
                            thisView._showParameterPromptView();
                        }
                        else {
                            thisView._showWidgetView();
                            thisView._fetchWidgetFactory();
                        }
                    })
                    .fail(function(options){
                        // Render the prompt view so the header and error message can be shown to the user.
                        thisView.promptOptions = options;
                        thisView._showParameterPromptView();
                    });
            }

            Marionette.View.prototype.constructor.apply(this, arguments);

            this.listenTo(this, "factory:fetched:after:prompt", this._showParameterBtn);
        },

        templateContext: function() {
            return {
                showPrompt: this.showPrompt
            };
        },

        onShowParameterPromptView: function(event) {
            if (event.type === "click" || (event.type === "keyup" && (event.keyCode === 13 || event.keyCode === 32))) {
                event.stopPropagation();
                this.trigger('edit:prompt:clicked');
                this._showParameterPromptView();
            }
            return false;
        },

        _showParameterPromptView: function() {
            var parameterPromptTileView,
                promptOptions = this.promptOptions;

            if (promptOptions) {
                if (_.has(promptOptions.originatingView,'formValues')) {
                    promptOptions.model.set({data: promptOptions.originatingView.formValues});
                }
                parameterPromptTileView = new ParameterPromptTileView(promptOptions);

                this.showChildView('content', parameterPromptTileView);

                // Make sure events are propagated.
                // One component that needs this is the perfect scrolling.

                this.propagateEventsToViews(parameterPromptTileView);
            }
        },

        _createWidgetView: function(){
            var ContentView = this.widgetView,
                contentOptions;

            contentOptions = _.extend(this.options,{
                originatingView: this
            });

            return new ContentView(contentOptions);
        },

        _showWidgetView: function() {
            var contentView = this._createWidgetView();

            this.showChildView('content', contentView);

            // This is needed because we're deferring the main widget view creation.
            // Some widgets like the Visual Count need the dom refresh event to
            // be propagated down so the chart control renders correctly.

            this.propagateEventsToViews(contentView);
        },

        _fetchWidgetFactory: function() {
            var factoryFetchPromise,
                factory = this.getContentViewFactory();

            if (factory){
                factoryFetchPromise = factory.fetch();
            } else {
                console.error("Could not find the factory for widget.");
            }
            return factoryFetchPromise;
        },

        getContentViewFactory: function(){
            var factory,
                contentView = this.getChildView("content");

            if (contentView){
                factory = contentView.getFactory();
            }

            return factory;
        },

        _getPromptView: function(promptOptions, options) {
            var isWebReportNodeContext = generalUtils.isWebReportNodeContext(options.context),
                factoryOptions = {
                    detached: true,
                    unique: !isWebReportNodeContext,
                    attributes: {
                        id: promptOptions.node.get("id")
                    },
                    options: {
                        id: promptOptions.node.get("id")
                    }
                },
                runWRController = options.context.getObject(RunWrPreControllerFactory, factoryOptions),
                // If this is via a full page widget run we may already have called checkForPromptParameters
                promptParameters = runWRController.getPromptCheckPromise(),
                deferred = $.Deferred();

            if (promptParameters && isWebReportNodeContext){
                // Make sure prompt parameters are passed onto other SubWebReports when running a WebReport with "fullpagewidget" destination
                if (options && options.data && !options.data.parameters){
                    options.data.parameters = [];
                }
                _.extend(options.data.parameters, UrlWebreports.getDataAsWebReportParameters(runWRController.options.parameters));
            } else {
                promptParameters = runWRController.checkForPromptParameters(promptOptions);
            }

            promptOptions.model = runWRController.runWRPreModel;

            $.when(promptParameters).then(function(promptRoute) {

                if (promptRoute === 'showSmartPrompts') {

                    promptOptions.promptRoute = promptRoute;

                    // If the option to show prompt is missing add it here.
                    // This is missing for full page destinations but this setting
                    // is needed to show the edit pencil for the prompt form.

                    options.data.parameterPrompt = "showPromptForm";

                    deferred.resolve(promptOptions);
                }
                else {
                    deferred.resolve();
                }

            }, function(){
                deferred.reject(promptOptions);
            });

            return deferred.promise();
        },

        _mergeParametersIntoOptions: function(eventArgs) {
            var options = this.options || {};

            // Null form values for Integers seem to be set to NaN by the csui FormView and FormModel
            // Adding workaround here to set back to null.
            this.formValues = _.mapObject(eventArgs.formValues, function(val, key){
                if (_.isNaN(val)){
                    val = null;
                }
                return val;
            });

            options.data.parameters = (_.has(options,'data') && _.has(options.data,'parameters') && _.isArray(options.data.parameters)) ? options.data.parameters : [];
            _.extend(options.data.parameters, UrlWebreports.getDataAsWebReportParameters(this.formValues));
        },

        _showParameterBtn: function(){
            var editParameterBtn = this.$el.find(".webreports-widget-parameters-btn.binf-hidden");

            if (editParameterBtn){
                editParameterBtn.removeClass("binf-hidden");
            }
        },

        onPromptFormSubmitted: function (eventArgs) {
            this._mergeParametersIntoOptions(eventArgs);
            this._showWidgetView();
            var promise = this._fetchWidgetFactory();
            this.trigger("factory:fetched:after:prompt", {
                promise: promise
            });
        },

        onRender: function() {
            if (this.showPrompt) {
                this._showParameterPromptView();
            } else {
                this._showWidgetView();
            }
        },

        onKeyInView: function (event) {
            if (event.keyCode === 32 || event.keyCode === 13) {
                this.onBackButton();
            }
        },

        onBackButton: function() {
            var context = this.options.context,
                viewStateModel = context && context.viewStateModel;
            if (viewStateModel) {
                viewStateModel.restoreLastFragment();
            }
        }

    });

    // Add the mixin functionality to the target view
    WebReportsViewMixin.mixin(WidgetPromptWrapperView.prototype);
    _.extend(WidgetPromptWrapperView.prototype, ViewEventsPropagationMixin);

    return WidgetPromptWrapperView;

});
csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/expanding.behavior',['require', 'csui/lib/jquery', 'csui/lib/underscore', 'csui/lib/backbone', 'csui/lib/marionette', // Third party libraries
    'csui/controls/tile/behaviors/expanding.behavior'
], function (require, $, _, Backbone, Marionette, TileExpandingBehavior) {
    "use strict";

    var VisualDataExpandingBehavior = TileExpandingBehavior.extend({

        triggers: {
            'click .cs-more': 'expand'
        },

        _expand: function () {
            if (this.view && this.view.chartCollection && !this.view.chartCollection.isEmpty()) {
                var expandedViewValue = this.getOption('expandedView'),
                    expandedViewClass = expandedViewValue.prototype instanceof Backbone.View ?
                        expandedViewValue : expandedViewValue.call(this.view),
                    requiredModules = ['csui/controls/dialog/dialog.view'],
                    self = this;
                if (_.isString(expandedViewClass)) {
                    requiredModules.push(expandedViewClass);
                }
                require(requiredModules, function (DialogView) {
                    if (_.isString(expandedViewClass)) {
                        expandedViewClass = arguments[1];
                    }
                    var expandedViewOptions = getOption.call(self, 'expandedViewOptions'),
                        expandedView = new expandedViewClass(expandedViewOptions);

                    self._dialog = new DialogView({
                        iconLeft: getOption.call(self, 'titleBarIcon'),
                        imageLeftUrl: getOption.call(self, 'titleBarImageUrl'),
                        imageLeftClass: getOption.call(self, 'titleBarImageClass'),
                        title: getOption.call(self, 'dialogTitle'),
                        iconRight: getOption.call(self, 'dialogTitleIconRight'),
                        className: 'cs-expanded ' + (getOption.call(self, 'dialogClassName') || ''),
                        buttons: expandedViewOptions.buttons,
                        largeSize: true,
                        view: expandedView
                    });
                    self.listenTo(self._dialog, 'hide', function () {
                        self.view.trigger("collapse");
                        self.triggerMethod('collapse');
                    });
                    // Destroy the overlay view if its still open on expand.
                    if (self.view.overlayVisible) {
                        self.view.ui.toggleSettings.trigger('click');
                    }
                    self._dialog.show();

                    //Force set the facet checkbox elements to tabindex=-1 to allow keyboard navigation (facet panel remains accessible if the header element is activated)
                    $('.webreports-visual-count-facetpanelview .cs-content .csui-facet-item-checkbox button', '.webreports-visual-data.binf-modal .binf-modal-content')
                    .attr('tabindex', '-1');
                });
            }
        }

    });

    function getOption(property) {
        var options = this.options || {};
        var value = options[property];
        return _.isFunction(value) ? options[property].call(this.view) : value;
    }

    return VisualDataExpandingBehavior;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count.button.view',['csui/lib/marionette3',
        'csui/lib/underscore',
        'csui/behaviors/keyboard.navigation/tabable.region.behavior'
], function (Marionette, _, TabableRegion) {

    var VisualCountButtonView = Marionette.View.extend({

        tagName: 'button',

        className: 'binf-btn',

        template: _.noop,

        triggers: {
            'click': 'click:button'
        },

        behaviors: {
            TabableRegion: {
                behaviorClass: TabableRegion
            }
        },

        constructor: function VisualCountButtonView(options) {
            Marionette.View.prototype.constructor.apply(this, arguments);
        },

        isTabable: function () {
            if (this.$el.attr('tabindex') === '-1') {
                this.$el.attr('tabindex', '0')
            }
            return this.$el.is(':not(:disabled)') && this.$el.is(':not(:hidden)');
        },
        currentlyFocusedElement: function () {
            if (this.$el.prop('tabindex') === -1) {
                this.$el.prop('tabindex', 0);
            }
            return this.$el;
        },

        onRender: function () {
            var button     = this.$el,
                attributes = this.model.attributes;
            button.text(attributes.name);
            button.addClass(
                attributes['default'] ? 'binf-btn-primary cs-add-button' : 'binf-btn-default');
            if (attributes.toolTip) {
                button.attr('title', attributes.toolTip);
            }
            if (attributes.id) {
                button.attr('id', attributes.id);
            }
            if (attributes.separate) {
                button.addClass('cs-separate');
            }
            this.updateButton(attributes);
        },

        updateButton: function (attributes) {

            var $button = this.$el;
            attributes || (attributes = {});
            if (attributes.hidden !== undefined) {
                if (attributes.hidden) {
                    $button.addClass('binf-hidden');
                } else {
                    $button.removeClass('binf-hidden');
                }
            }
            if (attributes.disabled !== undefined) {
                $button.prop('disabled', attributes.disabled);
            }
        }

    });

    return VisualCountButtonView;
});


/* START_TEMPLATE */
csui.define('hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"webreports-visual-count\">\r\n    <div class=\"webreports-visual-count-facet-table-container\">\r\n        <div class=\"webreports-visual-count-facetpanelview\"></div>\r\n        <!--outer div is needed in order to float table contents right to accommodate  facets-->\r\n        <div class=\"webreports-visual-count-outertablecontainer\">\r\n            <!--inner div is needed in order to have tableview sized to remaining height of container-->\r\n            <div class=\"webreports-visual-count-innertablecontainer\">\r\n                <div class=\"webreports-visual-count-facetbarview\"></div>\r\n                <div class=\"webreports-visual-count-controls-parent\"></div>\r\n                <div class=\"webreports-visual-count-chart\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"webreports-visual-count-footer\"></div>\r\n</div>\r\n";
}});
Handlebars.registerPartial('webreports_widgets_visual.data.filtered.count_impl_controls_visual.count_impl_visual.count', t);
return t;
});
/* END_TEMPLATE */
;

csui.define('css!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count',[],function(){});
csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count.footer.view',['csui/lib/marionette3',
        'csui/lib/backbone',
        'csui/lib/underscore',
        'csui/utils/commands',
        'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count.button.view',
        'hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count',
        'css!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count'
], function (Marionette, Backbone, _, commands, VisualCountButtonView, template){

    var VisualCountFooterView = Marionette.CollectionView.extend({

        className: 'webreports-visual-count-footer binf-modal-footer',

        template: template,

        childView: VisualCountButtonView,

        constructor: function VisualCountFooterView(options) {
            this.collection = this._createCommandCollection(options);
            Marionette.CollectionView.prototype.constructor.apply(this, arguments);
        },

        _createCommandCollection: function(options){
            var commandCollection,
                toolbarItems = options.toolbarItems;

            if (toolbarItems && _.has(toolbarItems, "footer")){
                commandCollection = toolbarItems.footer.collection;
                if (commandCollection){
                    var disabledToolItem = commandCollection.findWhere({signature: 'disabled'});
                    if (disabledToolItem){
                        commandCollection.remove(disabledToolItem);
                    }
                }
            } else {
                commandCollection = new Backbone.Collection();
            }

            return commandCollection;
        },

        onChildviewClickButton: function(childView) {
            var options = this.options,
                originatingView = options.originatingView;

            if (originatingView){
                originatingView.trigger("button:clicked", childView, options);
            } else {
                throw 'VisualCountView requires an originatingView if buttons are used';
            }
        }

    });

    return VisualCountFooterView;

});

// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/client.collection/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/client.collection/nls/root/lang',{
    other: 'Other',
    noValue: '(No value)'
});


csui.define('webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/client.collection/chart.collection.client.mixin',['csui/lib/underscore',
        'csui/lib/d3',
        'i18n!webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/client.collection/nls/lang'
], function (_,
             d3,
             lang) {
    "use strict";

    var VisualCountClientCollectionMixin = {

        mixin: function (prototype) {
            return _.extend(prototype, {

                nest: function(dataset,activeColumn) {
                    // for providing a count of 'values' (col 1) where 'key' (col n) = activeColumn

                    var nestedData = [],
                        index,
                        key,
                        count,
                        initialNestedItem = {},
                        nestedItem = {},
                        countColumn = this.columnCollection.getCountColumn(),
                        activeColumnFormatted = activeColumn + "_formatted",
                        countColumnFormatted = countColumn + "_formatted";

                    _.each(dataset, _.bind(function(row){

                        key = this._removeEmptyValues(row[activeColumn]);
                        // Check if the current value in the Active Column has already been counted
                        // and added to nestedData
                        index = _.findIndex(nestedData, function(nestedRow){
                            return nestedRow[activeColumn] === key;
                        });

                        // If this is a new value, add it to the nestedData, otherwise increment the count of the existing object
                        if (index === -1){
                            initialNestedItem[activeColumn] = key;
                            initialNestedItem[activeColumnFormatted] = key.toString();
                            initialNestedItem[countColumn] = 1;
                            initialNestedItem[countColumnFormatted] = "1";
                            nestedData.push(initialNestedItem);
                            initialNestedItem = {};
                        } else {
                            nestedItem = nestedData[index];
                            count = nestedItem[countColumn];
                            count = count + 1;
                            nestedItem[countColumn] = count;
                            nestedItem[countColumnFormatted] = count.toString();
                            nestedData[index] = nestedItem;
                        }

                    },this));

                    return nestedData;
                },

                filterBy: function(dataset,filters) {
                    // returns a reduced dataset where activeColumn value == filterBy
                    // filters is an array of objects: e.g. [{column: 'habitat',value: 'jungle'},{column: 'legs',value: 4 }] will likely return leopards but not chickens

                    var column = null,
                        value = null,
                        operator = null;

                    function dataFiltered(d) {
                        var filtered,
                            currentValue = this._removeEmptyValues(d[column]);
                        switch(operator) {
                            case '==':
                                filtered = currentValue === value;
                                break;
                            case 'IN':
                                filtered = (value.indexOf(currentValue) !== -1);
                                break;
                            default:
                                filtered = (value.indexOf(currentValue) !== -1);
                        }

                        return filtered;
                    }

                    _.each(filters,_.bind(function(item) {
                        // iterates through each of the objects in the filters array, returning a new dataset of rows where the filter is true
                        value = this._removeEmptyValues(item.value);
                        column = item.column;
                        operator = item.operator;
                        dataset = dataset.filter(_.bind(dataFiltered, this));
                    }, this));

                    return dataset;
                },

                sortNest: function(dataset,sortOptions) {
                    // sorts data that has been nested by this.nest
                    var activeColumn = this.columnCollection.getActiveColumn(),
                        countColumn = this.columnCollection.getCountColumn(),
                        sorted = [],
                        sortBy,
                        sortDir;

                    sortBy = sortOptions.sortBy;
                    sortDir = sortOptions.sortOrder;

                    dataset = dataset.sort(function(a,b) {
                        switch (sortBy.toLowerCase()) {
                            case 'ordinal':
                                if (isNaN(a[activeColumn])) {
                                    // sort alpha values
                                    sorted = d3.ascending(a[activeColumn],b[activeColumn]);
                                }
                                else {
                                    sorted = a[activeColumn] - b[activeColumn];
                                }
                                break;
                            case 'count':
                                sorted = a[countColumn] - b[countColumn];
                                break;
                            default:
                            // nothing
                        }
                        return sorted;
                    });
                    return (sortDir === 'asc') ? dataset : dataset.reverse();
                },

                groupOutlyingValues: function(dataset,maxItems) {
                    // returns a new dataset where any values lower than the top n are grouped into 'other'
                    // dataset must be sorted first
                    if (dataset.length > maxItems+1 && maxItems > -1) { // only sensible to group values if there are more than 2 of them
                        var activeColumn = this.columnCollection.getActiveColumn(),
                            countColumn = this.columnCollection.getCountColumn(),
                            d1 = dataset.slice(0,maxItems),
                            d2 = dataset.slice(maxItems),
                            oValue = _.pluck(d2,countColumn),
                            oTotal = _.reduce(oValue,function(memo,item) {
                                return memo + item;
                            },0),
                            others = {};

                        others[activeColumn] = "ga_other";
                        others[activeColumn + "_formatted"] = lang.other;
                        others[countColumn] = oTotal;
                        others[countColumn + "_formatted"] = oTotal.toString();

                        d1.push(others);
                        return d1;
                    }
                    else {
                        return dataset;
                    }
                },

                _removeEmptyValues: function(value){
                    return (value === null ||value === "" || value === undefined) ? lang.noValue :value;
                }

            });
        }

    };

    return VisualCountClientCollectionMixin;

});

// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/filterable/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/filterable/nls/root/lang',{
    other: 'Other'
});


csui.define('webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/filterable/filterable.mixin',['csui/lib/underscore',
    'csui/lib/backbone',
    'csui/models/facets',
    'csui/models/facettopics',
    'webreports/utils/general.utils',
    'i18n!webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/filterable/nls/lang'
], function (_,
             Backbone,
             FacetCollection,
             FacetTopicCollection,
             generalUtils,
             lang) {
    "use strict";

    var VisualCountFilterableMixin = {

        mixin: function (prototype) {
            return _.extend(prototype, {

                makeFilterable: function () {
                    this.facetCollection = new FacetCollection();
                    this.facetCollection.filters = [];
                },

                setFacetData: function (filteredData) {
                    var availableValues = [],
                        facets = this.columnCollection.toJSON(),
                        activeColumn = _.findWhere(facets, {active_column: true}),
                        activeColumnName = activeColumn.name,
                        facetModel = this.facetCollection.findWhere({id: activeColumn.id}),
                        facetModelInCollection = !_.isUndefined(facetModel),
                        filterStillApplied = !_.isUndefined(_.findWhere(this.facetCollection.filters, {id: activeColumn.id})),
                        countColumn = this.columnCollection.getCountColumn(),
                        activeFacet = {},
                        facetObj = {};

                    if (!facetModelInCollection || (facetModelInCollection && !filterStillApplied)) {

                        activeFacet[activeColumn.id] = _.map(filteredData, _.bind(function (groupedItem) {
                            var activeColumnFormattedValue = generalUtils.getCaseInsensitiveProperty(groupedItem, activeColumn.name + "_formatted"),
                                activeColumnValue = generalUtils.getCaseInsensitiveProperty(groupedItem, activeColumnName);

                            return {
                                name: activeColumnFormattedValue || activeColumnValue,
                                value: (activeColumnValue === null) ? "" : activeColumnValue.toString(),
                                valueNative: activeColumnValue,
                                total: groupedItem[countColumn],
                                percentage: this.getPercentageOfTotal(groupedItem[countColumn])
                            };
                        }, this));

                        activeFacet[activeColumn.id] = _.reject(activeFacet[activeColumn.id], function (facet) {
                            return facet.name === lang.other;
                        });

                        availableValues[0] = activeFacet;

                        _.each(facets, function (facet) {
                            facetObj[facet.id] = facet;
                        });

                        _.each(availableValues, _.bind(function (item) {
                            // topics are nested by the facet id as the single key property
                            var id = _.keys(item)[0],
                                topics = item[id] || [],
                                object = {};

                            object[id] = facetObj[id];
                            facetObj[id].name = facetObj[id].name_formatted;

                            facetModel = new Backbone.Model(facetObj[id]);
                            facetModel.topics = new FacetTopicCollection(topics);
                            facetModel.set({
                                "topics": topics,
                                "total_displayable": topics.length,
                                "items_to_show": 10
                            });
                        }, this));
                    }

                    facetModel = this._setAsSelected(facetModel);
                    facetModel.topics.reset(facetModel.get("topics"));

                    if (this.facetCollection) {
                        var otherFilteredFacets = this._getOtherFilteredFacets();

                        otherFilteredFacets.push(facetModel);

                        this.facetCollection.reset(otherFilteredFacets);
                    } else {
                        this.makeFilterable();
                    }
                },

                // Gets the filters returned from the Filtered Count API
                getFCFilters: function () {
                    return this.unMapFilterData();
                },

                // Gets the filters formatted for use with the Facet panel
                getFacetFilters: function () {
                    return this.facetCollection.filters;
                },

                // Sets the filters formatted for use with the Facet panel
                setFacetFilters: function (filters) {
                    filters = filters || [];

                    if (!this.facetCollection.filters) {
                        this.facetCollection.filters = this.mapFilterData(filters);
                        this.facetCollection.trigger('reset');
                    }
                },

                // Convert filters to format expected by facet.bar.view.
                mapFilterData: function (filters) {
                    return _.map(filters, function (filtersToMap) {
                            return {
                                id: filtersToMap.column.toString(),
                                values: [{id: filtersToMap.value.toString()}]
                            };
                        }
                    );
                },

                // Convert filters to format expected by server.
                unMapFilterData: function () {
                    var fcFilters = [],
                        self = this,
                        filters = this.getFacetFilters();

                    if (filters.length > 0) {

                        _.each(filters, function (filter) {
                            var columnModel = self.columnCollection.findWhere({id: filter.id}),
                                values = _.map(filter.values, function (value) {
                                    return value.id;
                                });

                            values = self.resolveToActualValues(filter.id, values);

                            var unMappedFilter = {
                                column: columnModel.get("name"),
                                operator: 'IN',
                                value: values
                            };
                            fcFilters.push(unMappedFilter);
                        });
                    }

                    return fcFilters;
                },

                getTotalCount: function () {
                    var filteredData = this.filteredData,
                        countColumn = this.columnCollection.getCountColumn();

                    return _.reduce(filteredData, function (memo, value) {
                        return memo + value[countColumn];
                    }, 0);
                },

                getPercentageOfTotal: function (value) {
                    return ((value / this.getTotalCount()) * 100);
                },

                getActualColumnName: function (formattedColumnName) {
                    var actualColumnName = formattedColumnName,
                        columnCollection = this.columnCollection,
                        columnModel = columnCollection.findWhere({name_formatted: formattedColumnName});

                    if (columnModel && (columnModel.get("name") !== columnModel.get("name_formatted"))) {
                        actualColumnName = columnModel.get("name");
                    }

                    return actualColumnName;
                },

                onFiltersUpdated: function () {
                    if (this.grouped_on_server) {
                        this.fetch();
                    } else {
                        this.set(this.sortGroupAndFilter());
                        this.facetCollection.trigger("reset");
                    }
                },

                resolveToActualValues: function (id, formattedValues) {
                    var facetTopicModel,
                        actualValues = [],
                        facetTopicCollection = this._getFacetTopicCollection(id);

                    if (facetTopicCollection) {
                        _.each(formattedValues, function (formattedValue) {
                            facetTopicModel = facetTopicCollection.findWhere({value: formattedValue});
                            actualValues.push(facetTopicModel.get("valueNative"));
                        });
                        return actualValues;
                    } else {
                        return formattedValues;
                    }
                },

                _getFacetTopicCollection: function (id) {
                    var facetModel = this.facetCollection.findWhere({id: id});
                    return facetModel.topics;
                },

                _setAsSelected: function (facetModel) {
                    var self = this,
                        newTopics = [],
                        id = facetModel.get("id"),
                        filters = this.facetCollection.filters,
                        topics = facetModel.get("topics");

                    _.each(topics, function (topic) {
                        var facetModelFilter = _.filter(filters, function (filter) {
                            return filter.id === id;
                        });

                        if (facetModelFilter.length > 0) {
                            var selected = !_.isUndefined(_.findWhere(facetModelFilter[0].values, {id: topic.value}));

                            if (selected === true) {
                                topic.selected = selected;
                                topic.count = null;
                                topic.percentage = null;
                                newTopics.push(topic);
                            }
                        } else {
                            newTopics.push(topic);
                        }
                    });

                    facetModel.set({
                        "topics": newTopics
                    });

                    return facetModel;
                },

                _getOtherFilteredFacets: function () {
                    var activeColumn = this.columnCollection.findWhere({active_column: true}),
                        filters = this.facetCollection.filters;
                    return this.facetCollection.filter(function (facetModel) {
                        return facetModel.get("id") !== activeColumn.get("id") && _.findWhere(filters, {id: facetModel.get("id")});
                    });
                }
            });
        }

    };

    return VisualCountFilterableMixin;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/postable/postable.mixin',['csui/lib/underscore',
        'webreports/utils/url.webreports'
], function (_,
             UrlWebReports) {
    "use strict";

    var VisualCountPostableMixin = {

        mixin: function (prototype) {
            var originalFetch = prototype.fetch;

            prototype.fetch = function (options) {
                options || (options = {});

                var requestExtensions,
                    data = {
                        format: 'webreport',
                        method: 'GET'
                    },
                    chartQueryParms = this.getFilteredCountQuery(options);

                data = _.extend(data, chartQueryParms);

                requestExtensions = {
                    type:'POST',
                    data: data
                };

                // This collection can have a large payload so we send it as a POST and add &method=GET
                // in the url function. This is converted to a GET by the REST API request handler when
                // the POST reaches the server.
                if (options){
                    _.extend(options,requestExtensions);
                } else {
                    options = requestExtensions;
                }

                return originalFetch.call(this, options);
            };

            return _.extend(prototype, {

                getFilteredCountQuery: function(options){
                    var postData = {},
                        context = this.options.context || undefined,
                        csuiContainerID = UrlWebReports.getCurrentContainerID(context),
                        wrParameters = this.options.parameters || [],
                        parameterData = UrlWebReports.getWebReportParametersAsData(wrParameters);

                    // Extend the POST data with the current container ID if defined
                    if (!_.isUndefined(csuiContainerID)){
                        postData = _.extend(postData, {csuiContainerID: csuiContainerID} );
                    }

                    // Any WebReport parameters which conflict with reserved Rest parameters for the core widget behaviour e.g. active_column will be ignored.
                    _.extend(postData, parameterData, this.getFilteredCountParms());

                    return postData;
                },

                getFilteredCountParms: function(){
                    var parms = {};

                    parms.filterable = (this.options.filterable === true);
                    parms.expandable = (this.options.expandable === true);

                    _.extend(parms, this.chartControlsModel.attributes);

                    if (parms.sort_by === 'ordinal' ){
                        parms.sort_by = parms.active_column;
                    }

                    parms.fc_filters = JSON.stringify(this.getFCFilters());

                    parms.total_count = this.getTotalCount();

                    return parms;
                }

            });
        }

    };

    return VisualCountPostableMixin;

});

// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.collection/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.collection/nls/root/lang',{
    noValue: '(No value)',
    invalidActiveColumn: 'An invalid Active Column was specified.'
});


csui.define('webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.collection/chart.collection',[
    'csui/lib/underscore',
    'csui/lib/backbone',
    'csui/dialogs/modal.alert/modal.alert',
    'csui/models/mixins/connectable/connectable.mixin',
    'webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/client.collection/chart.collection.client.mixin',
    'webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/filterable/filterable.mixin',
    'webreports/widgets/visual.data.filtered.count/impl/models/mixins/visual.count/postable/postable.mixin',
    'webreports/utils/general.utils',
    'i18n!webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.collection/nls/lang',
    'csui/utils/deepClone/deepClone'
], function (_,
             Backbone,
             ModalAlert,
             ConnectableMixin,
             ChartCollectionClientMixin,
             FilterableMixin,
             PostableMixin,
             generalUtils,
             lang) {

    var VisualCountChartCollection = Backbone.Collection.extend({

        // Constructor gives an explicit name to the object in the debugger
        constructor: function VisualCountChartCollection(models, options) {
            Backbone.Collection.prototype.constructor.apply(this, arguments);

            if (_.isUndefined(options)) {
                options = {};
            }

            if (options && options.id && !this.id) {
                this.id = options.id;
            }

            this.options = options;

            // Enable this model for communication with the CS REST API
            this.makeConnectable(options);
            // Add support for creating filter collections to use with facet filtering
            this.makeFilterable(options);
        },

        // Computes the REST API URL using the connection options
        url: function () {
            return this.connector.connection.url + '/nodes/' + this.id + '/output';
        },

        parse: function (response) {
            if (response.data && response.data.length > 0) {
                this.grouped_on_server = response.grouped_on_server || false;
                this.sorted_on_server = response.sorted_on_server || false;
                this.setColumns(response.columns);
                this.setFacetFilters(response.fc_filters);

                if (this._isResponseValid(response)) {
                    if (response.grouped_on_server) {
                        this.groupedData = response;
                    } else {
                        this.rawCollection = response.data;
                    }

                    this.sortGroupAndFilter();

                    return this.filteredData;
                }
            } else {
                return [];
            }
        },

        _isResponseValid: function (response) {
            var ok = true;
            if (!response.grouped_on_server) {
                if (!this._isActiveColumnValid(response)) {
                    ModalAlert.showError(lang.invalidActiveColumn);
                    ok = false;
                }
            }
            return ok;
        },

        _isActiveColumnValid: function (response) {
            return !_.isUndefined(generalUtils.getCaseInsensitiveProperty(_.first(response.data), this.columnCollection.getActiveColumn()));
        },

        filteredData: {},
        rawCollection: {},

        getSortOptions: function () {
            return {
                sortBy: this.chartControlsModel.get('sort_by'),
                sortOrder: this.chartControlsModel.get('sort_order')
            };
        },

        getGroupAfter: function () {
            return this.chartControlsModel.get('group_after');
        },

        setColumns: function (columns) {
            var activeColumn = _.findWhere(columns, {active_column: true}),
                countColumn = _.findWhere(columns, {count_column: true}),
                noActiveOrCountColSet = !activeColumn || !countColumn;

            // If the Active or Count columns aren't set, do a case insensitive check and set them.
            if (noActiveOrCountColSet) {
                columns = _.map(columns, _.bind(function (column) {
                    if (this.options.activeColumn && (column.name.toLowerCase() === this.options.activeColumn.toLowerCase())) {
                        column.active_column = true;
                    }
                    if (this.options.countColumn && (column.name.toLowerCase() === this.options.countColumn.toLowerCase())) {
                        column.active_column = true;
                    }
                    return column;
                }, this));
            }

            // The facet panel is expecting ids to be strings
            _.each(columns, function (column) {
                column.id = column.id.toString();
            });

            this.columnCollection.set(columns);
        },

        sortGroupAndFilter: function (options) {
            var filteredData,
                nestedData;

            if (this.grouped_on_server) {
                filteredData = this.groupedData.data;
                if (!this.sorted_on_server || (options && options.sort)) {
                    filteredData = this.sortNest(filteredData, this.getSortOptions());
                }
            } else {
                nestedData = this.nest(this.filterBy(this.rawCollection, this.getFCFilters()), this.columnCollection.getActiveColumn());
                filteredData = this.groupOutlyingValues(this.sortNest(nestedData, this.getSortOptions()), this.getGroupAfter());
            }

            filteredData = this._checkGroupedCategory(filteredData);
            this.filteredData = filteredData;

            this.setFacetData(filteredData);

            return filteredData;
        },

        _checkGroupedCategory: function (filteredData) {
            var groupedCategory = this._findGroupedCategory(filteredData);

            if (groupedCategory) {
                groupedCategory.grouped_category = true;
            }

            return filteredData;
        },

        _findGroupedCategory: function (filteredData) {
            var findObj = {},
                activeColumn = this.columnCollection.getActiveColumn();

            findObj[activeColumn] = "ga_other";

            return _.findWhere(filteredData, findObj);
        },

        onChartOptionsUpdated: function (args) {
            var clientOnlyChanges = (_.keys(_.omit(args, ['sort_by', 'sort_order', 'view_value_as_percentage', 'theme_name'])).length === 0),
                goToServer = (this.grouped_on_server && !clientOnlyChanges);

            if (!_.has(args, 'column_names')) {
                if (goToServer) {
                    this.fetch();
                } else if (clientOnlyChanges) {
                    this.set(this.sortGroupAndFilter({sort: true}));
                } else {
                    if (_.has(args, 'active_column')) {
                        this.columnCollection.updateActiveColumn(args.active_column);
                    }
                    this.set(this.sortGroupAndFilter());
                }
            }
        }
    });

    ConnectableMixin.mixin(VisualCountChartCollection.prototype);
    ChartCollectionClientMixin.mixin(VisualCountChartCollection.prototype);
    FilterableMixin.mixin(VisualCountChartCollection.prototype);
    PostableMixin.mixin(VisualCountChartCollection.prototype);

    return VisualCountChartCollection;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/visual.count/column.collection/column.model',[
  'csui/lib/backbone'
], function (Backbone) {

  var FilteredCountColumnModel = Backbone.Model.extend({

    defaults: {
      "active_column":false,
      "client_format":{
        "type":"none"
      },
      "column_key":"",
      "count_column":false,
      "data_type":10,
      "id": undefined ,
      "name":"",
      "tag_format":""
    },

    // Constructor gives an explicit name to the object in the debugger
    constructor: function FilteredCountColumnModel(attributes, options) {
      Backbone.Model.prototype.constructor.apply(this, arguments);

    }

  });

  return FilteredCountColumnModel;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/visual.count/column.collection/column.collection',[
    'csui/lib/backbone',
    'csui/lib/underscore',
    'webreports/widgets/visual.data.filtered.count/impl/models/visual.count/column.collection/column.model'
], function (Backbone, _, VisualCountColumnModel) {

    var VisualCountColumnCollection = Backbone.Collection.extend({

        // Constructor gives an explicit name to the object in the debugger
        constructor: function VisualCountColumnCollection(models, options) {
            Backbone.Collection.prototype.constructor.apply(this, arguments);

        },

        model: VisualCountColumnModel,

        getActiveColumn: function(){
            var activeColumnName,
                activeColumnModel;

            activeColumnModel = this.findWhere({active_column:true});

            if (activeColumnModel){
                activeColumnName = activeColumnModel.get("name");
            }

            return activeColumnName;
        },

        getActiveColumnFormatted: function(){
            var activeColumnName,
                activeColumnModel;

            activeColumnModel = this.findWhere({active_column:true});

            if (activeColumnModel){
                activeColumnName = activeColumnModel.get("name_formatted");
            }

            return activeColumnName;
        },

        getCountColumn: function(){
            var countColumnName,
                countColumnModel;

            countColumnModel = this.findWhere({count_column:true});

            if (countColumnModel){
                countColumnName = countColumnModel.get("name");
            }

            return countColumnName;
        },

        getCountColumnFormatted: function(){
            var countColumnName,
                countColumnModel;

            countColumnModel = this.findWhere({count_column:true});

            if (countColumnModel){
                countColumnName = countColumnModel.get("name_formatted");
            }

            return countColumnName;
        },

        updateActiveColumn: function(activeColumn){
            // Update the column collection
            var columnModels = this.models;
            _.each(columnModels, function(columnModel){
                if (columnModel.get("active_column") === true && columnModel.get("name") !== activeColumn){
                    columnModel.set({"active_column":false});
                }

                if (columnModel.get("name") === activeColumn){
                    columnModel.set({"active_column":true});
                }
            });

            this.set(columnModels);

        },

    });

    return VisualCountColumnCollection;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/utils/contexts/factories/visual.count.collection.factory',[
    'module',
    'csui/lib/underscore',
    'csui/lib/backbone',
    'csui/utils/contexts/factories/factory',
    'csui/utils/contexts/factories/connector',
    'webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.collection/chart.collection',
    'webreports/widgets/visual.data.filtered.count/impl/models/visual.count/column.collection/column.collection'

], function (module,_, Backbone, CollectionFactory, ConnectorFactory, VisualCountChartCollection, VisualCountColumnCollection) {

    var VisualCountCollectionFactory = CollectionFactory.extend({

        // Unique prefix of the default collection instance, when this collection is assigned
        // to a context it can be shared by multiple widgets
        propertyPrefix: 'webreportsVisualCount',

        constructor: function VisualCountCollectionFactory(context, options) {
            CollectionFactory.prototype.constructor.apply(this, arguments);

            // Obtain the server connector from the application context to share
            // the server connection with the rest of the application; include
            // the options, which can contain settings for dependent factories
            var connector = context.getObject(ConnectorFactory, options);
            options.connector = connector;
            var webreportsVisualCount = this.options.webreportsVisualCount || {};

            if (!(webreportsVisualCount instanceof Backbone.Collection)) {
                var config = module.config();
                webreportsVisualCount = new VisualCountChartCollection(webreportsVisualCount.models, _.extend({
                    connector: connector}, webreportsVisualCount.attributes, config.options, {
                    // Prefer refreshing the entire collection to rendering one row after another.
                    autoreset: true
                }));

                var webreportsVisualCountColumns = this.options.columnCollection || {};

                if (!(webreportsVisualCountColumns instanceof Backbone.Collection)) {
                    webreportsVisualCount.columnCollection = new VisualCountColumnCollection();
                }
            }

            // Expose the collection instance in the `property` key on this factory
            // instance to be used by the context
            this.property = webreportsVisualCount;
        },

        fetch: function (options) {
            // Just fetch the collection exposed by this factory

            options = _.extend({
                headers: {}
            }, options);
            _.extend(options.headers, {
                'X-OriginParams': location.search
            });

            return this.property.fetch(options);
        }

    });

    return VisualCountCollectionFactory;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.controls/chart.controls.model',[
    'csui/lib/backbone',
    'csui/lib/underscore'
], function (Backbone, _) {

    var ChartControlsModel = Backbone.Model.extend({

        defaults: {
            // placeholder object for persisting any user settings for visualisation
            active_column: '',
            active_column_formatted: '',
            theme_name: '',
            count_column: '',
            column_names: [],
            column_names_formatted: [],
            sort_by: 'Count',
            sort_order: 'desc',
            view_value_as_percentage: false,
            group_after: 10,
        },

        // Constructor gives an explicit name to the object in the debugger
        constructor: function ChartControlsModel(attributes, options) {
            Backbone.Model.prototype.constructor.apply(this, arguments);
        },

        updateColumnData: function(columnCollection){
            var columnsExcludingCount = columnCollection.filter(function(model){
                return (model.get("count_column") !== true);
            });

            this.set({
                column_names_formatted: _.map(columnsExcludingCount, function(model){
                    return model.get("name_formatted") || model.get("name");
                }),
                column_names: _.map(columnsExcludingCount, function(model){
                    return model.get("name");
                }),
                active_column: columnCollection.getActiveColumn(),
                active_column_formatted: columnCollection.getActiveColumnFormatted(),
                count_column: columnCollection.getCountColumn(),
                count_column_formatted: columnCollection.getCountColumnFormatted()
            });
        }
    });

    return ChartControlsModel;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/control.options.view',[
    'csui/lib/marionette3',
    'csui/lib/underscore',
], function(Marionette, _){
    'use strict';

    var VisualCountControlsOption = Marionette.View.extend({

        tagName: 'option',

        template: _.noop,

        className: 'webreports-visual-count-controls-option',

        constructor: function VisualCountControlsOption(options){
            Marionette.View.prototype.constructor.apply(this, arguments);
        },

        attributes: function(){
            var model = this.model;

            return {
                value: model.get("value"),
                selected: model.get("selected")
            };
        },

        onRender: function(){
            this.$el.text(this.model.get("label"));
        }
    });

    return VisualCountControlsOption;

});
csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.select.view',[
    'csui/lib/marionette3',
    'csui/lib/underscore',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/control.options.view',
], function (Marionette, _, VisualCountOptionsView) {

    var VisualCountControlsSelectView = Marionette.CollectionView.extend({

        className: "webreports-visual-count-controls-select",

        tagName: "select",

        template: _.noop,

        attributes: function(){
            return {
                name: this.model.get("name"),
                id: this.model.get("id")
            };
        },

        events: {
            "change": "onOptionChanged"
        },

        constructor: function VisualCountControlsSelectView(options) {
            this.model = options.model;
            Marionette.CollectionView.prototype.constructor.apply(this, arguments);
        },

        childView: VisualCountOptionsView,

        onOptionChanged: function(){
            var selectModel = this.model,
                originatingView = this.options.originatingView,
                optionCollection = this.collection,
                value = this.$el.val();

            originatingView.trigger("option:changed", {
                selectModel: selectModel,
                optionCollection: optionCollection,
                value: value
            });

        }

    });

    return VisualCountControlsSelectView;

});


/* START_TEMPLATE */
csui.define('hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.list.item',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<label for=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"id") || (depth0 != null ? lookupProperty(depth0,"id") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"id","hash":{},"loc":{"start":{"line":1,"column":12},"end":{"line":1,"column":18}}}) : helper)))
    + "\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"label") || (depth0 != null ? lookupProperty(depth0,"label") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"label","hash":{},"loc":{"start":{"line":1,"column":20},"end":{"line":1,"column":29}}}) : helper)))
    + "</label>\r\n<select name=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"name") || (depth0 != null ? lookupProperty(depth0,"name") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"name","hash":{},"loc":{"start":{"line":2,"column":14},"end":{"line":2,"column":22}}}) : helper)))
    + "\" id=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"id") || (depth0 != null ? lookupProperty(depth0,"id") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"id","hash":{},"loc":{"start":{"line":2,"column":28},"end":{"line":2,"column":34}}}) : helper)))
    + "\" class=\"webreports-visual-count-controls-select\"></select>";
}});
Handlebars.registerPartial('webreports_widgets_visual.data.filtered.count_impl_controls_visual.count.tile_visual.count.controls_impl_controls.list.item', t);
return t;
});
/* END_TEMPLATE */
;
csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.list.item.view',[
    'csui/lib/marionette3',
    'csui/lib/backbone',
    'csui/lib/underscore',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.select.view',
    'hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.list.item'
], function(Marionette, Backbone, _, VisualCountControlsSelectView, template){
    'use strict';

    var VisualCountListItemView = Marionette.View.extend({

        tagName: 'li',

        template: template,

        className: 'webreports-visual-count-controls-list-item',

        constructor: function VisualCountSelectListItemView(options){
            Marionette.View.prototype.constructor.apply(this, arguments);
        },

        regions: {
            selectList: {
                el: '.webreports-visual-count-controls-select',
                replaceElement: true
            }
        },

        templateContext: function(){
            var model = this.model;

            return {
                id: model.get("id"),
                label: model.get("label"),
                name: model.get("name")
            };
        },

        onRender: function(){
            this.showChildView('selectList', new VisualCountControlsSelectView({
                originatingView: this.options.originatingView,
                collection: new Backbone.Collection(this.model.get("options")),
                model: this.model
            }));
        },
    });

    return VisualCountListItemView;

});
csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.list.view',[
    'csui/lib/marionette3',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.list.item.view'
], function(Marionette, VisualCountControlsListItemView){
    'use strict';

    var VisualCountControlListView = Marionette.CollectionView.extend({

        tagName: 'ul',

        className: 'webreports-visual-count-controls-list',

        childView: VisualCountControlsListItemView,

        childViewOptions: function(){
          return {
              originatingView: this.options.originatingView
          };
        },

        constructor: function VisualCountSelectListView(options){
            Marionette.CollectionView.prototype.constructor.apply(this, arguments);
        }
    });

    return VisualCountControlListView;

});
// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/nls/root/lang',{
    activeColumn: 'Active column',
    sortBy: 'Sort by',
    count: 'Count',
    asc: 'asc',
    desc: 'desc',
    showValuesAs: 'Show values as',
    groupAfter: 'Group after',
    actual: 'Actual',
    percentage: 'Percentage',
    theme: 'Theme',
    OTPrimary: 'Evening 10',
    OTSecondary: 'Coral 10',
    OTTertiary: 'Garden 10',
    DataClarity: 'Clarity 20',
    DataClarityPatterned: 'Patterned 20',
    OTNavy: 'Navy 6',
    OTTeal: 'Teal 6',
    OTIndigo: 'Indigo 6',
    OTPlum: 'Plum 6',
    OTMagenta: 'Magenta 6'
});



/* START_TEMPLATE */
csui.define('hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/visual.count.controls',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    return "<div class=\"webreports-visual-count-control-group webreports-controls-lhs\"></div>\r\n<div class=\"webreports-visual-count-control-group webreports-controls-rhs\"></div>\r\n";
}});
Handlebars.registerPartial('webreports_widgets_visual.data.filtered.count_impl_controls_visual.count.tile_visual.count.controls_impl_visual.count.controls', t);
return t;
});
/* END_TEMPLATE */
;

csui.define('css!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/visual.count.controls',[],function(){});
csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/visual.count.controls.view',[
    'csui/lib/underscore',
    'csui/lib/jquery',
    'csui/lib/marionette3',
    'csui/lib/backbone',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/controls.list.view',
    'webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.controls/chart.controls.model',
    'i18n!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/nls/lang',
    'hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/visual.count.controls',
    'css!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/impl/visual.count.controls'
], function (_, $, Marionette, Backbone, VisualCountControlsListView, VisualCountChartControlsModel, lang, template) {

      var VisualCountControlsView = Marionette.View.extend({

          className: "webreports-visual-count-controls",

          constructor: function VisualCountControlsView(options) {
              if (!options.model){
                  // Create a new overlay model with the current settings for the visualization
                  options.model = new VisualCountChartControlsModel({
                      vis_type: options.type,
                      active_column: options.activeColumn,
                      theme_name: options.themeName,
                      sort_by: options.sortBy || 'Count',
                      sort_order: options.sortOrder || 'desc',
                      view_value_as_percentage: options.viewValueAsPercentage,
                      group_after: options.groupAfter
                  });
              }

              if (options.chartCollection){
                  this.chartCollection = options.chartCollection;
                  this.chartCollection.chartControlsModel = options.model;
              } else {
                  throw 'VisualCountControlsView requires a chart collection';
              }

              if (options.columnCollection){
                  this.columnCollection = options.columnCollection;
              } else {
                  throw 'VisualCountControlsView requires a columns collection';
              }

              Marionette.View.prototype.constructor.apply(this, arguments);

              this.listenTo(options.columnCollection, 'update', this.onColumnsChanged);
              this.listenTo(this, 'option:changed', this.onOptionChanged);

          },

          regions: {
              leftControls: {
                  el: '.webreports-visual-count-control-group.webreports-controls-lhs'
              },
              rightControls: {
                  el: '.webreports-visual-count-control-group.webreports-controls-rhs'
              }
          },

          template: template,

          onRender: function(){
              var lhsOptionsCollection = this._getLHSOptionsCollection(),
                  rhsOptionsCollection = this._getRHSOptionsCollection(),
                  moreThanOneColumn = this.model.get('column_names').length > 1;

              if (moreThanOneColumn) {
                  this.showChildView('leftControls', new VisualCountControlsListView({
                      originatingView: this,
                      collection: lhsOptionsCollection
                  }));
              }

              this.showChildView('rightControls', new VisualCountControlsListView({
                  originatingView: this,
                  collection: rhsOptionsCollection
              }));
          },

          onDomRefresh: function () {
              this._reFocus();
          },

          _getLHSOptionsCollection: function () {
              var activeColumnSelectName = "webreports-select-active-column",
                  columnNames = _.map(this.model.get('column_names'), function (column, index) {
                      return {
                          value: column,
                          label: this.model.get('column_names_formatted')[index],
                          selected: this.model.get('active_column') === column
                      };
                  }, this);

              return new Backbone.Collection([{
                  label: lang.activeColumn,
                  key: "activeColumn",
                  options: columnNames,
                  name: activeColumnSelectName,
                  id: this._getSelectID(activeColumnSelectName)
              }]);

          },

          _getRHSOptionsCollection: function () {
              var sortBySelectName = "webreports-select-sort-options",
                  valueAsPercentageSelectName = "webreports-select-value-as-percentage",
                  groupAfterSelectName = "webreports-select-group-after",
                  themeSelectName = "webreports-select-theme",
                  themeOptions = [
                      {value:"otPrimary", selected: this.model.get("theme_name") === "otPrimary", label: lang.OTPrimary},
                      {value:"otSecondary", selected: this.model.get("theme_name") === "otSecondary", label: lang.OTSecondary},
                      {value:"otTertiary", selected: this.model.get("theme_name") === "otTertiary", label: lang.OTTertiary},
                      {value:"dataClarity", selected: this.model.get("theme_name") === "dataClarity", label: lang.DataClarity},
                      {value:"dataClarityPatterned", selected: this.model.get("theme_name") === "Patterned", label: lang.DataClarityPatterned},
                      {value:"otNavy", selected: this.model.get("theme_name") === "otNavy", label: lang.OTNavy},
                      {value:"otTeal", selected: this.model.get("theme_name") === "otTeal", label: lang.OTTeal},
                      {value:"otIndigo", selected: this.model.get("theme_name") === "otIndigo", label: lang.OTIndigo},
                      {value:"otPlum", selected: this.model.get("theme_name") === "otPlum", label: lang.OTPlum},
                      {value:"otMagenta", selected: this.model.get("theme_name") === "otMagenta", label: lang.OTMagenta}
                  ],
                  sortOptions = [
                      {value:"Count|asc", selected: (this.model.get("sort_by") === "Count" && this.model.get("sort_order") === "asc"), label: lang.count+':'+ lang.asc},
                      {value:"Count|desc", selected: (this.model.get("sort_by") === "Count" && this.model.get("sort_order") === "desc"), label: lang.count+':'+ lang.desc},
                      {value:"ordinal|asc", selected: (this.model.get("sort_by") === "ordinal" && this.model.get("sort_order") === "asc"), label: lang.activeColumn+':'+ lang.asc},
                      {value:"ordinal|desc", selected: (this.model.get("sort_by") === "ordinal" && this.model.get("sort_order") === "desc"), label: lang.activeColumn+':'+ lang.desc}
                  ],
                  viewValueAsPercentage = [
                      {value:"true", selected: this.model.get("view_value_as_percentage"), label: lang.percentage},
                      {value:"false", selected: !this.model.get("view_value_as_percentage"), label: lang.actual}
                  ],
                  groupAfter = _.map([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20], function (value) {
                      return {
                          value: value,
                          label: value,
                          selected: this.model.get('group_after') === value
                      };
                  }, this);

              return new Backbone.Collection([
                  {
                      label: lang.theme,
                      key: "themeName",
                      options: themeOptions,
                      name: themeSelectName,
                      id: this._getSelectID(themeSelectName)
                  },
                  {
                      label: lang.sortBy,
                      key: "sortBy",
                      options: sortOptions,
                      name: sortBySelectName,
                      id: this._getSelectID(sortBySelectName)
                  },
                  {
                      label: lang.showValuesAs,
                      key: "ViewValueAsPercentage",
                      options: viewValueAsPercentage,
                      name: valueAsPercentageSelectName,
                      id: this._getSelectID(valueAsPercentageSelectName)
                  },
                  {
                      label: lang.groupAfter,
                      key: "groupAfter",
                      options: groupAfter,
                      name: groupAfterSelectName,
                      id: this._getSelectID(groupAfterSelectName)
                  }]);
          },

          _getSelectID: function(name){
              return _.uniqueId(name + "_");
          },

          _reFocus: function () {
              var that = this;
              setTimeout(function () {
                  if (that.options && that.options.lastRegion && that.options.lastRegion.length > 0 ) {
                      var lastActiveRegion = $("select[name=" + that.options.lastRegion + "]");
                      lastActiveRegion.focus();
                  }
              }, 1);
          },

          onOptionChanged: function(args) {
              this.updateControlsModel(args);
              this.options.lastRegion = document.querySelector('#' + args.selectModel.get('id') + '').attributes.name.value;
              this._reFocus;
          },

          onColumnsChanged: function(){
              this.model.updateColumnData(this.columnCollection);
              this.render();
          },

          updateControlsModel: function(args) {
              var optionModel,
                  value,
                  changedAttributes = {},
                  chartControlsModel = this.model,
                  selectModel = args.selectModel,
                  optionCollection = args.optionCollection,
                  selectKey = selectModel.get("key");

              switch (selectKey) {
                  case 'activeColumn':
                      optionModel = optionCollection.findWhere({
                          value: args.value
                      });
                      changedAttributes = {
                          active_column: optionModel.get("value"),
                          active_column_formatted: optionModel.get("label")
                      };
                      break;
                  case 'sortBy':
                      value = args.value;

                      var sortOptions = value.split("|"),
                          sortBy = sortOptions[0],
                          sortOrder = sortOptions[1];

                      changedAttributes = {
                          sort_by: sortBy,
                          sort_order: sortOrder
                      };
                      break;
                  case 'ViewValueAsPercentage':
                      changedAttributes = {
                          view_value_as_percentage: (args.value === 'true')
                      };
                      break;
                  case 'groupAfter':
                      changedAttributes = {
                          group_after: parseInt(args.value)
                      };
                      break;
                  case 'themeName':
                      optionModel = optionCollection.findWhere({
                          value: args.value
                      });
                      changedAttributes = {
                          theme_name: optionModel.get('value')
                      };
                      break;
                  default:
                      console.warn("Invalid select key");
              }

              if (!_.isEmpty(changedAttributes)){
                  chartControlsModel.set(changedAttributes);
                  this.trigger("chart:options:updated", changedAttributes);
              }
          }
      });

    return VisualCountControlsView;

});

// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.data.filtered.count/impl/mixins/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

csui.define('webreports/widgets/visual.data.filtered.count/impl/mixins/visual.count.view.mixin',[
    'csui/lib/jquery',
    'csui/lib/underscore',
    'csui/lib/backbone',
    'csui/utils/base',
    'csui/controls/toolbar/toolitems.factory',
    'csui/utils/contexts/factories/connector',
    'csui/models/node/node.model',
    'csui/models/nodes',
    'webreports/widgets/visual.data.filtered.count/impl/utils/contexts/factories/visual.count.collection.factory',
    'webreports/widgets/visual.data.filtered.count/impl/models/visual.count/column.collection/column.collection',
    'webreports/widgets/visual.data.filtered.count/impl/models/visual.count/chart.controls/chart.controls.model',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.controls/visual.count.controls.view',
    'webreports/widgets/visual.data.filtered.count/impl/mixins/nls/lang',
    'csui/utils/deepClone/deepClone'
], function ($,
             _,
             Backbone,
             base,
             ToolItemsFactory,
             ConnectorFactory,
             NodeModel,
             NodeCollection,
             VisualCountCollectionFactory,
             VisualCountColumnCollection,
             VisualCountChartControlsModel,
             VisualCountControlsView,
             lang) {
    "use strict";

    var VisualCountViewMixin = {

        mixin: function (prototype) {
            return _.extend(prototype, {

                defaults: {
                    theme: "otPrimary",
                    titleBarIcon: "title-icon title-webreports",
                    groupAfterBar: 10,
                    groupAfterPie: 5,
                    filterable: false,
                    animate: true,
                    expandable: false,
                    showAsPercentage: false,
                    showLegend: true,
                    commandRowLimit: 5000,
                    commandHardRowLimit: 50000
                },

                groupAfterIsValid: function(groupAfter){
                    return (groupAfter >= 2 && groupAfter <= 20);
                },

                getGroupAfterDefault: function(chartType){
                    return ( chartType === "pie" || chartType === "donut" ) ? this.defaults.groupAfterPie : this.defaults.groupAfterBar;
                },

                validateVisualCountOptions: function(options){

                    var commandRowLimit,
                        defaults = this.defaults,
                        launchButtonConfig = options.launchButtonConfig;

                    options.titleBarIcon = ( _.has(options, 'titleBarIcon')) ? 'title-icon '+ options.titleBarIcon : defaults.titleBarIcon;
                    options.filterable = _.has(options, 'filterable') && _.isBoolean(options.filterable) ? options.filterable : defaults.filterable;
                    options.animate = _.has(options, 'animate') && _.isBoolean(options.animate) ? options.animate : defaults.animate;
                    options.expandable = _.has(options, 'expandable') && _.isBoolean(options.expandable) ? options.expandable : defaults.expandable;
                    options.theme = _.has(options, 'theme') ? options.theme : defaults.theme;
                    options.viewValueAsPercentage = _.has(options, 'viewValueAsPercentage') && _.isBoolean(options.viewValueAsPercentage) ? options.viewValueAsPercentage : defaults.showAsPercentage;
                    options.groupAfter = _.has(options, 'groupAfter') && this.groupAfterIsValid(options.groupAfter) ? parseInt(options.groupAfter, defaults.groupAfterBar) : this.getGroupAfterDefault(options.type);
                    options.showLegend = _.has(options, 'showLegend') && _.isBoolean(options.showLegend) ? options.showLegend : defaults.showLegend;

                    if (launchButtonConfig){
                        commandRowLimit = launchButtonConfig.rowLimit;

                        if (!_.isNumber(commandRowLimit) || _.isNaN(commandRowLimit)){
                            commandRowLimit = defaults.commandRowLimit;
                        }

                        if (commandRowLimit > defaults.commandHardRowLimit){
                            commandRowLimit = defaults.commandHardRowLimit;
                        }

                        launchButtonConfig.rowLimit = commandRowLimit;
                    }

                    return options;
                },

                validateCollections: function(options){
                    var defaults = this.defaults;

                    if (options.chartCollection){
                        this.chartCollection = options.chartCollection;
                    } else {
                        throw 'VisualCountView requires a chart collection';
                    }

                    if (options.columnCollection){
                        this.columnCollection = options.columnCollection;
                    } else {
                        throw 'VisualCountView requires a column collection';
                    }

                    if (options.facetCollection){
                        this.facetCollection = options.facetCollection;
                    } else {
                        throw 'VisualCountView requires a facet collection';
                    }
                    if (options.chartOptionsModel){
                        this.chartOptionsModel = options.chartOptionsModel;
                    } else {
                        this.chartOptionsModel = new Backbone.Model({
                            "themeName": options.theme || defaults.theme,
                            "showAsPercentage": _.has(options,'showAsPercentage') && _.isBoolean(options.showAsPercentage) ? options.showAsPercentage : defaults.showAsPercentage,
                            "animate": options.animate || defaults.animate,
                            "showLegend": _.has(options,'showLegend') && _.isBoolean(options.showLegend) ? options.showLegend : defaults.showLegend
                        });
                    }
                },

                getToolbarItems: function(options){
                    var toolbarItems,
                        toolbarItemsModels,
                        launchButtonConfig = options.launchButtonConfig,
                        rowLimit = launchButtonConfig.rowLimit,
                        launchButtons = launchButtonConfig.launchButtons;

                    toolbarItemsModels = _.chain(launchButtons)
                                .reject(function(launchButton){
                                    var launchButtonID = launchButton.launchButtonID;
                                    return !launchButtonID || !_.isNumber(launchButtonID);
                                })
                                .map(function(launchButton){
                                    var context = options.context,
                                        connector = context.getObject(ConnectorFactory),
                                        buttonNode = new NodeModel({
                                            id: launchButton.launchButtonID
                                        }, {connector: connector});

                                    return {
                                        signature: "OpenWebReport",
                                        name: base.getClosestLocalizedString(launchButton.launchButtonLabel, lang.launchReport),
                                        toolTip: base.getClosestLocalizedString(launchButton.launchButtonTooltip, lang.launchReportTooltip),
                                        status: {
                                            nodes: new NodeCollection([buttonNode])
                                        }
                                    };
                                })
                                .value();

                    if (toolbarItemsModels.length > 0){
                        toolbarItems = {
                            footer: new ToolItemsFactory({
                                    right: toolbarItemsModels
                                },
                                {
                                    rowLimit: rowLimit
                                }
                            )

                        };
                    }

                    return toolbarItems;
                },

                getToolbarItemNodes: function(){
                    var toolbarItemsFooter,
                        status,
                        toolbarItemsFooterCollection,
                        nodePromises = [],
                        toolbarItemNodes = [],
                        options = this.options,
                        context = options.context,
                        toolbarItems = options.toolbarItems;

                    if (toolbarItems){
                        toolbarItemsFooter  = toolbarItems.footer;
                        if (toolbarItemsFooter){
                            toolbarItemsFooterCollection = toolbarItemsFooter.collection;

                            toolbarItemsFooterCollection.each(function(toolbarItemsFooterModel){
                                if (toolbarItemsFooterModel.get("group") === "right"){
                                    status = _.extend( {context: context},toolbarItemsFooterModel.get("status"));
                                    if (_.has(status, "nodes") && status.nodes.length > 0){
                                        toolbarItemNodes.push(status.nodes.at(0));
                                    }
                                }
                            });
                        }
                    }

                    if (toolbarItemNodes.length > 0){
                        _.each(toolbarItemNodes, function(toolbarItemNode){
                            nodePromises.push(toolbarItemNode.fetch());
                        });

                        var successFunc = function (response) {
                                console.debug(response);
                            },
                            failureFunc = function (response) {
                                console.log(response);
                            };

                        $.when(nodePromises)
                            .then(successFunc, failureFunc);
                    }
                },

                setVisualCountWidgetOptions: function(options){
                    if (!(options && options.data)) {
                        throw 'VisualCount widget requires valid widget options';
                    }

                    var modelOptions,
                        toolbarItems,
                        columnCollection,
                        visualCountWidgetOptions = _.deepClone(options.data);

                    visualCountWidgetOptions.context = options.context;

                    visualCountWidgetOptions = this.validateVisualCountOptions(visualCountWidgetOptions);
                    modelOptions = this.setCommonModelOptions(options);

                    _.extend(modelOptions, {
                        visType: visualCountWidgetOptions.type, // visType is used to send to the server via Rest
                        type: visualCountWidgetOptions.type,
                        activeColumn: visualCountWidgetOptions.activeColumn,
                        themeName: visualCountWidgetOptions.theme, // 'theme' is the key that comes from the manifest, but 'themeName' is the key used in the chart control :-(
                        filters: visualCountWidgetOptions.filters,
                        filterable: visualCountWidgetOptions.filterable,
                        expandable: visualCountWidgetOptions.expandable,
                        viewValueAsPercentage: visualCountWidgetOptions.viewValueAsPercentage,
                        sortBy: visualCountWidgetOptions.sortBy,
                        sortOrder: visualCountWidgetOptions.sortOrder,
                        groupAfter: visualCountWidgetOptions.groupAfter,
                        showLegend: visualCountWidgetOptions.showLegend
                    });

                    // Set up the data collection object
                    this.setFactory(this.getWidgetFactory(options, VisualCountCollectionFactory, modelOptions));
                    visualCountWidgetOptions.chartCollection = options.context.getCollection(VisualCountCollectionFactory, {attributes: modelOptions});

                    visualCountWidgetOptions.columnCollection = visualCountWidgetOptions.chartCollection.columnCollection;
                    visualCountWidgetOptions.facetCollection = visualCountWidgetOptions.chartCollection.facetCollection;

                    // The Visual Count widget only supports the Vertical Bar type. Make sure we change the type tp pass the correct value onto the control.
                    if (_.has(options.data, 'type') && options.data.type === 'bar'){
                        visualCountWidgetOptions.chartType = 'verticalBar';
                    } else {
                        visualCountWidgetOptions.chartType = options.data.type;
                    }

                    if (visualCountWidgetOptions.launchButtonConfig){
                        toolbarItems = this.getToolbarItems(visualCountWidgetOptions);
                        if (toolbarItems){
                            visualCountWidgetOptions.toolbarItems = toolbarItems;
                            this.listenToOnce(visualCountWidgetOptions.chartCollection, "sync", this.getToolbarItemNodes);
                        }
                    }

                    return visualCountWidgetOptions;
                },

                createChartControlsView: function(options){
                    var chartControlOptions = {
                            activeColumn: options.activeColumn,
                            themeName: options.theme, // 'theme' is the key that comes from the manifest, but 'themeName' is the key used in the chart control :-(
                            type: options.type,
                            sortBy: options.sortBy,
                            sortOrder: options.sortOrder,
                            viewValueAsPercentage: options.viewValueAsPercentage,
                            groupAfter: options.groupAfter,
                            chartCollection: this.chartCollection,
                            columnCollection: this.columnCollection,
                            showLegend: options.showLegend
                        };

                    if (options.chartControlsModel){
                        chartControlOptions.model = options.chartControlsModel;
                    }

                    this.chartControlsView = new VisualCountControlsView(chartControlOptions);

                    this.listenTo(this.chartControlsView, "chart:options:updated", this.onChartOptionsUpdated);
                }

            });
        }

    };

    return VisualCountViewMixin;
});

// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/nls/root/lang',{
    tooManyRows: 'Please refine your filter further. The maximum number of items that can be processed is '
});


csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/visual.count.view',['csui/lib/marionette3',
        'csui/lib/backbone',
        'csui/lib/underscore',
        'csui/lib/jquery',
        'csui/utils/contexts/factories/connector',
        'csui/models/node/node.model',
        'csui/utils/commands',
        'csui/utils/commandhelper',
        'csui/dialogs/modal.alert/modal.alert',
        'csui/controls/facet.bar/facet.bar.view',
        'csui/controls/facet.panel/facet.panel.view',
        'csui/controls/charts/visual.count/visual.count.view',
        'csui/controls/progressblocker/blocker',
        'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count.footer.view',
        'webreports/mixins/webreports.view.mixin',
        'webreports/widgets/visual.data.filtered.count/impl/mixins/visual.count.view.mixin',
        'hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count',
        'i18n!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/nls/lang',
        'css!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/impl/visual.count'
], function (Marionette,
             Backbone,
             _,
             $,
             ConnectorFactory,
             NodeModel,
             commands,
             CommandHelper,
             ModalAlert,
             FacetBarView,
             FacetPanelView,
             VisualCountChartView,
             BlockingView,
             VisualCountFooterView,
             WebReportsViewMixin,
             VisualCountViewMixin,
             template,
             lang){

    var VisualCountView = Marionette.View.extend({

        className: 'webreports-visual-count-container',

        template: template,

        regions: {
            facetBar: {
                el: '.webreports-visual-count-facetbarview'
            },
            facetPanel: {
                el: '.webreports-visual-count-facetpanelview'
            },
            chartControls: {
                el:'.webreports-visual-count-controls-parent'
            },
            chart: {
                el: '.webreports-visual-count-chart'
            },
            footer: {
                el: '.webreports-visual-count-footer',
                replaceElement: true
            }
        },

        constructor: function VisualCountView(options) {

            options = this.validateVisualCountOptions(options);

            this.validateCollections(options);

            Marionette.View.prototype.constructor.apply(this, arguments);

            this._createViews(options);

            BlockingView.imbue(this);
        },

        onDomRefresh: function() {
                this._renderFooter();
                this._renderFacetBar();
                this._renderFacetPanel();
                this._renderChartControls();
                // NB: chart must be rendered last as its initial height is determined by other UI elements being present or not
                this._renderChart();
        },

        onChartOptionsUpdated: function(args) {

            if (this.chartOptionsModel) {
                if (_.has(args, 'theme_name')) {
                    this.chartOptionsModel.set({
                        "themeName": args.theme_name
                    });
                }
                if (_.has(args, 'view_value_as_percentage')) {
                    this.chartOptionsModel.set({
                        "showAsPercentage": args.view_value_as_percentage
                    });
                }
            }

            this.chartCollection.onChartOptionsUpdated(args);
        },

        _clearFilters: function(){
            this.facetCollection.clearFilter(false);
        },

        _addToFacetFilter: function(filter){
            var $chartEl = this.getRegion('chart').$el;

            this.facetCollection.addFilter(filter);
            this.chartCollection.onFiltersUpdated();

            this._renderFacetBar();
            this._renderChartControls();
            this._renderFacetPanel();

            $chartEl.addClass('facet-bar-visible');
        },

        _renderChart: function(){
            var $offsetParent,
                chartContentView,
                chartView = this.chartView,
                chartRegion = this.getRegion('chart');

                if (chartRegion && chartView){
                    // When rendered in an expanding dialog dom:refresh is called twice.
                    // The first call is made before the view has any height and causes issues with calculating svg size.
                    // The prevents the double render.

                    $offsetParent = this.$el.offsetParent();
                    if (!_.isNull($offsetParent ) && $offsetParent.height() > 0){
                        chartRegion.show(this.chartView);
                        chartContentView =  chartView.getChildView("chart");
                        if (chartContentView){
                            chartContentView.trigger("redraw:chart");
                        }
                    }
                } else {
                    console.warn("Missing chart view or region.");
                }
        },

        _renderFacetBar: function(){
            if (this.facetCollection.filters.length > 0){
                this.showChildView('facetBar', this.facetBarView);
                this.facetCollection.trigger("reset");
            }
        },

        _renderFacetPanel: function(){
            this.showChildView('facetPanel', this.facetPanelView);
        },

        _renderFooter: function(){
            var $footerEl;
            if (this.footerView){
                this.showChildView('footer', this.footerView);
                $footerEl = this.getRegion('footer').$el;
                $footerEl.addClass('has-footer');
            }
        },

        _createViews: function(options){
            if (options.chartView){
                this.chartView = options.chartView;
            } else {
                this._createChartView();
            }

            this.createChartControlsView(options);
            this._createFacetPanelView();
            this._createFacetBarView();

            if (options.toolbarItems){
                this.toolbarItems = options.toolbarItems;
                this._createFooterView();
            }
        },

        _createChartView: function(){
            var options = this.options,
                chartOptionsModel = this.chartOptionsModel;

            this.chartView = new VisualCountChartView({
                context: options.context,
                chartType: options.type,
                collection: options.chartCollection,
                columns: options.columnCollection,
                chartOptions: chartOptionsModel,
                originatingView: this
            });
        },

        _createFacetPanelView: function () {
            this.facetPanelView = new FacetPanelView({
                collection: this.facetCollection,
                enableCheckBoxes: true,
                blockingLocal: true
            });

            this.listenTo(this.facetPanelView, 'apply:filter', this._addToFacetFilter);
        },

        _createFacetBarView: function () {
            this.facetBarView = new FacetBarView({
                collection: this.facetCollection
            });

            this.listenTo(this.facetBarView, 'remove:filter', this._removeFacetFilter, this)
                .listenTo(this.facetBarView, 'remove:all', this._removeAll, this)
                .listenTo(this.chartView, 'apply:filter', this._addToFacetFilter, this);
        },

        _createFooterView: function () {
            var options = this.options;

            this.footerView = new VisualCountFooterView({
                context: options.context,
                toolbarItems: this.toolbarItems,
                originatingView: this
            });

            this.listenTo(this, "button:clicked", this._onButtonClicked);
        },

        _renderChartControls: function(){
            this.getRegion('chartControls').show(this.chartControlsView);
        },

        _removeFacetFilter: function (filter) {
            var $chartEl = this.getRegion('chart').$el;

            this.facetCollection.removeFilter(filter, false);
            this.chartCollection.onFiltersUpdated();

            if (_.has(this.facetCollection,'filters') && this.facetCollection.filters.length < 1) {
                $chartEl.removeClass('facet-bar-visible');
            }

            this._renderChartControls();
            this._renderFacetPanel();
        },

        _removeAll: function () {
            var $chartEl = this.getRegion('chart').$el;
            this._clearFilters();
            this.chartCollection.onFiltersUpdated();
            this._renderChartControls();

            $chartEl.removeClass('facet-bar-visible');

        },

        _onButtonClicked: function(childView, args){
            var commandPromise,
                rowLimit,
                filteredRowCount,
                toolbarItems = args.toolbarItems,
                model = childView.model,
                context = this.options.context,
                signature = model.get("signature"),
                command = commands.findWhere({"signature": signature}),
                status = {
                    context: context
                },
                options = {
                    context: context,
                    parameters: this.chartCollection.getFilteredCountQuery(),
                    originatingView: this
                };

            if (toolbarItems && toolbarItems.footer && toolbarItems.footer.options){
                rowLimit = toolbarItems.footer.options.rowLimit;
                filteredRowCount = this.chartCollection.getTotalCount();

                if (filteredRowCount <= rowLimit){
                    if (command) {
                        _.extend(status, model.get("status"));
                        _.extend(options, model.get("commandData"));
                        if (command.enabled(status, options)){
                            commandPromise = command.execute(status, options);
                            CommandHelper.handleExecutionResults(commandPromise, {
                                command: command,
                                suppressSuccessMessage: true
                            });
                        }
                    }
                } else {
                    ModalAlert.showError(lang.tooManyRows + rowLimit);
                }
            }

        }

    });

    // Add the mixin functionality to the target view
    WebReportsViewMixin.mixin(VisualCountView.prototype);
    VisualCountViewMixin.mixin(VisualCountView.prototype);

    return VisualCountView;

});

// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/nls/root/lang',{
    dialogTitle: 'Visual Count Tile',
    activeColumn: 'Active column',
    sortBy: 'Sort by',
    count: 'Count',
    asc: 'asc',
    desc: 'desc',
    showValuesAs: 'Show values as',
    groupAfter: 'Group after',
    actual: 'Actual',
    percentage: 'Percentage',
    parameters: 'Report parameters',
    chartOptions: 'Chart options'
});



/* START_TEMPLATE */
csui.define('hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/visual.count.tile',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "        <div class=\"tile-type-icon\">\r\n            <span class=\"icon title-icon "
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"icon") || (depth0 != null ? lookupProperty(depth0,"icon") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"icon","hash":{},"loc":{"start":{"line":5,"column":41},"end":{"line":5,"column":49}}}) : helper)))
    + "\" aria-hidden=\"true\"></span>\r\n        </div>\r\n";
},"3":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"imageUrl") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.noop,"loc":{"start":{"line":8,"column":8},"end":{"line":12,"column":15}}})) != null ? stack1 : "");
},"4":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"tile-type-image "
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"imageClass") || (depth0 != null ? lookupProperty(depth0,"imageClass") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageClass","hash":{},"loc":{"start":{"line":9,"column":40},"end":{"line":9,"column":54}}}) : helper)))
    + "\">\r\n                <img src=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"imageUrl") || (depth0 != null ? lookupProperty(depth0,"imageUrl") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageUrl","hash":{},"loc":{"start":{"line":10,"column":26},"end":{"line":10,"column":38}}}) : helper)))
    + "\" aria-hidden=\"true\">\r\n            </div>\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"csui-favorite csui-acc-tab-region webreports-tile-toolbar-btn webreports-visual-count-btn-parameters\">\r\n                <span class=\"csui-icon-edit inline-edit-icon icon-edit wr-icon-edit\" role=\"button\" tabindex=\"0\" aria-label=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"parameters") || (depth0 != null ? lookupProperty(depth0,"parameters") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"parameters","hash":{},"loc":{"start":{"line":22,"column":124},"end":{"line":22,"column":138}}}) : helper)))
    + "\" title=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"parameters") || (depth0 != null ? lookupProperty(depth0,"parameters") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"parameters","hash":{},"loc":{"start":{"line":22,"column":147},"end":{"line":22,"column":161}}}) : helper)))
    + "\"></span>\r\n            </div>\r\n";
},"8":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <!-- Note: the options button must be available even when there is no header. In the case of no header, it will be positioned absolute -->\r\n            <div class=\"csui-favorite csui-acc-tab-region webreports-tile-toolbar-btn webreports-visual-count-btn-options\">\r\n                <span class=\"csui-icon-more inline-edit-icon icon-more\" role=\"button\" tabindex=\"0\" aria-label=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"chartOptions") || (depth0 != null ? lookupProperty(depth0,"chartOptions") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"chartOptions","hash":{},"loc":{"start":{"line":28,"column":111},"end":{"line":28,"column":127}}}) : helper)))
    + "\" title=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"chartOptions") || (depth0 != null ? lookupProperty(depth0,"chartOptions") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"chartOptions","hash":{},"loc":{"start":{"line":28,"column":136},"end":{"line":28,"column":152}}}) : helper)))
    + "\"></span>\r\n            </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "<div class=\"tile-header\">\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"icon") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.program(3, data, 0),"loc":{"start":{"line":3,"column":4},"end":{"line":13,"column":11}}})) != null ? stack1 : "")
    + "\r\n    <div class=\"tile-title\" title=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"title","hash":{},"loc":{"start":{"line":15,"column":35},"end":{"line":15,"column":44}}}) : helper)))
    + "\">\r\n        <h2 class=\"csui-heading\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"title","hash":{},"loc":{"start":{"line":16,"column":33},"end":{"line":16,"column":42}}}) : helper)))
    + "</h2>\r\n    </div>\r\n\r\n    <div class=\"tile-controls\" title=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"title","hash":{},"loc":{"start":{"line":19,"column":38},"end":{"line":19,"column":47}}}) : helper)))
    + "\">\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"showParameterEditBtn") : depth0),{"name":"if","hash":{},"fn":container.program(6, data, 0),"inverse":container.noop,"loc":{"start":{"line":20,"column":8},"end":{"line":24,"column":15}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"filterable") : depth0),{"name":"if","hash":{},"fn":container.program(8, data, 0),"inverse":container.noop,"loc":{"start":{"line":25,"column":8},"end":{"line":30,"column":15}}})) != null ? stack1 : "")
    + "    </div>\r\n\r\n</div>\r\n\r\n<div class=\"tile-content\"></div>\r\n\r\n<div class=\"tile-footer binf-hidden\"></div>\r\n\r\n<div class=\"webreports-visual-count-overlay-clip\">\r\n    <div class=\"webreports-visual-count-overlay\">\r\n        <div class=\"webreports-visual-count-overlay-content binf-modal-dialog\">\r\n        <form class=\"csui-inlineform-group webreports-visual-count-settings-form\">\r\n            <div class=\"binf-modal-content\">\r\n                <div class=\"binf-modal-body\">\r\n                    <div class=\"webreports-visual-count-controls-parent\"></div>\r\n                </div>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n";
}});
Handlebars.registerPartial('webreports_widgets_visual.data.filtered.count_impl_controls_visual.count.tile_impl_visual.count.tile', t);
return t;
});
/* END_TEMPLATE */
;

csui.define('css!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/visual.count.tile',[],function(){});

csui.define('css!webreports/style/webreports',[],function(){});
csui.define('webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.tile.view',[
    'csui/lib/underscore',
    'csui/lib/jquery',
    'csui/lib/backbone',
    'csui/controls/tile/tile.view',
    'csui/utils/contexts/factories/connector',
    'csui/utils/base',
    'csui/controls/tile/behaviors/perfect.scrolling.behavior',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/expanding.behavior',
    'csui/controls/charts/visual.count/visual.count.view',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/visual.count.view',
    'webreports/mixins/webreports.view.mixin',
    'webreports/widgets/visual.data.filtered.count/impl/mixins/visual.count.view.mixin',
    'i18n!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/nls/lang',
    'hbs!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/visual.count.tile',
    'css!webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/impl/visual.count.tile',
    'css!webreports/style/webreports.css'
], function (_,
    $,
    Backbone,
    TileView,
    ConnectorFactory,
    base,
    PerfectScrollingBehavior,
    ExpandingBehavior,
    VisualCountChartView,
    VisualDataExpanded,
    WebReportsViewMixin,
    VisualCountViewMixin,
    lang,
    template) {

    var VisualCountTileView = TileView.extend({

        contentView: VisualCountChartView,

        ui: {
            overlayClip: '.webreports-visual-count-overlay-clip',
            toggleSettings: '.webreports-visual-count-btn-options > span',
            overlay: '.webreports-visual-count-overlay',
            footer: '.tile-footer',
            expandButton: '.cs-more'
        },

        constructor: function VisualCountTileView(options) {

            if (options && _.has(options, 'id') && this._isTileWidget(options)) {
                // pie chart legend does not fit well in a single tile. This override forces radial labels instead of legend
                options.showLegend = false;
            }

            options = this.validateVisualCountOptions(options);

            this.validateCollections(options);

            this._setContentViewOptions(options);

            TileView.prototype.constructor.apply(this, arguments);

            this.createChartControlsView(options);

        },

        behaviors: function () {
            var behaviors = {
                PerfectScrolling: {
                    behaviorClass: PerfectScrollingBehavior,
                    contentParent: ".tile-content",
                    suppressScrollX: false,
                    scrollYMarginOffset: 10
                }
            };

            if (this.options.expandable) {
                behaviors.Expanding = {
                    behaviorClass: ExpandingBehavior,
                    titleBarIcon: function () {
                        return this.options.titleBarIcon;
                    },
                    dialogTitle: function () {
                        var title = base.getClosestLocalizedString(this.options.title, lang.dialogTitle);
                        return title;
                    },
                    dialogTitleIconRight: "icon-tileCollapse",
                    dialogClassName: 'webreports-visual-data',
                    expandedView: function () {
                        return VisualDataExpanded;
                    },
                    expandedViewOptions: function () {
                        var options = this.options,
                            expandedOptions = {
                                context: options.context,
                                chartCollection: this.chartCollection,
                                columnCollection: this.columnCollection,
                                facetCollection: this.facetCollection,
                                type: options.chartType,
                                theme: this.chartOptionsModel.get("themeName"),
                                chartControlsModel: options.chartCollection.chartControlsModel,
                                chartOptionsModel: this.chartOptionsModel,
                                toolbarItems: options.toolbarItems
                            };

                        return expandedOptions;
                    }
                };
            }

            return behaviors;
        },

        regions: function () {
            var regions = _.extend({
                visualizationControls: '.webreports-visual-count-controls-parent'
            }, TileView.prototype.regions);
            return regions;
        },

        events: {
            'click @ui.toggleSettings': 'toggleSettings',
            'keyup @ui.toggleSettings': 'toggleSettings',
            'keyup @ui.expandButton': 'keyboardExpand'
        },

        keyboardExpand: function (event, options) {
            event.preventDefault();
            if ((event.type === "keyup" && (event.keyCode === 13 || event.keyCode === 32))) {
                this.triggerMethod('expand', options);
            }
        },

        toggleSettings: function (event) {
            event.preventDefault();
            if (event.type === "click" || (event.type === "keyup" && (event.keyCode === 13 || event.keyCode === 32))) {
                if (this.overlayVisible) {
                    $('.webreports-visual-count-overlay', this.$el).removeClass('visible')
                    .addClass('binf-hidden');
                    $('.cs-more', this.$el).attr('tabindex', '0');
                    this.overlayVisible = false;
                } else {
                    this.getRegion('visualizationControls').show(this.chartControlsView);
                    $('.webreports-visual-count-overlay', this.$el).addClass('visible')
                    .removeClass('binf-hidden');
                    $('.cs-more', this.$el).attr('tabindex', '-1');
                    this.overlayVisible = true;
                }
            }

         },

        template: template,

        templateHelpers: function () {
            var helpers = {
                title: base.getClosestLocalizedString(this.options.title, lang.dialogTitle),
                icon: this.options.titleBarIcon || 'title-webreports',
                activeColumn: this.options.activeColumn || '',
                filterable: this.options.filterable,
                parameters: lang.parameters,
                chartOptions: lang.chartOptions
            };

            if (this.options.parameterPrompt === 'showPromptForm') {
                _.extend(helpers, {
                    showParameterEditBtn: true
                });
            }

            return helpers;
        },

        onChartOptionsUpdated: function (args) {
            if (this.chartOptionsModel) {
                if (_.has(args, 'theme_name')) {
                    this.chartOptionsModel.set({
                        "themeName": args.theme_name
                    });
                }
                if (_.has(args, 'view_value_as_percentage')) {
                    this.chartOptionsModel.set({
                        "showAsPercentage": args.view_value_as_percentage
                    });
                }
            }

            this.chartCollection.onChartOptionsUpdated(args);
        },

        _setContentViewOptions: function (options) {
            this.contentViewOptions = {
                context: options.context,
                chartType: options.type,
                collection: options.chartCollection,
                columns: options.columnCollection,
                chartOptions: this.chartOptionsModel
            };

            this.listenToOnce(options.chartCollection, "sync", this._showControls);
        },

        _showControls: function () {
            if (!this.chartCollection.isEmpty()) {
                if (this.options.filterable) {
                    this.ui.toggleSettings.removeClass("binf-hidden");
                }
                if (this.options.expandable) {
                    this.ui.footer.removeClass("binf-hidden");

                    // add class to expand button csui-acc-tab-region
                    var expandButtonContext = $('.tile-content > .csui-visual-count-container').parentElement,
                        expandButton = $('.tile-footer > .cs-more.tile-expand', expandButtonContext);
                    if (expandButton) {
                        expandButton.addClass('csui-acc-tab-region').attr('tabindex', '0');
                    }
                }
            }
        },

        _isTileWidget: function (options) {
            // return true if widget with id is of kind 'tile', which means single-tile width
            var widgetCollection,
                isTileWidget = false;

            if (options && _.has(options, 'context') && _.has(options.context, 'perspective') && _.has(options.context.perspective.get('options'), 'widgets')) {
                widgetCollection = options.context.perspective.get('options').widgets;

                widgetCollection = _.filter(widgetCollection, function (widget) {
                    // filter just the tile widgets
                    return (widget.kind && widget.kind === 'tile');
                });

                if (widgetCollection.length) {
                    isTileWidget = _.every(widgetCollection, function (widget) {
                        return (_.has(widget, 'options') && _.has(widget.options, 'id') && (widget.options.id === options.id));
                    });
                }
            }
            return isTileWidget;
        }
    });

    WebReportsViewMixin.mixin(VisualCountTileView.prototype);
    VisualCountViewMixin.mixin(VisualCountTileView.prototype);

    return VisualCountTileView;

});

csui.define('webreports/widgets/visual.data.filtered.count/impl/visual.count.content.view',[
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count.tile/visual.count.tile.view',
    'webreports/mixins/webreports.view.mixin',
    'webreports/widgets/visual.data.filtered.count/impl/mixins/visual.count.view.mixin'
], function (VisualCountTileView,
             WebReportsViewMixin,
             VisualCountViewMixin) {

    var VisualCountContentView = VisualCountTileView.extend({

        constructor: function VisualCountContentView(options) {

            var tileOptions = this.setVisualCountWidgetOptions(options);

            VisualCountTileView.prototype.constructor.apply(this, [tileOptions]);

            this.options = tileOptions;
        }
    });

    WebReportsViewMixin.mixin(VisualCountContentView.prototype);
    VisualCountViewMixin.mixin(VisualCountContentView.prototype);

    return VisualCountContentView;

});

csui.define('webreports/widgets/visual.data.filtered.count/visual.data.filtered.count.view',[
    'webreports/controls/parameter.prompt/widget.prompt.wrapper.view',
    'webreports/widgets/visual.data.filtered.count/impl/visual.count.content.view',
], function (WidgetPromptWrapperView, VisualCountContentView) {

      var VisualDataFilteredCountView = WidgetPromptWrapperView.extend({

          className: 'cs-tile cs-list tile content-tile webreports-tilereport',

          constructor: function VisualDataFilteredCountView(options) {

              options.view = VisualCountContentView;

              WidgetPromptWrapperView.prototype.constructor.apply(this, arguments);
          }
      });

    return VisualDataFilteredCountView;

});


csui.define('json!webreports/widgets/visual.data.filtered.count/visual.data.filtered.count.manifest.json',{
    "$schema": "http://opentext.com/cs/json-schema/draft-04/schema#",
    "title": "{{widgetTitle}}",
    "description": "{{widgetDescription}}",
    "kind": "header",
    "supportedKinds": ["tile", "header"],
    "schema": {
        "type": "object",
        "properties": {
            "title": {
                "title": "{{tileTitle}}",
                "description": "{{tileDescription}}",
                "type": "object"
            },
            "type": {
                "title": "{{typeTitle}}",
                "description": "{{typeDescription}}",
                "type": "string",
                "enum": ["bar","horizontalBar","donut","pie"],
                "default": "bar"
            },
            "id": {
                "title": "{{sourceTitle}}",
                "description": "{{sourceDescription}}",
                "type": "integer"
            },
            "activeColumn": {
                "title": "{{activeTitle}}",
                "description": "{{activeDescription}}",
                "type": "string"
            },
            "theme": {
                "title": "{{themeTitle}}",
                "description": "{{themeDescription}}",
                "type": "string",
                "enum": ["otPrimary","otSecondary","otTertiary", "dataClarity","dataClarityPatterned","otNavy","otTeal","otIndigo","otPlum","otMagenta"],
                "default": "otPrimary"
            },
            "showLegend": {
              "title": "{{pieLegendTitle}}",
              "description": "{{pieLegendDescription}}",
              "type": "boolean",
              "enum": [
                true,
                false
              ],
              "default": true
            },
            "viewValueAsPercentage": {
                "title": "{{percentTitle}}",
                "description": "{{percentDescription}}",
                "type": "boolean",
                "enum": [
                    true,
                    false
                ],
                "default": false
            },
            "animate": {
                "title": "{{animateTitle}}",
                "description": "{{animateDescription}}",
                "type": "boolean",
                "enum": [
                    true,
                    false
                ],
                "default": true
            },
            "groupAfter": {
                "title": "{{groupTitle}}",
                "type": "integer",
                "description": "{{groupDescription}}",
                "enum": [-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],
                "default": -1
            },
            "sortBy": {
                "title": "{{sortTitle}}",
                "description": "{{sortDescription}}",
                "type": "string",
                "enum": ["ordinal","Count"],
                "default": "Count"
            },
            "sortOrder": {
                "title": "{{directionTitle}}",
                "description": "{{directionDescription}}",
                "type": "string",
                "enum": ["desc","asc"],
                "default": "desc"
            },
            "filterable": {
                "title": "{{optionsTitle}}",
                "description": "{{optionsDescription}}",
                "type": "boolean",
                "enum": [
                    true,
                    false
                ],
                "default": false
            },
            "expandable": {
                "title": "{{expandedTitle}}",
                "description": "{{expandedDescription}}",
                "type": "boolean",
                "enum": [
                    true,
                    false
                ],
                "default": false
            },
            "launchButtonConfig": {
                "type": "object",
                "title": "{{buttonTitle}}",
                "description": "{{buttonDescription}}",
                "properties": {
                    "rowLimit": {
                      "title": "{{maxTitle}}",
                      "description": "{{maxDescription}}",
                      "type": "integer",
                      "default": 5000
                    },
                    "launchButtons": {
                        "type": "array",
                        "title": "{{customButtonTitle}}",
                        "description": "{{customButtonDescription}}",
                        "items": {
                            "type": "object",
                            "title": "{{addButtonTitle}}",
                            "description": "{{addButtonDescription}}",
                            "properties": {
                                "launchButtonID": {
                                    "title": "{{reportButtonTitle}}",
                                    "description": "{{reportButtonDescription}}",
                                    "type": "integer"
                                },
                                "launchButtonLabel": {
                                    "title": "{{labelButtonTitle}}",
                                    "description": "{{labelButtonDescription}}",
                                    "type": "object"
                                },
                                "launchButtonTooltip": {
                                    "title": "{{buttonToolTitle}}",
                                    "description": "{{buttonToolDescription}}",
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "parameterPrompt": {
              "title": "{{parameterPromptTitle}}",
              "description": "{{parameterPromptDescription}}",
              "type": "string",
              "enum": [
                "disabled",
                "showPromptForm"
              ],
              "default": "disabled"
            },
            "parameters": {
                "type": "array",
                "title": "{{paramSourceTitle}}",
                "description": "{{paramSourceDescription}}",
                "items": {
                    "type": "object",
                    "title": "{{paramPairTitle}}",
                    "description": "{{paramPairDescription}}",
                    "properties": {
                        "name": {
                            "type": "string",
                            "title": "{{paramNameTitle}}",
                            "description": "{{paramNameDescription}}"
                        },
                        "value": {
                            "type": "string",
                            "title": "{{paramValueTitle}}",
                            "description": "{{paramValueDescription}}"
                        }
                    }
                }
            }
        },
        "required": ["activeColumn","id"]
    },    
    "options": {
        "fields": {
            "id": {
                "type": "otcs_node_picker",
                "type_control": {
                    "parameters": {
                        "select_types": [30303]
                    }
                }
            },
            "title": {
                "type": "otcs_multilingual_string"
            },
            "parameterPrompt": {
              "type": "select",
              "optionLabels": [
                "{{parmsIgnored}}",
                "{{enabledShowPromptForm}}"
              ]
            },
            "launchButtonConfig": {
                "fields": {
                    "launchButtons": {
                        "items": {
                            "fields": {
                                "launchButtonID": {
                                    "type": "otcs_node_picker",
                                    "type_control": {
                                        "parameters": {
                                            "select_types": [30303]
                                        }
                                    }
                                },
                                "launchButtonLabel": {
                                    "type": "otcs_multilingual_string"
                                },
                                "launchButtonTooltip": {
                                    "type": "otcs_multilingual_string"
                                }
                            }
                        }
                    }
                }
            },
            "type": {
              "type": "select",
              "optionLabels": ["{{optionsTypeBar}}", "{{optionsTypeHorizontalBar}}", "{{optionsTypeDonut}}", "{{optionsTypePie}}"]
            },
            "theme": {
                "type": "select",
                "optionLabels": ["{{optionsTypeOTPrimary}}", "{{optionsTypeOTSecondary}}", "{{optionsTypeOTTertiary}}", "{{optionsTypeDataClarity}}","{{optionsTypeDataClarityPatterned}}","{{optionsTypeOTNavy}}","{{optionsTypeOTTeal}}","{{optionsTypeOTIndigo}}","{{optionsTypeOTPlum}}","{{optionsTypeOTMagenta}}"]
            },
            "groupAfter": {
                "type": "select",
                "optionLabels": ["{{optionsGroupAfterDefault}}","2","3","4","{{optionsPieDonutDefault}}","6","7","8","9","10","11","12","13","14","{{optionsBarDefault}}","16","17","18","19","20"]
            },
            "sortBy": {
                "type": "select",
                "optionLabels": ["{{optionsSortByActive}}", "{{optionsSortByCount}}"]
            },
            "sortOrder": {
                "type": "select",
                "optionLabels": ["{{optionsSortOrderDsc}}", "{{optionsSortOrderAsc}}"]
            }
        }
    }
});

csui.define('webreports/widgets/visual.data.filtered.count/impl/nls/visual.data.filtered.count.manifest',{
	// Always load the root bundle for the default locale (en-us)
	"root": true,
	// Do not load English locale bundle provided by the root bundle
	"en-us": false,
	"en": false
});

csui.define('webreports/widgets/visual.data.filtered.count/impl/nls/root/visual.data.filtered.count.manifest',{
    "widgetTitle": "Visual Count",
    "widgetDescription": "This widget visualizes the total count of values matching given criteria.",
    "tileTitle": "Title",
    "tileDescription": "Enter the title for the widget. This title appears in the Tile header.",
    "typeTitle": "Chart Type",
    "typeDescription": "Select the type of chart appropriate for your data.",
    "themeTitle": "Theme",
    "themeDescription": "Select a color palette for your chart.",
    "sourceTitle": "Source WebReport",
    "sourceDescription": "Browse to select the WebReport that retrieves the data that you want to visualize.",
    "activeTitle": "Active Column",
    "activeDescription": "Enter the name of the data source column that provides the matching values to be counted.",
    "optionsTitle": "Chart Options",
    "optionsDescription": "Choose whether end users have access to chart filtering options in the Tile view.",
    "expandedTitle": "Expanded View",
    "expandedDescription": "Choose whether end users have access to the Expanded view of the chart.",
    "percentTitle": "Values as Percentage",
    "percentDescription": "Choose whether to show the chart values as percentages of the total count or as the actual count.",
    "pieLegendTitle": "Pie legend",
    "pieLegendDescription": "Pie and donut charts have a separate legend by default. If this is disabled, slice labels are shown instead.",
    "animateTitle": "Animate",
    "animateDescription": "Choose whether the chart animates or not when changing certain settings in the interface.",
    "groupTitle": "Group After",
    "groupDescription": "Select the threshold for the number of discrete values whose total count will appear in the chart. Values above the threshold will be grouped as \'Other\' and the combined total will appear. The Chart Default is a threshold value appropriate to the chart type.",
    "sortTitle": "Sort By",
    "sortDescription": "Select whether to sort the chart by the value names in the Active Column or by the count of the values.",
    "directionTitle": "Sort Direction",
    "directionDescription": "Select whether to sort the chart in Ascending or Descending order.",
    "buttonTitle": "Button WebReports",
    "buttonDescription": "Configure the options for Button WebReports launched by Custom Buttons in the Expanded view",
    "maxTitle": "Maximum Items to Process",
    "maxDescription": "Enter the maximum number of data items to pass to the Button WebReport.",
    "customButtonTitle": "Custom Buttons",
    "customButtonDescription": "Set the properties for the Custom Button that appears in the Expanded View, then click the \'Add To Array\' button. Repeat as required to add multiple buttons.",
    "addButtonTitle": "Add Custom Buttons",
    "addButtonDescription": "Configure custom buttons that will appear in the Expanded view and which will launch Button Webreports.",
    "reportButtonTitle": "Button WebReport",
    "reportButtonDescription": "Browse to select the WebReport that will open when you click the button.",
    "labelButtonTitle": "Button Label",
    "labelButtonDescription": "Enter a custom label for the button.",
    "buttonToolTitle": "Button Tooltip",
    "buttonToolDescription": "Enter a tool tip for the button.",
    "parameterPromptTitle": "Parameter prompt behavior",
    "parameterPromptDescription": "Determines how the widget should behave when the source WebReport has input parameters.",
    "parmsIgnored": "Don\'t prompt - use defaults",
    "enabledShowPromptForm": "Show prompt form",
    "paramSourceTitle": "Source Parameters",
    "paramSourceDescription": "Specify one or more Key/Value pairs of parameters to pass into the Source WebReport, as required.",
    "paramPairTitle": "Source Parameters",
    "paramPairDescription": "Specify one or more Key/Value pairs of parameters to pass into the Source WebReport, as required.",
    "paramNameTitle": "Parameter Name",
    "paramNameDescription": "The name of the URL parameter.",
    "paramValueTitle": "Parameter Value",
    "paramValueDescription": "The value of the URL parameter.",
    "optionsTypeBar": "Vertical Bar",
    "optionsTypeHorizontalBar": "Horizontal Bar",
    "optionsTypeDonut": "Donut",
    "optionsTypePie": "Pie",
    "optionsTypeOTPrimary": "Evening 10",
    "optionsTypeOTSecondary": "Coral 10",
    "optionsTypeOTTertiary": "Garden 10",
    "optionsTypeDataClarity": "Clarity 20",
    "optionsTypeDataClarityPatterned": "Patterned 20",
    "optionsTypeOTNavy": "Navy 6",
    "optionsTypeOTTeal": "Teal 6",
    "optionsTypeOTIndigo": "Indigo 6",
    "optionsTypeOTPlum": "Plum 6",
    "optionsTypeOTMagenta": "Magenta 6",
    "optionsGroupAfterDefault": "Use Chart Default",
    "optionsPieDonutDefault": "5 - Pie and Donut default",
    "optionsBarDefault": "15 - Bar default",
    "optionsSortByActive": "Active Column",
    "optionsSortByCount": "Count",
    "optionsSortOrderDsc": "Descending",
    "optionsSortOrderAsc": "Ascending"
});


/* START_TEMPLATE */
csui.define('hbs!webreports/widgets/visual.count.full.page/impl/visual.count.full.page',['module','hbs','nuc/lib/handlebars'], function( module, hbs, Handlebars ){ 
var t = Handlebars.template({"1":function(container,depth0,helpers,partials,data) {
    var stack1, helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "    <div class=\"webreports-visual-count-header tile-header\">\r\n\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"wrNode") : depth0),{"name":"if","hash":{},"fn":container.program(2, data, 0),"inverse":container.noop,"loc":{"start":{"line":4,"column":8},"end":{"line":6,"column":15}}})) != null ? stack1 : "")
    + "\r\n"
    + ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"icon") : depth0),{"name":"if","hash":{},"fn":container.program(4, data, 0),"inverse":container.program(6, data, 0),"loc":{"start":{"line":8,"column":8},"end":{"line":18,"column":15}}})) != null ? stack1 : "")
    + "\r\n        <div class=\"tile-title\">\r\n             <h2 class=\"csui-heading\">"
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"title") || (depth0 != null ? lookupProperty(depth0,"title") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"title","hash":{},"loc":{"start":{"line":21,"column":38},"end":{"line":21,"column":47}}}) : helper)))
    + "</h2>\r\n        </div>\r\n\r\n        <div class=\"tile-controls\">\r\n            <div class=\"csui-favorite csui-acc-tab-region webreports-widget-parameters-btn webreports-visual-count-btn-parameters binf-hidden\">\r\n                <span class=\"csui-icon-edit inline-edit-icon icon-edit wr-icon-edit\" role=\"button\" tabindex=\"0\" aria-label=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"settings") || (depth0 != null ? lookupProperty(depth0,"settings") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"settings","hash":{},"loc":{"start":{"line":26,"column":124},"end":{"line":26,"column":136}}}) : helper)))
    + "\"></span>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n";
},"2":function(container,depth0,helpers,partials,data) {
    return "            <div class=\"arrow_back cs-go-back\"></div>\r\n";
},"4":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "            <div class=\"tile-type-icon\">\r\n                <span class=\"icon "
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"icon") || (depth0 != null ? lookupProperty(depth0,"icon") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"icon","hash":{},"loc":{"start":{"line":10,"column":34},"end":{"line":10,"column":42}}}) : helper)))
    + "\" aria-hidden=\"true\"></span>\r\n            </div>\r\n";
},"6":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"imageUrl") : depth0),{"name":"if","hash":{},"fn":container.program(7, data, 0),"inverse":container.noop,"loc":{"start":{"line":13,"column":12},"end":{"line":17,"column":19}}})) != null ? stack1 : "");
},"7":function(container,depth0,helpers,partials,data) {
    var helper, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "                <div class=\"tile-type-image "
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"imageClass") || (depth0 != null ? lookupProperty(depth0,"imageClass") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageClass","hash":{},"loc":{"start":{"line":14,"column":44},"end":{"line":14,"column":58}}}) : helper)))
    + "\">\r\n                    <img src=\""
    + container.escapeExpression(((helper = (helper = lookupProperty(helpers,"imageUrl") || (depth0 != null ? lookupProperty(depth0,"imageUrl") : depth0)) != null ? helper : container.hooks.helperMissing),(typeof helper === "function" ? helper.call(depth0 != null ? depth0 : (container.nullContext || {}),{"name":"imageUrl","hash":{},"loc":{"start":{"line":15,"column":30},"end":{"line":15,"column":42}}}) : helper)))
    + "\" aria-hidden=\"true\">\r\n                </div>\r\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return ((stack1 = lookupProperty(helpers,"if").call(depth0 != null ? depth0 : (container.nullContext || {}),(depth0 != null ? lookupProperty(depth0,"header") : depth0),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"loc":{"start":{"line":1,"column":0},"end":{"line":31,"column":7}}})) != null ? stack1 : "")
    + "\r\n<div class=\"webreports-visual-count-container\"></div>";
}});
Handlebars.registerPartial('webreports_widgets_visual.count.full.page_impl_visual.count.full.page', t);
return t;
});
/* END_TEMPLATE */
;
// Lists explicit locale mappings and fallbacks

csui.define('webreports/widgets/visual.count.full.page/impl/nls/lang',{
  // Always load the root bundle for the default locale (en-us)
  "root": true,
  // Do not load English locale bundle provided by the root bundle
  "en-us": false,
  "en": false
});

// Defines localizable strings in the default language (English)

csui.define('webreports/widgets/visual.count.full.page/impl/nls/root/lang',{
    visualCount: 'Visual Count'
});



csui.define('css!webreports/widgets/visual.count.full.page/impl/visual.count.full.page',[],function(){});
csui.define('webreports/widgets/visual.count.full.page/impl/visual.count.full.page.content.view',[
    'csui/lib/underscore',
    'csui/lib/marionette3',
    'csui/utils/base',
    'webreports/widgets/visual.data.filtered.count/impl/controls/visual.count/visual.count.view',
    'webreports/mixins/webreports.view.mixin',
    'webreports/utils/general.utils',
    'webreports/widgets/visual.data.filtered.count/impl/mixins/visual.count.view.mixin',
    'hbs!webreports/widgets/visual.count.full.page/impl/visual.count.full.page',
    'i18n!webreports/widgets/visual.count.full.page/impl/nls/lang',
    'css!webreports/widgets/visual.count.full.page/impl/visual.count.full.page'
], function (_,
             Marionette,
             base,
             VisualCountView,
             WebReportsViewMixin,
             generalUtils,
             VisualCountViewMixin,
             template,
             lang) {

    var VisualCountFullPageContentView = Marionette.View.extend({

        template: template,

        className: 'webreports-visual-count-fp-content-view',

        ui: {
            visualCount: '.webreports-visual-count-container',
        },

        regions: {
            visualCount: {
                el: '.webreports-visual-count-container',
                replaceElement: true
            }
        },

        constructor: function VisualCountFullPageContentView(options) {
            options = this.setVisualCountWidgetOptions(options);
            Marionette.View.prototype.constructor.apply(this, options);
            this.options = options;
            this._createVisualCountView();
        },

        templateContext: function () {
            var context = this.getOption("context"),
                options = this.options;

            return {
                title: base.getClosestLocalizedString(options.title, lang.visualCount),
                icon: options.titleBarIcon,
                header: (!_.isUndefined(options.header) && options.header === false) ? false : true,
                wrNode: generalUtils.isWebReportNodeContext(context)
            };
        },

        onDomRefresh: function(){
            this.showChildView('visualCount', this.visualCountView);
        },

        _createVisualCountView: function(){
            this.visualCountView = new VisualCountView(this.options);
        }
    });

    WebReportsViewMixin.mixin(VisualCountFullPageContentView.prototype);
    VisualCountViewMixin.mixin(VisualCountFullPageContentView.prototype);

    return VisualCountFullPageContentView;

});

csui.define('webreports/widgets/visual.count.full.page/visual.count.full.page.view',[
    'webreports/controls/parameter.prompt/widget.prompt.wrapper.view',
    'webreports/widgets/visual.count.full.page/impl/visual.count.full.page.content.view'
], function (WidgetPromptWrapperView, VisualCountFullPageContentView) {

    var VisualCountFullPageView = WidgetPromptWrapperView.extend({

        className: 'webreports-visual-count-fp-view',

        constructor: function VisualCountFullPageView(options) {
            // Always check for a prompt form for full page widgets
            if (options.data){
                options.data.parameterPrompt = "showPromptForm";
            }

            options.view = VisualCountFullPageContentView;

            WidgetPromptWrapperView.prototype.constructor.apply(this, arguments);
        },

        onDomRefresh: function(){
            var contentView = this.getChildView("content");
            if (contentView){
                contentView.triggerMethod('dom:refresh');
            }
        }
    });

    return VisualCountFullPageView;

});


csui.define('json!webreports/widgets/visual.count.full.page/visual.count.full.page.manifest.json',{
  "$schema": "http://opentext.com/cs/json-schema/draft-04/schema#",
  "title": "{{widgetTitle}}",
  "description": "{{widgetDescription}}",
  "kind": "fullpage",
  "supportedKinds": ["fullpage"],
  "schema": {
    "type": "object",
    "properties": {
      "title": {
        "title": "{{tileTitle}}",
        "description": "{{tileDescription}}",
        "type": "object"
      },
      "type": {
        "title": "{{typeTitle}}",
        "description": "{{typeDescription}}",
        "type": "string",
        "enum": ["bar","horizontalBar","donut","pie"],
        "default": "bar"
      },
      "id": {
        "title": "{{sourceTitle}}",
        "description": "{{sourceDescription}}",
        "type": "integer"
      },
      "activeColumn": {
        "title": "{{activeTitle}}",
        "description": "{{activeDescription}}",
        "type": "string"
      },
      "theme": {
        "title": "{{themeTitle}}",
        "description": "{{themeDescription}}",
        "type": "string",
        "enum": ["otPrimary","otSecondary","otTertiary", "dataClarity","otNavy","otTeal","otIndigo","otPlum","otMagenta"],
        "default": "otPrimary"
      },
      "viewValueAsPercentage": {
        "title": "{{percentTitle}}",
        "description": "{{percentDescription}}",
        "type": "boolean",
        "enum": [
          true,
          false
        ],
        "default": false
      },
      "animate": {
        "title": "{{animateTitle}}",
        "description": "{{animateDescription}}",
        "type": "boolean",
        "enum": [
          true,
          false
        ],
        "default": true
      },
      "groupAfter": {
        "title": "{{groupTitle}}",
        "type": "integer",
        "description": "{{groupDescription}}",
        "enum": [-1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],
        "default": -1
      },
      "sortBy": {
        "title": "{{sortTitle}}",
        "description": "{{sortDescription}}",
        "type": "string",
        "enum": ["ordinal","Count"],
        "default": "Count"
      },
      "sortOrder": {
        "title": "{{directionTitle}}",
        "description": "{{directionDescription}}",
        "type": "string",
        "enum": ["desc","asc"],
        "default": "desc"
      },
      "launchButtonConfig": {
        "type": "object",
        "title": "{{buttonTitle}}",
        "description": "{{buttonDescription}}",
        "properties": {
          "rowLimit": {
            "title": "{{maxTitle}}",
            "description": "{{maxDescription}}",
            "type": "integer",
            "default": 5000
          },
          "launchButtons": {
            "type": "array",
            "title": "{{customButtonTitle}}",
            "description": "{{customButtonDescription}}",
            "items": {
              "type": "object",
              "title": "{{addButtonTitle}}",
              "description": "{{addButtonDescription}}",
              "properties": {
                "launchButtonID": {
                  "title": "{{reportButtonTitle}}",
                  "description": "{{reportButtonDescription}}",
                  "type": "integer"
                },
                "launchButtonLabel": {
                  "title": "{{labelButtonTitle}}",
                  "description": "{{labelButtonDescription}}",
                  "type": "object"
                },
                "launchButtonTooltip": {
                  "title": "{{buttonToolTitle}}",
                  "description": "{{buttonToolDescription}}",
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "required": ["activeColumn","id"]
  },
  "options": {
    "fields": {
      "id": {
        "type": "otcs_node_picker",
        "type_control": {
          "parameters": {
            "select_types": [30303]
          }
        }
      },
      "title": {
        "type": "otcs_multilingual_string"
      },
      "parameterPrompt": {
        "type": "select",
        "optionLabels": [
          "{{parmsIgnored}}",
          "{{enabledShowPromptForm}}"
        ]
      },
      "launchButtonConfig": {
        "fields": {
          "launchButtons": {
            "items": {
              "fields": {
                "launchButtonID": {
                  "type": "otcs_node_picker",
                  "type_control": {
                    "parameters": {
                      "select_types": [30303]
                    }
                  }
                },
                "launchButtonLabel": {
                  "type": "otcs_multilingual_string"
                },
                "launchButtonTooltip": {
                  "type": "otcs_multilingual_string"
                }
              }
            }
          }
        }
      },
      "type": {
        "type": "select",
        "optionLabels": ["{{optionsTypeBar}}", "{{optionsTypeHorizontalBar}}", "{{optionsTypeDonut}}", "{{optionsTypePie}}"]
      },
      "theme": {
        "type": "select",
        "optionLabels": ["{{optionsTypeOTPrimary}}", "{{optionsTypeOTSecondary}}", "{{optionsTypeOTTertiary}}", "{{optionsTypeDataClarity}}","{{optionsTypeOTNavy}}","{{optionsTypeOTTeal}}","{{optionsTypeOTIndigo}}","{{optionsTypeOTPlum}}","{{optionsTypeOTMagenta}}"]
      },
      "groupAfter": {
        "type": "select",
        "optionLabels": ["{{optionsGroupAfterDefault}}","2","3","4","{{optionsPieDonutDefault}}","6","7","8","9","10","11","12","13","14","{{optionsBarDefault}}","16","17","18","19","20"]
      },
      "sortBy": {
        "type": "select",
        "optionLabels": ["{{optionsSortByActive}}", "{{optionsSortByCount}}"]
      },
      "sortOrder": {
        "type": "select",
        "optionLabels": ["{{optionsSortOrderDsc}}", "{{optionsSortOrderAsc}}"]
      }
    }
  }
});

csui.define('webreports/widgets/visual.count.full.page/impl/nls/visual.count.full.page.manifest',{
	// Always load the root bundle for the default locale (en-us)
	"root": true,
	// Do not load English locale bundle provided by the root bundle
	"en-us": false,
	"en": false
});

csui.define('webreports/widgets/visual.count.full.page/impl/nls/root/visual.count.full.page.manifest',{
    "widgetTitle": "Visual Count - Full",
    "widgetDescription": "This widget visualizes the total count of values matching given criteria.",
    "tileTitle": "Title",
    "tileDescription": "Enter the title for the widget. This title appears in the Tile header.",
    "typeTitle": "Chart Type",
    "typeDescription": "Select the type of chart appropriate for your data.",
    "themeTitle": "Theme",
    "themeDescription": "Select a color palette for your chart.",
    "sourceTitle": "Source WebReport",
    "sourceDescription": "Browse to select the WebReport that retrieves the data that you want to visualize.",
    "activeTitle": "Active Column",
    "activeDescription": "Enter the name of the data source column that provides the matching values to be counted.",
    "percentTitle": "Values as Percentage",
    "percentDescription": "Choose whether to show the chart values as percentages of the total count or as the actual count.",
    "animateTitle": "Animate",
    "animateDescription": "Choose whether the chart animates or not when changing certain settings in the interface.",
    "groupTitle": "Group After",
    "groupDescription": "Select the threshold for the number of discrete values whose total count will appear in the chart. Values above the threshold will be grouped as \'Other\' and the combined total will appear. The Chart Default is a threshold value appropriate to the chart type.",
    "sortTitle": "Sort By",
    "sortDescription": "Select whether to sort the chart by the value names in the Active Column or by the count of the values.",
    "directionTitle": "Sort Direction",
    "directionDescription": "Select whether to sort the chart in Ascending or Descending order.",
    "buttonTitle": "Button WebReports",
    "buttonDescription": "Configure the options for Button WebReports launched by Custom Buttons in the Expanded view",
    "maxTitle": "Maximum Items to Process",
    "maxDescription": "Enter the maximum number of data items to pass to the Button WebReport.",
    "customButtonTitle": "Custom Buttons",
    "customButtonDescription": "Set the properties for the Custom Button that appears in the Expanded View, then click the \'Add To Array\' button. Repeat as required to add multiple buttons.",
    "addButtonTitle": "Add Custom Buttons",
    "addButtonDescription": "Configure custom buttons that will appear in the Expanded view and which will launch Button Webreports.",
    "reportButtonTitle": "Button WebReport",
    "reportButtonDescription": "Browse to select the WebReport that will open when you click the button.",
    "labelButtonTitle": "Button Label",
    "labelButtonDescription": "Enter a custom label for the button.",
    "buttonToolTitle": "Button Tooltip",
    "buttonToolDescription": "Enter a tool tip for the button.",
    "parameterPromptTitle": "Parameter prompt behavior",
    "parameterPromptDescription": "Determines how the widget should behave when the source WebReport has input parameters.",
    "parmsIgnored": "Don\'t prompt - use defaults",
    "enabledShowPromptForm": "Show prompt form",
    "optionsTypeBar": "Vertical Bar",
    "optionsTypeHorizontalBar": "Horizontal Bar",
    "optionsTypeDonut": "Donut",
    "optionsTypePie": "Pie",
    "optionsTypeOTPrimary": "Evening 10",
    "optionsTypeOTSecondary": "Coral 10",
    "optionsTypeOTTertiary": "Garden 10",
    "optionsTypeDataClarity": "Clarity 20",
    "optionsTypeOTNavy": "Navy 6",
    "optionsTypeOTTeal": "Teal 6",
    "optionsTypeOTIndigo": "Indigo 6",
    "optionsTypeOTPlum": "Plum 6",
    "optionsTypeOTMagenta": "Magenta 6",
    "optionsGroupAfterDefault": "Use Chart Default",
    "optionsPieDonutDefault": "5 - Pie and Donut default",
    "optionsBarDefault": "15 - Bar default",
    "optionsSortByActive": "Active Column",
    "optionsSortByCount": "Count",
    "optionsSortOrderDsc": "Descending",
    "optionsSortOrderAsc": "Ascending"
});

// Placeholder for the build target file; the name must be the same,
// include public modules from this component

csui.define('bundles/webreports-visdata',[

    // Widgets:
    "webreports/widgets/visual.data.filtered.count/visual.data.filtered.count.view",
    "json!webreports/widgets/visual.data.filtered.count/visual.data.filtered.count.manifest.json",
    "i18n!webreports/widgets/visual.data.filtered.count/impl/nls/visual.data.filtered.count.manifest",

    "webreports/widgets/visual.count.full.page/visual.count.full.page.view",
    "json!webreports/widgets/visual.count.full.page/visual.count.full.page.manifest.json",
    "i18n!webreports/widgets/visual.count.full.page/impl/nls/visual.count.full.page.manifest"

], {});

csui.require(['require', 'css'], function (require, css) {

    css.styleLoad(require, 'webreports/bundles/webreports-visdata');

});

