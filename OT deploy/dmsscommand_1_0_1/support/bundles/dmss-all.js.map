{
  "version": 3,
  "sources": [
    "../../src/commands/open.classic/impl/sign.view.js",
    "../../src/commands/open.classic/impl/nls/lang.js",
    "../../src/commands/open.classic/impl/nls/root/lang.js",
    "../../src/commands/open.classic/impl/nls/lv/lang.js",
    "../../src/commands/open.classic/impl/nls/lang!i18n",
    "../../src/config/dmss.config.json!json",
    "../../src/commands/open.classic/open.classic.command.js",
    "../../src/commands/open.classic/open.classic.nodestable.toolitems.js",
    "dmss-all.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtvaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "bundles/dmss-all.js",
  "sourcesContent": [
    "csui.define('dmss/commands/open.classic/impl/sign.view',['csui/lib/jquery', 'csui/lib/marionette',\r\n  'i18n!dmss/commands/open.classic/impl/nls/lang',\r\n  'hbs!dmss/commands/open.classic/impl/sign', 'csui/lib/backbone', 'csui/utils/contexts/factories/connector', 'json!dmss/config/dmss.config.json'\r\n], function ($, Marionette, lang, template, Backbone, ConnectorFactory, config) {\r\n  'use strict';\r\n\r\n  var CreateContainerView = Marionette.ItemView.extend({\r\n\r\n    initialize: function () {\r\n    },\r\n\r\n    onRender: function() {\r\n      switch(this.options.mode){\r\n        case 'Sign':\r\n          this.ui.share.hide();\r\n          this.ui.status.text(lang.createContainerInformationModeSign);\r\n          break;\r\n        case 'Share':\r\n          this.ui.sign.hide();\r\n          this.ui.status.text(lang.createContainerInformationModeShare);\r\n          break;\r\n        default: \r\n          this.ui.status.text(lang.createContainerInformationModeShareOrSin);\r\n          break;\r\n      }\r\n    },\r\n\r\n    constructor: function CreateContainerView(options) {\r\n      Marionette.ItemView.prototype.constructor.apply(this, arguments);\r\n      \r\n      this.model.set({\r\n        uniqueId: this.cid,\r\n        newName: this.model.get('oldName'),\r\n        lang: lang,\r\n        docs: this.options.docs\r\n      });\r\n      \r\n    },\r\n\r\n    className: 'container-create',\r\n\r\n    template: template,\r\n\r\n    ui: {\r\n      error: '.container-error',\r\n      share: '.container-share',\r\n\t    sign: '.container-sign',\r\n      status: '.status-placeholder',\r\n      form: '.main-form',\r\n      loader: '.load-container',\r\n      verselection: '.otdoc_version',\r\n      conselection: '.otdoc_container'\r\n    },\r\n\r\n    events: {\r\n      'click @ui.share': function (event) {\r\n        event.preventDefault();\r\n        this.triggerMethod('share', this);\r\n      },\r\n      'click @ui.sign': function (event) {\r\n        event.preventDefault();\r\n        this.triggerMethod('sign', this);\r\n      }\r\n    },\r\n\r\n    modelEvents: {\r\n      'change:errorMessage': function () {\r\n        var errorMessage = this.model.get('errorMessage') || '',\r\n            classMethod = errorMessage ? 'removeClass' : 'addClass';\r\n        this.ui.error\r\n            [classMethod]('binf-hidden')\r\n            .text(errorMessage);\r\n      }\r\n    },\r\n\r\n    onDomRefresh: function () {\r\n      //this.ui.name.focus();\r\n    },\r\n\r\n    _shareFormFilled: function(){\r\n       return true;\r\n    },\r\n  });\r\n  return CreateContainerView;\r\n});\r\n\n",
    "csui.define('dmss/commands/open.classic/impl/nls/lang',{\r\n  \"root\": true,\r\n  \"lv\": true,\r\n  // Do not load English locale bundle provided by the root bundle\r\n  \"en-us\": false,\r\n  \"en\": false\r\n});\r\n\n",
    "csui.define('dmss/commands/open.classic/impl/nls/root/lang',{\r\n  toolbarButtonTitle: 'Sign',\r\n  dialogTitle: 'Document signing',\r\n  submitLabel: 'Create',\r\n  submitSignLabel: 'Create ASICE container and sign',\r\n  submitShareLabel: 'Create ASICE container and share',\r\n  docListHeader: 'Selected Documents',\r\n  addNewVersion: 'Add version',\r\n  createNew: 'Create new document',\r\n  categoriesLabel: 'Categories',\r\n  categoryPlaceholder: 'Category name',\r\n  containerName: 'Container name',\r\n  containerNamePlaceholder: 'Container name',\r\n  personCode: 'Person code',\r\n  mobileNumbner: 'Mobile',\r\n  conCreated: 'Container created. Signing in progress...',\r\n  signFinish: 'Container signed successfully.',\r\n  conError: 'Error occured. Please try again.',\r\n  msgPIN2Question: 'Status: signing started. Enter PIN2. Verification code: ',\r\n  msgContainerSignedDownload: 'Container signed. Container link: ',\r\n  msgContainerCreatedDownload: 'Container created. Container link: ',\r\n  download: 'download',\r\n  msgErrorTryAgain: 'Error occured. Please try again.',\r\n  msgRedirect: 'Redirecting to signing view',\r\n  dialogTitleShareOrSign: 'Create container and share or sign',\r\n  createContainerInformationModeSign: 'This action will create ASICE container from documents below and redirect you to signing view. Select document to which ASICE container will be added as new version.',\r\n  createContainerInformationModeShare: 'This action will create ASICE container from documents below and redirect you to signing process initiation view. Select document to which ASICE container will be added as new version.',\r\n  createContainerInformationModeShareOrSin: 'This action will create ASICE container from documents below and redirect you to signing view OR signing process initiation view depending on button pressed. Select document to which ASICE container will be added as new version.',\r\n  createContainerAndRedirectSign: 'Creating container and redirecting to signing view...',\r\n  /* BELOW ARE TECHNICAL FIELDS, DO NOT CHANGE WITHOUT CONSULTING */\r\n  singleMode: 'single',\r\n  multiMode: 'multi',\r\n  modeSign: 'Sign',\r\n  modeShare: 'Share',\r\n  modeShareAndSign: 'Share And Sign',\r\n  btnShareAndSignName: 'Sign or share as ASICE'  \r\n});\r\n\n",
    "csui.define('dmss/commands/open.classic/impl/nls/lv/lang',{\r\n  toolbarButtonTitle: 'Izveidot / parakstīt konteineri',\r\n  dialogTitle: 'Izveidot / parakstīt konteineri',\r\n  submitLabel: 'Izveidot',\r\n  submitSignLabel: 'Izveidot un parakstīt',\r\n  submitShareLabel: 'Nosūtīt parakstīšanai',\r\n  docListHeader: 'Dokumenti',\r\n  addNewVersion: 'Pievienot versiju',\r\n  createNew: 'Uztaisīt jauno dokumentu',\r\n  categoriesLabel: 'Kategorijas',\r\n  categoryPlaceholder: 'Kategorijas nosaukums',\r\n  containerName: 'Konteinera nosaukums',\r\n  containerNamePlaceholder: 'Konteinera nosaukums',\r\n  personCode: 'Personas kods',\r\n  mobileNumbner: 'Mob. numurs',\r\n  conCreated: 'Konteineris ir izveidots. Notiek parakstīšana...',\r\n  signFinish: 'Konteineris ir veiksmīgi parakstīts.',\r\n  conError: 'Notika kļūda. Mēģiniet vēlreiz.',\r\n  msgPIN2Question: 'Statuss: parakstīšanas procedūra ir uzsākta. Ievadiet PIN2. Pārbaudes kods: ',\r\n  msgContainerSignedDownload: 'Konteineris tika parakstīts: ',\r\n  msgContainerCreatedDownload: 'Konteineris izveidots: ',\r\n  download: 'lejuplādēt',\r\n  msgErrorTryAgain: 'Statuss: ir notikusi kļūda. Mēģiniet vēlreiz.',\r\n  msgRedirect: 'Notiek redirekts parakstīšanas skatā',\r\n  dialogTitleShareOrSign: 'Create container and share or sign',\r\n  createContainerInformationModeSign: 'This action will create ASICE container from documents below and redirects you to signing view',\r\n  createContainerInformationModeShare: 'This action will create ASICE container from documents below and redirects you to signing process initiation view',\r\n  createContainerInformationModeShareOrSin: 'This action will create ASICE container from documents below and redirects you to signing view OR signing process initiation view depending on button pressed',\r\n  createContainerAndRedirectSign: 'Creating container and redirecting to signing view...',\r\n  /* BELOW ARE TECHNICAL FIELDS, DO NOT CHANGE WITHOUT CONSULTING */\r\n  singleMode: 'single',\r\n  multiMode: 'multi',\r\n  modeSign: 'Sign',\r\n  modeShare: 'Share',\r\n  modeShareAndSign: 'Share And Sign',\r\n  btnShareAndSignName: 'Sign or share as ASICE'  \r\n});\r\n\n",
    "\n",
    "\ncsui.define('json!dmss/config/dmss.config.json',{\r\n    \"INTERNAL_PORTAL_URL\": \"https://signbox.mihails-test/sendFiles\",\r\n    \"GATEWAY_ALTERNATE_VIEW_API\": \"http://localhost:92/api/auth/session/redirecturl\",\r\n    \"COMPOSE_CONTAINER_API\": \"http://localhost:84/api/container/compose/existing\",\r\n    \"OTCS_REDIRECT_URL\": \"http://localhost/otcs/cs.exe/app/nodes/\",\r\n    \"ALLOWED_MIMETYPES\": [\"application/vnd.etsi.asic-e+zip\", \"application/pdf\"],\r\n    \"ARCHIVE_PREFIX\": \"OTCS-\"\r\n}\r\n);\n\n",
    "csui.define('dmss/commands/open.classic/open.classic.command',['csui/utils/commands/open.classic.page', 'dmss/commands/open.classic/impl/sign.view', 'csui/controls/dialog/dialog.view', 'csui/lib/backbone', 'i18n!dmss/commands/open.classic/impl/nls/lang', 'csui/utils/commandhelper', 'csui/utils/contexts/factories/connector', 'csui/utils/nodesprites', 'json!dmss/config/dmss.config.json'\r\n], function (OpenClassicPageCommand, CreateContainerViewModel ,DialogView, Backbone, Translations, CommandHelper, ConnectorFactory, nodeSpriteCollection, settings) {\r\n  'use strict';\r\n\r\n  const singleMode = Translations.singleMode;\r\n  const multiMode = Translations.multiMode;\r\n  const modeSign = Translations.modeSign;\r\n  const modeShare = Translations.modeShare;\r\n  const modeShareAndSign = Translations.modeShareAndSign;\r\n  const btnShareAndSignName = Translations.btnShareAndSignName;\r\n\r\n  var toggleLoading = function (ui) {\r\n    if (ui.loader.hasClass('binf-hidden')) {\r\n      ui.loader.removeClass('binf-hidden');\r\n      ui.form.addClass('alpha');\r\n    } else {\r\n      ui.loader.addClass('binf-hidden');\r\n      ui.form.removeClass('alpha');\r\n    }\r\n  };\r\n\r\n  var getDialogTitle = function (mode) {\r\n    let dialogTitle = \"\";\r\n\r\n    switch (mode) {\r\n      case modeSign:\r\n        dialogTitle = Translations.submitSignLabel;\r\n        break;\r\n      case modeShare:\r\n        dialogTitle = Translations.submitShareLabel;\r\n        break;\r\n      default:\r\n        dialogTitle = Translations.dialogTitleShareOrSign;\r\n    }\r\n\r\n    return dialogTitle;\r\n  };\r\n\r\n  var isSingleAsiceOrPDF = function (nodes) {\r\n    if ((nodes.models.length == 1) && (settings.ALLOWED_MIMETYPES.includes(nodes.models[0].attributes.mime_type))) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  var internalPortalRedirect = function (docId, rootFolderID) {\r\n    window.location = settings.INTERNAL_PORTAL_URL + \"?id=\" + settings.ARCHIVE_PREFIX + docId + '&redirectUrl=' + settings.OTCS_REDIRECT_URL + rootFolderID;\r\n  };\r\n\r\n  var buildInterface = function (containerModel, nodes, connector, isSinglePdfOrAsice, CreateContainerView, mode, rootFolderID) {\r\n    let docListHTML = '<table class=\"container_doc_list binf-table dataTable\"><thead><th class=\"csui-table-cell-name\">' + Translations.docListHeader + '</th>' +\r\n      '</thead>';\r\n    let endpointCreateContainer = settings.COMPOSE_CONTAINER_API;\r\n\r\n    if (isSinglePdfOrAsice) {\r\n      docListHTML = docListHTML + drawBrowseViewHTML(nodes, connector, singleMode);\r\n    } else {\r\n      docListHTML = docListHTML + drawBrowseViewHTML(nodes, connector, multiMode) + '</table>';\r\n    }\r\n\r\n    let dialogTitle = getDialogTitle(mode);\r\n    let createView = new CreateContainerView({ model: containerModel, docs: docListHTML, mode: mode });\r\n    let dialog = new DialogView({\r\n      title: dialogTitle,\r\n      view: createView\r\n    });\r\n\r\n    //BELOW ARE EVENTS FOR BOTH CONT. CREATION INTERFACE\r\n    createView.on('sign', function (e) {\r\n      toggleLoading(createView.ui);\r\n\r\n      let endpointAlternateView = settings.GATEWAY_ALTERNATE_VIEW_API;\r\n      let ticket = connector.connection.session.ticket;\r\n      let needConCreation = !isSinglePdfOrAsice;\r\n\r\n      if ((needConCreation) || (mode == modeShareAndSign)) {\r\n        createView.ui.status.text(Translations.createContainerAndRedirectSign);\r\n\r\n        let nodeList = getCheckedNodes(createView.ui.conselection);\r\n        let containerID = '';\r\n        let newContainerName = '';\r\n\r\n        if (nodes.models.length == 1) {\r\n          newContainerName = changeExtensionToAsice(nodes.models[0].attributes.name);\r\n        } else {\r\n          newContainerName = changeExtensionToAsice(getContainerPlaceholderName(createView.ui.verselection));\r\n        }\r\n        //if single object but forced container creation\r\n        if (nodes.models.length == 1) {\r\n          containerID = nodes.models[0].attributes.id;\r\n        } else {\r\n          containerID = getContainerPlaceholderId(createView.ui.verselection);\r\n        }\r\n        createContainer(endpointCreateContainer, ticket, nodeList, containerID, newContainerName, function (data) {\r\n          if (!data.error) {\r\n            getAlternateViewURL(endpointAlternateView, ticket, containerID, rootFolderID, function (result) {\r\n              if (!result.error) {\r\n                window.location = result.location;\r\n              } else {\r\n                createView.ui.status.text(result.error);\r\n                refreshView(createView.ui);\r\n                toggleLoading(createView.ui);\r\n              }\r\n            });\r\n          } else {\r\n            createView.ui.status.text(data.error);\r\n            toggleLoading(createView.ui);\r\n          }\r\n        });\r\n      } else {\r\n        let id = nodes.models[0].attributes.id;\r\n\r\n        //IF ERROR ON INSTA REDIRECT SHOW IT IN ALERT AS SOON AS THERE IS NO OTHER INTERFACE\r\n        getAlternateViewURL(endpointAlternateView, ticket, id, rootFolderID, function (result) {\r\n          if (!result.error) {\r\n            window.location = result.location;\r\n          } else {\r\n            createView.ui.status.text(result.error);\r\n            refreshView(createView.ui);\r\n            alert(result.error);\r\n          }\r\n        });\r\n      }\r\n\r\n    });\r\n\r\n    //share to start external signing process\r\n    createView.on('share', function (e) {\r\n      toggleLoading(createView.ui);\r\n\r\n      let needConCreation = !isSinglePdfOrAsice;\r\n      let ticket = connector.connection.session.ticket;\r\n\r\n      if ((needConCreation) || (mode == modeShareAndSign)) {\r\n        createView.ui.status.text(Translations.createContainerAndRedirectSign);\r\n        createView.ui.status.show();\r\n\r\n        let nodeList = getCheckedNodes(createView.ui.conselection);\r\n        let containerID = '';\r\n        let newContainerName = '';\r\n\r\n        //if single object but forced container creation\r\n        if (nodes.models.length == 1) {\r\n          containerID = nodes.models[0].attributes.id;\r\n        } else {\r\n          containerID = getContainerPlaceholderId(createView.ui.verselection);\r\n        }\r\n        if (nodes.models.length == 1) {\r\n          newContainerName = changeExtensionToAsice(nodes.models[0].attributes.name);\r\n        } else {\r\n          newContainerName = changeExtensionToAsice(getContainerPlaceholderName(createView.ui.verselection));\r\n        }\r\n        createContainer(endpointCreateContainer, ticket, nodeList, containerID, newContainerName, function (data) {\r\n          if (!data.error) {\r\n            internalPortalRedirect(containerID, rootFolderID);\r\n          } else {\r\n            createView.ui.status.text(data.error);\r\n            refreshView(createView.ui);\r\n            toggleLoading(createView.ui);\r\n          }\r\n        });\r\n      } else {\r\n        let id = nodes.models[0].attributes.id;\r\n        internalPortalRedirect(id, rootFolderID);\r\n      }\r\n    });\r\n\r\n    return dialog;\r\n  };\r\n\r\n  //remove loading icon and button disabled effect\r\n  var refreshView = function (ui) {\r\n    ui.loader.addClass('binf-hidden');\r\n    ui.sign.removeClass('binf-disabled').removeAttr('disabled');\r\n    ui.share.removeClass('binf-disabled').removeAttr('disabled');\r\n  };\r\n\r\n  var changeExtensionToAsice = function (name) {\r\n    return name.replace(/\\.[^/.]+$/, \"\") + \".asice\";\r\n  };\r\n\r\n  var getCheckedNodes = function (checkbtns) {\r\n    let nodes = [];\r\n\r\n    for (let i = 0; i < checkbtns.length; i++) {\r\n      if (checkbtns[i].checked) {\r\n        let currentNode = {};\r\n        try {\r\n          currentNode.documentId = checkbtns[i].id.split('chk_')[1];\r\n          currentNode.fileName = checkbtns[i].dataset.name;\r\n          nodes.push(currentNode);\r\n        } catch (e) {\r\n          console.info(e);\r\n        }\r\n      }\r\n    }\r\n\r\n    return nodes;\r\n  };\r\n\r\n  var getContainerPlaceholderName = function (radiobtns) {\r\n    let containerName = \"\";\r\n\r\n    for (let i = 0; i < radiobtns.length; i++) {\r\n      if (radiobtns[i].checked) {\r\n        try {\r\n          containerName = radiobtns[i].dataset.name;\r\n        } catch (e) {\r\n          console.info(e);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return containerName;\r\n  };\r\n\r\n  var getContainerPlaceholderId = function (radiobtns) {\r\n    let containerID = 0;\r\n\r\n    for (let i = 0; i < radiobtns.length; i++) {\r\n      if (radiobtns[i].checked) {\r\n        try {\r\n          containerID = radiobtns[i].id.split('radio_')[1];\r\n        } catch (e) {\r\n          console.info(e);\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    return containerID;\r\n  };\r\n\r\n  var getAlternateViewURL = function (endpoint, ticket, id, rootFolderID, callback) {\r\n    Backbone.ajax({\r\n      type: \"POST\",\r\n      cache: false,\r\n      url: endpoint,\r\n      data: {\r\n        redirecturl: settings.OTCS_REDIRECT_URL + rootFolderID,\r\n        documentid: settings.ARCHIVE_PREFIX + id\r\n      },\r\n      headers: { 'OTCSTICKET': ticket },\r\n      success: function (data) {\r\n        try {\r\n          callback(\r\n            {\r\n              location: data.location\r\n            }\r\n          );\r\n        } catch (e) {\r\n          callback(\r\n            {\r\n              error: Translations.msgErrorTryAgain\r\n            }\r\n          );\r\n        }\r\n      },\r\n      error: function (error) {\r\n        console.info(error);\r\n        callback(\r\n          {\r\n            error: Translations.msgErrorTryAgain\r\n          }\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  //return created container ID\r\n  var createContainer = function (endpointCreateContainer, ticket, docs, addver, name, callback) {\r\n    let containerid;\r\n    //ajax request to create container\r\n    Backbone.ajax({\r\n      type: \"POST\",\r\n      cache: false,\r\n      contentType: \"application/json\",\r\n      url: endpointCreateContainer,\r\n      dataType: \"json\",\r\n      data: JSON.stringify(\r\n        {\r\n          \"documentId\": addver,\r\n          \"newDocumentName\": name,\r\n          \"containerDocuments\": docs\r\n        })\r\n      ,\r\n      headers: { 'OTCSTICKET': ticket },\r\n      success: function (data) {\r\n        callback(data);\r\n      },\r\n      error: function (error) {\r\n        callback(\r\n          {\r\n            error: Translations.msgErrorTryAgain\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    return containerid;\r\n  };\r\n\r\n  // draw browse view html. Mode single doc / multi docs.\r\n  var drawBrowseViewHTML = function (nodes, connector, mode) {\r\n    let docListHTML = '';\r\n    let radioCheckFirst = '';\r\n\r\n    for (let i = 0; i < nodes.models.length; i++) {\r\n      let nameTitleAria = '';\r\n      let exactNodeSprite = nodeSpriteCollection.findByNode(nodes.models[i]) || {};\r\n      let mimeTypeFromNodeSprite = '';\r\n\r\n      if (exactNodeSprite.attributes) {\r\n        mimeTypeFromNodeSprite = exactNodeSprite.get('mimeType');\r\n      }\r\n      let title = mimeTypeFromNodeSprite || nodes.models[i].get(\"type_name\") || this.model.get(\"type\");\r\n      if (nodes.models[i].get(\"name\") && title) {\r\n        nameTitleAria = title;\r\n      }\r\n\r\n      if (i == 0) {\r\n        radioCheckFirst = 'checked';\r\n      }\r\n      else {\r\n        radioCheckFirst = '';\r\n      }\r\n\r\n      //let radio_cell = (mode == multiMode) ? '<td><input ' + radioCheckFirst + ' data-name=\"' + nodes.models[i].attributes.name + '\" class=\"otdoc_version\" type=\"radio\" id=\"radio_' + nodes.models[i].attributes.id + '\" name=\"addversion\" /></td>' : '<td></td>';\r\n      let radio_cell = (nodes.models.length > 1) ? '<td><input ' + radioCheckFirst + ' data-name=\"' + nodes.models[i].attributes.name + '\" class=\"otdoc_version\" type=\"radio\" id=\"radio_' + nodes.models[i].attributes.id + '\" name=\"addversion\" /></td>' : '<td></td>';\r\n      let checkbox_cell = '<td><input class=\"otdoc_container\" type=\"checkbox\" data-name=\"' + nodes.models[i].attributes.name + '\" id=\"chk_' + nodes.models[i].attributes.id + '\" data-id=\"' + nodes.models[i].attributes.id + '\" checked /></td>';\r\n\r\n      let icon_cell = '<td class=\"csui-table-cell-type\" data-csui-attribute=\"type\">' +\r\n        '<div class=\"csui-table-cell-name-div\">' +\r\n        '<a class=\"csui-table-cell-default-action\" href=\"' + connector.connection.url + '/app/nodes/' + nodes.models[i].attributes.id + '\" aria-label=\"' + nodes.models[i].attributes.name + '\" tabindex=\"-1\">'\r\n        + '<span class=\"csui-icon-group\" title=\"' + nameTitleAria + '\" aria-label=\"' + nameTitleAria + '\"><span class=\"' + exactNodeSprite.attributes.className + '\"></span>' +\r\n        '</span>' + nodes.models[i].attributes.name +\r\n        '</a>'\r\n        + '</div>'\r\n        + '</td>';\r\n      docListHTML = docListHTML + '<tr style=\"display:block;\">' + checkbox_cell + radio_cell + icon_cell + '</tr>';\r\n    }\r\n\r\n    return docListHTML;\r\n  };\r\n\r\n  var OpenClassicCommand = OpenClassicPageCommand.extend({\r\n\r\n    defaults: {\r\n      signature: 'dmssSign',\r\n      scope: 'multi'\r\n    },\r\n\r\n    enabled: function (nodes) {\r\n      if ((nodes.toolItem.attributes.name != btnShareAndSignName) && (nodes.nodes.length == 1) && (!settings.ALLOWED_MIMETYPES.includes(nodes.nodes.models[0].attributes.mime_type))) {\r\n        return false;\r\n      }\r\n      else\r\n        if ((nodes.toolItem.attributes.name != btnShareAndSignName) && (nodes.nodes.length > 1)) {\r\n          return false;\r\n        }\r\n        else {\r\n          return true;\r\n        }\r\n    },\r\n\r\n    getUrlQueryParameters: function (node, options) {\r\n    },\r\n\r\n    execute: function (nodeList, options) {\r\n\r\n      let buttonTypePressed = options.addableTypeName,\r\n        connector = options.context.getObject(ConnectorFactory),\r\n        ticket = connector.connection.session.ticket,\r\n        endpointAlternateView = settings.GATEWAY_ALTERNATE_VIEW_API;\r\n\r\n      //require(['dmss/commands/open.classic/impl/sign.view'\r\n      //], function (CreateContainerView) {\r\n        let nodes = CommandHelper.getAtLeastOneNode(nodeList),\r\n          containerModel = new Backbone.Model(),\r\n          rootFolderID = nodes.models[0].attributes.parent_id,\r\n          isSinglePdfOrAsice = isSingleAsiceOrPDF(nodes);\r\n\r\n        switch (buttonTypePressed) {\r\n          case \"Sign\":\r\n            if (isSinglePdfOrAsice) {\r\n              getAlternateViewURL(endpointAlternateView, ticket, nodes.models[0].attributes.id, rootFolderID, function (result) {\r\n                if (!result.error) {\r\n                  window.location = result.location;\r\n                } else {\r\n                  console.log(result.error);\r\n                }\r\n              });\r\n            } else {\r\n              //container interface\r\n              let dialog = buildInterface(containerModel, nodes, connector, isSinglePdfOrAsice, CreateContainerViewModel, modeSign, rootFolderID);\r\n              dialog.show();\r\n            }\r\n            break;\r\n          case \"Share\":\r\n            if (isSinglePdfOrAsice) {\r\n              internalPortalRedirect(nodes.models[0].attributes.id, rootFolderID);\r\n            } else {\r\n              //container interface\r\n              let dialog = buildInterface(containerModel, nodes, connector, isSinglePdfOrAsice, CreateContainerViewModel, modeShare, rootFolderID);\r\n              dialog.show();\r\n            }\r\n            break;\r\n          case \"Sign or share as ASICE\":\r\n            //container interface\r\n            let dialog = buildInterface(containerModel, nodes, connector, isSinglePdfOrAsice, CreateContainerViewModel, modeShareAndSign, rootFolderID);\r\n            dialog.show();\r\n            break;\r\n        }\r\n      //});\r\n    }\r\n  });\r\n\r\n  return OpenClassicCommand;\r\n\r\n});\r\n\n",
    "csui.define('dmss/commands/open.classic/open.classic.nodestable.toolitems',[],function () {\r\n  'use strict';\r\n\r\n  return {\r\n    otherToolbar: [\r\n      {\r\n        signature: 'dmssSign',\r\n        name: 'Sign'\r\n      },\r\n      {\r\n        signature: 'dmssSign',\r\n        name: 'Share',\r\n      },\r\n      {\r\n        signature: 'dmssSign',\r\n        name: 'Sign or share as ASICE'\r\n      }\r\n    ]\r\n  };\r\n\r\n});\r\n\n",
    "// Placeholder for the build target file; the name must be the same,\r\n// include public modules from this component\r\n\r\ncsui.define('bundles/dmss-all',[\r\n    'dmss/commands/open.classic/open.classic.command',\r\n    'dmss/commands/open.classic/open.classic.nodestable.toolitems'\r\n], {});\r\n\r\ncsui.require([\r\n  'require',\r\n  'css'\r\n], function (require, css) {\r\n  // Load the bundle-specific stylesheet\r\n  //css.styleLoad(require, 'dmss/bundles/dmss-all');\r\n});\n"
  ]
}